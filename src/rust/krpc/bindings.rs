/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub type std_conditional_type<_If> = _If;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
pub type std___all = std_is_same;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair<_T1, _T2> {
    pub first: _T1,
    pub second: _T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__EnableB = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair__CheckArgs {
    pub _address: u8,
}
pub type std_pair__CheckArgsDep = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair__CheckTupleLikeConstructor {
    pub _address: u8,
}
pub type std_pair__CheckTLC = u8;
pub type std_istream = std_basic_istream;
pub type std_ostream = std_basic_ostream;
pub type std_streampos = std_fpos<mbstate_t>;
pub type std_streamoff = ::std::os::raw::c_longlong;
pub type std_string = std_basic_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_input_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_input_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_input_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_forward_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_forward_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_forward_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_bidirectional_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_bidirectional_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_bidirectional_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bidirectional_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_bidirectional_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_random_access_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_random_access_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_random_access_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
pub type std_iterator_iterator_category<_Category> = _Category;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iter> {
    pub __t: _Iter,
    pub current: _Iter,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
}
pub type std_reverse_iterator_iterator_type<_Iter> = _Iter;
pub type std_reverse_iterator_difference_type = std_iterator_traits;
pub type std_reverse_iterator_reference = std_iterator_traits;
pub type std_reverse_iterator_pointer = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___wrap_iter<_Iter> {
    pub __i: std___wrap_iter_iterator_type<_Iter>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
}
pub type std___wrap_iter_iterator_type<_Iter> = _Iter;
pub type std___wrap_iter_iterator_category = std_iterator_traits;
pub type std___wrap_iter_value_type = std_iterator_traits;
pub type std___wrap_iter_difference_type = std_iterator_traits;
pub type std___wrap_iter_pointer = std_iterator_traits;
pub type std___wrap_iter_reference = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub __base_: std_tuple__BaseT,
}
pub type std_tuple__BaseT = std___tuple_impl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__PackExpandsToThisTuple {
    pub _base: std_false_type,
}
pub type std_tuple__CanCopyAssign = std___all;
pub type std_tuple__CanMoveAssign = std___all;
#[repr(C)]
#[derive(Debug)]
pub struct std___libcpp_refstring {
    pub __imp_: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_std___libcpp_refstring() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_refstring>(),
        8usize,
        concat!("Size of: ", stringify!(std___libcpp_refstring))
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_refstring>(),
        8usize,
        concat!("Alignment of ", stringify!(std___libcpp_refstring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std___libcpp_refstring>())).__imp_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___libcpp_refstring),
            "::",
            stringify!(__imp_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std_atomic___base = u8;
pub type std___pointer_traits_difference_type_type = isize;
pub type std___pointer_traits_rebind_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_element_type = u8;
pub type std_pointer_traits_difference_type = u8;
pub type std_pointer_traits_rebind = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___nat {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___rebind_pointer {
    pub _address: u8,
}
pub type std___rebind_pointer_type = std_pointer_traits;
pub type std___pointer_type_imp___pointer_type_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___pointer_type {
    pub _address: u8,
}
pub type std___pointer_type_type = u8;
pub type std___propagate_on_container_copy_assignment_type = std_false_type;
pub type std___propagate_on_container_move_assignment_type = std_false_type;
pub type std___propagate_on_container_swap_type = std_false_type;
pub type std___is_always_equal_type = std_is_empty;
pub type std___allocator_traits_rebind_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = [u8; 0usize];
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = [u8; 0usize];
pub type std_allocator_traits_const_void_pointer = [u8; 0usize];
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = u8;
pub type std_allocator_traits_propagate_on_container_move_assignment = u8;
pub type std_allocator_traits_propagate_on_container_swap = u8;
pub type std_allocator_traits_is_always_equal = u8;
pub type std_allocator_traits_rebind_alloc = u8;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___rebind_alloc_helper {
    pub _address: u8,
}
pub type std___rebind_alloc_helper_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std___compressed_pair_elem__ParamT<_Tp> = _Tp;
pub type std___compressed_pair_elem_reference<_Tp> = *mut _Tp;
pub type std___compressed_pair_elem_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___compressed_pair {
    pub _address: u8,
}
pub type std___compressed_pair__Base1 = u8;
pub type std___compressed_pair__Base2 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_ptr_deleter_sfinae {
    pub _address: u8,
}
pub type std___unique_ptr_deleter_sfinae___lval_ref_type<_Deleter> = *const _Deleter;
pub type std___unique_ptr_deleter_sfinae___good_rval_ref_type<_Deleter> = *mut _Deleter;
pub type std___unique_ptr_deleter_sfinae___enable_rval_overload = std_true_type;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub __ptr_: std___compressed_pair,
}
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr_pointer = std___pointer_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr___nat {
    pub __for_bool_: ::std::os::raw::c_int,
}
pub type std_unique_ptr__DeleterSFINAE = std___unique_ptr_deleter_sfinae;
pub type std_unique_ptr__LValRefType = u8;
pub type std_unique_ptr__GoodRValRefType = u8;
pub type std_unique_ptr__BadRValRefType = u8;
pub type std_unique_ptr__EnableIfDeleterDefaultConstructible = u8;
pub type std_unique_ptr__EnableIfDeleterConstructible = u8;
pub type std_unique_ptr__EnableIfMoveConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterAssignable = u8;
#[repr(C)]
pub struct std___shared_count__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_count {
    pub vtable_: *const std___shared_count__bindgen_vtable,
    pub __shared_owners_: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_std___shared_count() {
    assert_eq!(
        ::std::mem::size_of::<std___shared_count>(),
        16usize,
        concat!("Size of: ", stringify!(std___shared_count))
    );
    assert_eq!(
        ::std::mem::align_of::<std___shared_count>(),
        8usize,
        concat!("Alignment of ", stringify!(std___shared_count))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std___shared_count>())).__shared_owners_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std___shared_count),
            "::",
            stringify!(__shared_owners_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__shared_countD1Ev"]
    pub fn std___shared_count___shared_count_destructor(this: *mut std___shared_count);
}
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_weak_count {
    pub _base: std___shared_count,
    pub __shared_weak_owners_: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_std___shared_weak_count() {
    assert_eq!(
        ::std::mem::size_of::<std___shared_weak_count>(),
        24usize,
        concat!("Size of: ", stringify!(std___shared_weak_count))
    );
    assert_eq!(
        ::std::mem::align_of::<std___shared_weak_count>(),
        8usize,
        concat!("Alignment of ", stringify!(std___shared_weak_count))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std___shared_weak_count>())).__shared_weak_owners_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(std___shared_weak_count),
            "::",
            stringify!(__shared_weak_owners_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_count14__release_weakEv"]
    pub fn std___shared_weak_count___release_weak(this: *mut std___shared_weak_count);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_count4lockEv"]
    pub fn std___shared_weak_count_lock(
        this: *mut std___shared_weak_count,
    ) -> *mut std___shared_weak_count;
}
impl std___shared_weak_count {
    #[inline]
    pub unsafe fn __release_weak(&mut self) {
        std___shared_weak_count___release_weak(self)
    }
    #[inline]
    pub unsafe fn lock(&mut self) -> *mut std___shared_weak_count {
        std___shared_weak_count_lock(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_countD1Ev"]
    pub fn std___shared_weak_count___shared_weak_count_destructor(
        this: *mut std___shared_weak_count,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info"]
    pub fn std___shared_weak_count___get_deleter(
        this: *mut ::std::os::raw::c_void,
        arg1: *const std_type_info,
    ) -> *const ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr<_Tp> {
    pub __ptr_: *mut std_shared_ptr_element_type<_Tp>,
    pub __cntrl_: *mut std___shared_weak_count,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std_shared_ptr_element_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_shared_ptr___nat {
    pub __for_bool_: ::std::os::raw::c_int,
}
pub type std_shared_ptr___shared_ptr_default_allocator_type = std_allocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
pub type std_char_traits_char_type<_CharT> = _CharT;
pub type std_char_traits_int_type = ::std::os::raw::c_int;
pub type std_char_traits_off_type = std_streamoff;
pub type std_char_traits_pos_type = std_streampos;
pub type std_char_traits_state_type = mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string_view<_CharT> {
    pub __data: *const std_basic_string_view_value_type<_CharT>,
    pub __size: std_basic_string_view_size_type,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_basic_string_view_value_type<_CharT> = _CharT;
pub type std_basic_string_view_pointer<_CharT> = *mut _CharT;
pub type std_basic_string_view_const_pointer<_CharT> = *const _CharT;
pub type std_basic_string_view_reference<_CharT> = *mut _CharT;
pub type std_basic_string_view_const_reference<_CharT> = *const _CharT;
pub type std_basic_string_view_const_iterator<_CharT> = std_basic_string_view_const_pointer<_CharT>;
pub type std_basic_string_view_iterator<_CharT> = std_basic_string_view_const_iterator<_CharT>;
pub type std_basic_string_view_const_reverse_iterator<_CharT> =
    std_reverse_iterator<std_basic_string_view_const_iterator<_CharT>>;
pub type std_basic_string_view_reverse_iterator<_CharT> =
    std_basic_string_view_const_reverse_iterator<_CharT>;
pub type std_basic_string_view_size_type = usize;
pub type std_basic_string_view_difference_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_StateT> {
    pub __st_: _StateT,
    pub __off_: std_streamoff,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
}
extern "C" {
    #[link_name = "\u{1}__throw_length_error"]
    pub fn std___basic_string_common___throw_length_error(this: *const u8);
}
extern "C" {
    #[link_name = "\u{1}__throw_out_of_range"]
    pub fn std___basic_string_common___throw_out_of_range(this: *const u8);
}
#[repr(C)]
pub struct std_basic_string {
    pub _base: u8,
    pub __r_: std___compressed_pair,
}
pub type std_basic_string___self = std_basic_string;
pub type std_basic_string___self_view<_CharT> = std_basic_string_view<_CharT>;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type<_CharT> = _CharT;
pub type std_basic_string_allocator_type<_Allocator> = _Allocator;
pub type std_basic_string___alloc_traits = std_allocator_traits;
pub type std_basic_string_size_type = std_basic_string___alloc_traits;
pub type std_basic_string_difference_type = std_basic_string___alloc_traits;
pub type std_basic_string_reference<_CharT> = *mut std_basic_string_value_type<_CharT>;
pub type std_basic_string_const_reference<_CharT> = *const std_basic_string_value_type<_CharT>;
pub type std_basic_string_pointer = std_basic_string___alloc_traits;
pub type std_basic_string_const_pointer = std_basic_string___alloc_traits;
pub type std_basic_string_iterator = std___wrap_iter<std_basic_string_pointer>;
pub type std_basic_string_const_iterator = std___wrap_iter<std_basic_string_const_pointer>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___long {
    pub __cap_: std_basic_string_size_type,
    pub __size_: std_basic_string_size_type,
    pub __data_: std_basic_string_pointer,
}
pub const std_basic_string___min_cap: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
pub struct std_basic_string___short<_CharT> {
    pub __bindgen_anon_1: std_basic_string___short__bindgen_ty_1<_CharT>,
    pub __data_: *mut std_basic_string_value_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
pub union std_basic_string___short__bindgen_ty_1<_CharT> {
    pub __size_: ::std::os::raw::c_uchar,
    pub __lx: std_basic_string_value_type<_CharT>,
    _bindgen_union_align: u8,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
pub struct std_basic_string___ulx<_CharT> {
    pub __lx: __BindgenUnionField<std_basic_string___long>,
    pub __lxx: __BindgenUnionField<std_basic_string___short<_CharT>>,
    pub bindgen_union_field: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub const std_basic_string___n_words: std_basic_string__bindgen_ty_2 = 0;
pub type std_basic_string__bindgen_ty_2 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___raw {
    pub __words: *mut std_basic_string_size_type,
}
#[repr(C)]
pub struct std_basic_string___rep<_CharT> {
    pub __bindgen_anon_1: std_basic_string___rep__bindgen_ty_1<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
pub struct std_basic_string___rep__bindgen_ty_1<_CharT> {
    pub __l: __BindgenUnionField<std_basic_string___long>,
    pub __s: __BindgenUnionField<std_basic_string___short<_CharT>>,
    pub __r: __BindgenUnionField<std_basic_string___raw>,
    pub bindgen_union_field: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub const std_basic_string___alignment: std_basic_string__bindgen_ty_3 = 0;
pub type std_basic_string__bindgen_ty_3 = i32;
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_error_category() {
    assert_eq!(
        ::std::mem::size_of::<std_error_category>(),
        8usize,
        concat!("Size of: ", stringify!(std_error_category))
    );
    assert_eq!(
        ::std::mem::align_of::<std_error_category>(),
        8usize,
        concat!("Alignment of ", stringify!(std_error_category))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114error_categoryD1Ev"]
    pub fn std_error_category_error_category_destructor(this: *mut std_error_category);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category23default_error_conditionEi"]
    pub fn std_error_category_default_error_condition(
        this: *mut ::std::os::raw::c_void,
        __ev: ::std::os::raw::c_int,
    ) -> std_error_condition;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE"]
    pub fn std_error_category_equivalent(
        this: *mut ::std::os::raw::c_void,
        __code: ::std::os::raw::c_int,
        __condition: *const std_error_condition,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi"]
    pub fn std_error_category_equivalent1(
        this: *mut ::std::os::raw::c_void,
        __code: *const std_error_code,
        __condition: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_condition {
    pub __val_: ::std::os::raw::c_int,
    pub __cat_: *const std_error_category,
}
#[test]
fn bindgen_test_layout_std_error_condition() {
    assert_eq!(
        ::std::mem::size_of::<std_error_condition>(),
        16usize,
        concat!("Size of: ", stringify!(std_error_condition))
    );
    assert_eq!(
        ::std::mem::align_of::<std_error_condition>(),
        8usize,
        concat!("Alignment of ", stringify!(std_error_condition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_error_condition>())).__val_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_error_condition),
            "::",
            stringify!(__val_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_error_condition>())).__cat_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_error_condition),
            "::",
            stringify!(__cat_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__115error_condition7messageEv"]
    pub fn std_error_condition_message(this: *const std_error_condition) -> std_string;
}
impl std_error_condition {
    #[inline]
    pub unsafe fn message(&self) -> std_string {
        std_error_condition_message(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_code {
    pub __val_: ::std::os::raw::c_int,
    pub __cat_: *const std_error_category,
}
#[test]
fn bindgen_test_layout_std_error_code() {
    assert_eq!(
        ::std::mem::size_of::<std_error_code>(),
        16usize,
        concat!("Size of: ", stringify!(std_error_code))
    );
    assert_eq!(
        ::std::mem::align_of::<std_error_code>(),
        8usize,
        concat!("Alignment of ", stringify!(std_error_code))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_error_code>())).__val_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_error_code),
            "::",
            stringify!(__val_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_error_code>())).__cat_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_error_code),
            "::",
            stringify!(__cat_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__110error_code7messageEv"]
    pub fn std_error_code_message(this: *const std_error_code) -> std_string;
}
impl std_error_code {
    #[inline]
    pub unsafe fn message(&self) -> std_string {
        std_error_code_message(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_system_error {
    pub _base: std_runtime_error,
    pub __ec_: std_error_code,
}
#[test]
fn bindgen_test_layout_std_system_error() {
    assert_eq!(
        ::std::mem::size_of::<std_system_error>(),
        32usize,
        concat!("Size of: ", stringify!(std_system_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_system_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_system_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_system_error>())).__ec_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(std_system_error),
            "::",
            stringify!(__ec_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_system_error_system_error(
        this: *mut std_system_error,
        __ec: std_error_code,
        __what_arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeEPKc"]
    pub fn std_system_error_system_error1(
        this: *mut std_system_error,
        __ec: std_error_code,
        __what_arg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeE"]
    pub fn std_system_error_system_error2(this: *mut std_system_error, __ec: std_error_code);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_system_error_system_error3(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryEPKc"]
    pub fn std_system_error_system_error4(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryE"]
    pub fn std_system_error_system_error5(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
    );
}
impl std_system_error {
    #[inline]
    pub unsafe fn new(__ec: std_error_code, __what_arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error(&mut __bindgen_tmp, __ec, __what_arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(__ec: std_error_code, __what_arg: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error1(&mut __bindgen_tmp, __ec, __what_arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(__ec: std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error2(&mut __bindgen_tmp, __ec);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error3(&mut __bindgen_tmp, __ev, __ecat, __what_arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const ::std::os::raw::c_char,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error4(&mut __bindgen_tmp, __ev, __ecat, __what_arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new5(__ev: ::std::os::raw::c_int, __ecat: *const std_error_category) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_system_error_system_error5(&mut __bindgen_tmp, __ev, __ecat);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorD1Ev"]
    pub fn std_system_error_system_error_destructor(this: *mut std_system_error);
}
pub type std___libcpp_mutex_t = pthread_mutex_t;
pub type std___libcpp_recursive_mutex_t = pthread_mutex_t;
pub type std___libcpp_condvar_t = pthread_cond_t;
#[repr(C)]
pub struct std_mutex {
    pub __m_: std___libcpp_mutex_t,
}
pub type std_mutex_native_handle_type = *mut std___libcpp_mutex_t;
#[test]
fn bindgen_test_layout_std_mutex() {
    assert_eq!(
        ::std::mem::size_of::<std_mutex>(),
        64usize,
        concat!("Size of: ", stringify!(std_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<std_mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(std_mutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_mutex>())).__m_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_mutex),
            "::",
            stringify!(__m_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex4lockEv"]
    pub fn std_mutex_lock(this: *mut std_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex8try_lockEv"]
    pub fn std_mutex_try_lock(this: *mut std_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex6unlockEv"]
    pub fn std_mutex_unlock(this: *mut std_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutexD1Ev"]
    pub fn std_mutex_mutex_destructor(this: *mut std_mutex);
}
impl std_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_mutex_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_lock<_Mutex> {
    pub __m_: *mut std_unique_lock_mutex_type<_Mutex>,
    pub __owns_: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Mutex>>,
}
pub type std_unique_lock_mutex_type<_Mutex> = _Mutex;
#[repr(C)]
pub struct std_condition_variable {
    pub __cv_: std___libcpp_condvar_t,
}
pub type std_condition_variable_native_handle_type = *mut std___libcpp_condvar_t;
#[test]
fn bindgen_test_layout_std_condition_variable() {
    assert_eq!(
        ::std::mem::size_of::<std_condition_variable>(),
        48usize,
        concat!("Size of: ", stringify!(std_condition_variable))
    );
    assert_eq!(
        ::std::mem::align_of::<std_condition_variable>(),
        8usize,
        concat!("Alignment of ", stringify!(std_condition_variable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_condition_variable>())).__cv_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_condition_variable),
            "::",
            stringify!(__cv_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable10notify_oneEv"]
    pub fn std_condition_variable_notify_one(this: *mut std_condition_variable);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable10notify_allEv"]
    pub fn std_condition_variable_notify_all(this: *mut std_condition_variable);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE"]
    pub fn std_condition_variable_wait(
        this: *mut std_condition_variable,
        __lk: *mut std_unique_lock<std_mutex>,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variableD1Ev"]
    pub fn std_condition_variable_condition_variable_destructor(this: *mut std_condition_variable);
}
impl std_condition_variable {
    #[inline]
    pub unsafe fn notify_one(&mut self) {
        std_condition_variable_notify_one(self)
    }
    #[inline]
    pub unsafe fn notify_all(&mut self) {
        std_condition_variable_notify_all(self)
    }
    #[inline]
    pub unsafe fn wait(&mut self, __lk: *mut std_unique_lock<std_mutex>) {
        std_condition_variable_wait(self, __lk)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_condition_variable_condition_variable_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_node_types {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tree_node_types {
    pub _address: u8,
}
pub type std___make_tree_node_types__NodePtr = std___rebind_pointer;
pub type std___make_tree_node_types_type = std___tree_node_types;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_node_destructor<_Allocator> {
    pub __na_: *mut std___tree_node_destructor_allocator_type<_Allocator>,
    pub __value_constructed: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Allocator>>,
}
pub type std___tree_node_destructor_allocator_type<_Allocator> = _Allocator;
pub type std___tree_node_destructor___alloc_traits = std_allocator_traits;
pub type std___tree_node_destructor_pointer = std___tree_node_destructor___alloc_traits;
pub type std___tree_node_destructor__NodeTypes = std___tree_node_types;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_iterator {
    pub __ptr_: std___tree_iterator___iter_pointer,
}
pub type std___tree_iterator__NodeTypes = std___tree_node_types;
pub type std___tree_iterator___node_pointer<_NodePtr> = _NodePtr;
pub type std___tree_iterator___node_base_pointer = std___tree_iterator__NodeTypes;
pub type std___tree_iterator___end_node_pointer = std___tree_iterator__NodeTypes;
pub type std___tree_iterator___iter_pointer = std___tree_iterator__NodeTypes;
pub type std___tree_iterator___pointer_traits = std_pointer_traits;
pub type std___tree_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std___tree_iterator_value_type<_Tp> = _Tp;
pub type std___tree_iterator_difference_type<_DiffType> = _DiffType;
pub type std___tree_iterator_reference<_Tp> = *mut std___tree_iterator_value_type<_Tp>;
pub type std___tree_iterator_pointer = std___tree_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_const_iterator {
    pub __ptr_: std___tree_const_iterator___iter_pointer,
}
pub type std___tree_const_iterator__NodeTypes = std___tree_node_types;
pub type std___tree_const_iterator___node_pointer = std___tree_const_iterator__NodeTypes;
pub type std___tree_const_iterator___node_base_pointer = std___tree_const_iterator__NodeTypes;
pub type std___tree_const_iterator___end_node_pointer = std___tree_const_iterator__NodeTypes;
pub type std___tree_const_iterator___iter_pointer = std___tree_const_iterator__NodeTypes;
pub type std___tree_const_iterator___pointer_traits = std_pointer_traits;
pub type std___tree_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std___tree_const_iterator_value_type<_Tp> = _Tp;
pub type std___tree_const_iterator_difference_type<_DiffType> = _DiffType;
pub type std___tree_const_iterator_reference<_Tp> =
    *const std___tree_const_iterator_value_type<_Tp>;
pub type std___tree_const_iterator_pointer = std___tree_const_iterator__NodeTypes;
pub type std___tree_const_iterator___non_const_iterator = std___tree_iterator;
#[repr(C)]
#[derive(Debug)]
pub struct std___tree {
    pub __begin_node_: std___tree___iter_pointer,
    pub __pair1_: std___compressed_pair,
    pub __pair3_: std___compressed_pair,
}
pub type std___tree_value_type<_Tp> = _Tp;
pub type std___tree_value_compare<_Compare> = _Compare;
pub type std___tree_allocator_type<_Allocator> = _Allocator;
pub type std___tree___alloc_traits = std_allocator_traits;
pub type std___tree__NodeTypes = std___make_tree_node_types;
pub type std___tree_key_type = std___tree__NodeTypes;
pub type std___tree___node_value_type = std___tree__NodeTypes;
pub type std___tree___container_value_type = std___tree__NodeTypes;
pub type std___tree_pointer = std___tree___alloc_traits;
pub type std___tree_const_pointer = std___tree___alloc_traits;
pub type std___tree_size_type = std___tree___alloc_traits;
pub type std___tree_difference_type = std___tree___alloc_traits;
pub type std___tree___void_pointer = std___tree__NodeTypes;
pub type std___tree___node = std___tree__NodeTypes;
pub type std___tree___node_pointer = std___tree__NodeTypes;
pub type std___tree___node_base = std___tree__NodeTypes;
pub type std___tree___node_base_pointer = std___tree__NodeTypes;
pub type std___tree___end_node_t = std___tree__NodeTypes;
pub type std___tree___end_node_ptr = std___tree__NodeTypes;
pub type std___tree___parent_pointer = std___tree__NodeTypes;
pub type std___tree___iter_pointer = std___tree__NodeTypes;
pub type std___tree___node_allocator = std___rebind_alloc_helper;
pub type std___tree___node_traits = std_allocator_traits;
pub type std___tree___node_base_allocator = std___rebind_alloc_helper;
pub type std___tree___node_base_traits = std_allocator_traits;
pub type std___tree__Dp = std___tree_node_destructor<std___tree___node_allocator>;
pub type std___tree___node_holder = std_unique_ptr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___map_node_destructor<_Allocator> {
    pub __na_: *mut std___map_node_destructor_allocator_type<_Allocator>,
    pub __first_constructed: bool,
    pub __second_constructed: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Allocator>>,
}
pub type std___map_node_destructor_allocator_type<_Allocator> = _Allocator;
pub type std___map_node_destructor___alloc_traits = std_allocator_traits;
pub type std___map_node_destructor_pointer = std___map_node_destructor___alloc_traits;
#[repr(C)]
#[derive(Debug)]
pub struct std___value_type<_Key, _Tp> {
    pub __cc: std___value_type_value_type<_Key, _Tp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std___value_type_key_type<_Key> = _Key;
pub type std___value_type_mapped_type<_Tp> = _Tp;
pub type std___value_type_value_type<_Key, _Tp> =
    std_pair<std___value_type_key_type<_Key>, std___value_type_mapped_type<_Tp>>;
pub type std___value_type___nc_ref_pair_type<_Key, _Tp> =
    std_pair<std___value_type_key_type<_Key>, std___value_type_mapped_type<_Tp>>;
pub type std___value_type___nc_rref_pair_type<_Key, _Tp> =
    std_pair<std___value_type_key_type<_Key>, std___value_type_mapped_type<_Tp>>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___map_iterator<_TreeIterator> {
    pub __i_: _TreeIterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_TreeIterator>>,
}
pub type std___map_iterator__NodeTypes = [u8; 0usize];
pub type std___map_iterator___pointer_traits = [u8; 0usize];
pub type std___map_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std___map_iterator_value_type = [u8; 0usize];
pub type std___map_iterator_difference_type = [u8; 0usize];
pub type std___map_iterator_reference = *mut std___map_iterator_value_type;
pub type std___map_iterator_pointer = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___map_const_iterator<_TreeIterator> {
    pub __i_: _TreeIterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_TreeIterator>>,
}
pub type std___map_const_iterator__NodeTypes = [u8; 0usize];
pub type std___map_const_iterator___pointer_traits = [u8; 0usize];
pub type std___map_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std___map_const_iterator_value_type = [u8; 0usize];
pub type std___map_const_iterator_difference_type = [u8; 0usize];
pub type std___map_const_iterator_reference = *const std___map_const_iterator_value_type;
pub type std___map_const_iterator_pointer = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_map {
    pub __tree_: std_map___base,
}
pub type std_map_key_type<_Key> = _Key;
pub type std_map_mapped_type<_Tp> = _Tp;
pub type std_map_value_type<_Key, _Tp> = std_pair<std_map_key_type<_Key>, std_map_mapped_type<_Tp>>;
pub type std_map_key_compare<_Compare> = _Compare;
pub type std_map_allocator_type<_Allocator> = _Allocator;
pub type std_map_reference<_Key, _Tp> = *mut std_map_value_type<_Key, _Tp>;
pub type std_map_const_reference<_Key, _Tp> = *const std_map_value_type<_Key, _Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map_value_compare<_Compare> {
    pub comp: std_map_key_compare<_Compare>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type std_map___value_type<_Key, _Tp> =
    std___value_type<std_map_key_type<_Key>, std_map_mapped_type<_Tp>>;
pub type std_map___vc = u8;
pub type std_map___allocator_type = std___rebind_alloc_helper;
pub type std_map___base = std___tree;
pub type std_map___node_traits = std_map___base;
pub type std_map___alloc_traits = std_allocator_traits;
pub type std_map_pointer = std_map___alloc_traits;
pub type std_map_const_pointer = std_map___alloc_traits;
pub type std_map_size_type = std_map___alloc_traits;
pub type std_map_difference_type = std_map___alloc_traits;
pub type std_map_iterator = std___map_iterator<std_map___base>;
pub type std_map_const_iterator = std___map_const_iterator<std_map___base>;
pub type std_map_reverse_iterator = std_reverse_iterator<std_map_iterator>;
pub type std_map_const_reverse_iterator = std_reverse_iterator<std_map_const_iterator>;
pub type std_map___node = std_map___base;
pub type std_map___node_allocator = std_map___base;
pub type std_map___node_pointer = std_map___base;
pub type std_map___node_base_pointer = std_map___base;
pub type std_map___parent_pointer = std_map___base;
pub type std_map__Dp = std___map_node_destructor<std_map___node_allocator>;
pub type std_map___node_holder = std_unique_ptr;
#[repr(C)]
pub struct std_recursive_mutex {
    pub __m_: std___libcpp_recursive_mutex_t,
}
pub type std_recursive_mutex_native_handle_type = *mut std___libcpp_recursive_mutex_t;
#[test]
fn bindgen_test_layout_std_recursive_mutex() {
    assert_eq!(
        ::std::mem::size_of::<std_recursive_mutex>(),
        64usize,
        concat!("Size of: ", stringify!(std_recursive_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<std_recursive_mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(std_recursive_mutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_recursive_mutex>())).__m_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_recursive_mutex),
            "::",
            stringify!(__m_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex4lockEv"]
    pub fn std_recursive_mutex_lock(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex8try_lockEv"]
    pub fn std_recursive_mutex_try_lock(this: *mut std_recursive_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex6unlockEv"]
    pub fn std_recursive_mutex_unlock(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutexC1Ev"]
    pub fn std_recursive_mutex_recursive_mutex(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutexD1Ev"]
    pub fn std_recursive_mutex_recursive_mutex_destructor(this: *mut std_recursive_mutex);
}
impl std_recursive_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_recursive_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_recursive_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_recursive_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_recursive_mutex_recursive_mutex(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_recursive_mutex_recursive_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_once_flag {
    pub __state_: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_std_once_flag() {
    assert_eq!(
        ::std::mem::size_of::<std_once_flag>(),
        8usize,
        concat!("Size of: ", stringify!(std_once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_once_flag>(),
        8usize,
        concat!("Alignment of ", stringify!(std_once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_once_flag>())).__state_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_once_flag),
            "::",
            stringify!(__state_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__throw_length_error"]
    pub fn std___vector_base_common___throw_length_error(this: *const u8);
}
extern "C" {
    #[link_name = "\u{1}__throw_out_of_range"]
    pub fn std___vector_base_common___throw_out_of_range(this: *const u8);
}
#[repr(C)]
#[derive(Debug)]
pub struct std___vector_base {
    pub _base: u8,
    pub __begin_: std___vector_base_pointer,
    pub __end_: std___vector_base_pointer,
    pub __end_cap_: std___compressed_pair,
}
pub type std___vector_base_allocator_type<_Allocator> = _Allocator;
pub type std___vector_base___alloc_traits = std_allocator_traits;
pub type std___vector_base_size_type = std___vector_base___alloc_traits;
pub type std___vector_base_value_type<_Tp> = _Tp;
pub type std___vector_base_reference<_Tp> = *mut std___vector_base_value_type<_Tp>;
pub type std___vector_base_const_reference<_Tp> = *const std___vector_base_value_type<_Tp>;
pub type std___vector_base_difference_type = std___vector_base___alloc_traits;
pub type std___vector_base_pointer = std___vector_base___alloc_traits;
pub type std___vector_base_const_pointer = std___vector_base___alloc_traits;
pub type std___vector_base_iterator = std___vector_base_pointer;
pub type std___vector_base_const_iterator = std___vector_base_const_pointer;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector {
    pub _base: std___vector_base,
}
pub type std_vector___base = std___vector_base;
pub type std_vector___default_allocator_type = std_allocator;
pub type std_vector___self = std_vector;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_allocator_type<_Allocator> = _Allocator;
pub type std_vector___alloc_traits = std_vector___base;
pub type std_vector_reference = std_vector___base;
pub type std_vector_const_reference = std_vector___base;
pub type std_vector_size_type = std_vector___base;
pub type std_vector_difference_type = std_vector___base;
pub type std_vector_pointer = std_vector___base;
pub type std_vector_const_pointer = std_vector___base;
pub type std_vector_iterator = std___wrap_iter<std_vector_pointer>;
pub type std_vector_const_iterator = std___wrap_iter<std_vector_const_pointer>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector___RAII_IncreaseAnnotator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub __locale_: *mut std_locale___imp,
}
pub type std_locale_category = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale___imp {
    _unused: [u8; 0],
}
pub const std_locale_none: std_locale_category = 0;
pub const std_locale_collate: std_locale_category = 1;
pub const std_locale_ctype: std_locale_category = 2;
pub const std_locale_monetary: std_locale_category = 8;
pub const std_locale_numeric: std_locale_category = 16;
pub const std_locale_time: std_locale_category = 32;
pub const std_locale_messages: std_locale_category = 4;
pub const std_locale_all: std_locale_category = 63;
#[test]
fn bindgen_test_layout_std_locale() {
    assert_eq!(
        ::std::mem::size_of::<std_locale>(),
        8usize,
        concat!("Size of: ", stringify!(std_locale))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale>())).__locale_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale),
            "::",
            stringify!(__locale_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__16locale4nameEv"]
    pub fn std_locale_name(this: *const std_locale) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale6globalERKS0_"]
    pub fn std_locale_global(arg1: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale7classicEv"]
    pub fn std_locale_classic() -> *const std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1Ev"]
    pub fn std_locale_locale(this: *mut std_locale);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_"]
    pub fn std_locale_locale1(this: *mut std_locale, arg1: *const std_locale);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1EPKc"]
    pub fn std_locale_locale2(this: *mut std_locale, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_locale_locale3(this: *mut std_locale, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_PKci"]
    pub fn std_locale_locale4(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"]
    pub fn std_locale_locale5(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const std_string,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_S2_i"]
    pub fn std_locale_locale6(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const std_locale,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeD1Ev"]
    pub fn std_locale_locale_destructor(this: *mut std_locale);
}
impl std_locale {
    #[inline]
    pub unsafe fn name(&self) -> std_string {
        std_locale_name(self)
    }
    #[inline]
    pub unsafe fn global(arg1: *const std_locale) -> std_locale {
        std_locale_global(arg1)
    }
    #[inline]
    pub unsafe fn classic() -> *const std_locale {
        std_locale_classic()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale2(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale3(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(
        arg1: *const std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale4(&mut __bindgen_tmp, arg1, arg2, arg3);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new5(
        arg1: *const std_locale,
        arg2: *const std_string,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale5(&mut __bindgen_tmp, arg1, arg2, arg3);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new6(
        arg1: *const std_locale,
        arg2: *const std_locale,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale6(&mut __bindgen_tmp, arg1, arg2, arg3);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_locale_locale_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub _base: std___shared_count,
}
#[test]
fn bindgen_test_layout_std_locale_facet() {
    assert_eq!(
        ::std::mem::size_of::<std_locale_facet>(),
        16usize,
        concat!("Size of: ", stringify!(std_locale_facet))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale_facet>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale_facet))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale5facetD1Ev"]
    pub fn std_locale_facet_facet_destructor(this: *mut std_locale_facet);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_id {
    pub __flag_: std_once_flag,
    pub __id_: i32,
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale2id9__next_idE"]
    pub static mut std_locale_id___next_id: i32;
}
#[test]
fn bindgen_test_layout_std_locale_id() {
    assert_eq!(
        ::std::mem::size_of::<std_locale_id>(),
        16usize,
        concat!("Size of: ", stringify!(std_locale_id))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale_id>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale_id>())).__flag_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale_id),
            "::",
            stringify!(__flag_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale_id>())).__id_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale_id),
            "::",
            stringify!(__id_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale2id5__getEv"]
    pub fn std_locale_id___get(this: *mut std_locale_id) -> ::std::os::raw::c_long;
}
impl std_locale_id {
    #[inline]
    pub unsafe fn __get(&mut self) -> ::std::os::raw::c_long {
        std_locale_id___get(self)
    }
}
pub type std_streamsize = isize;
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub __fmtflags_: std_ios_base_fmtflags,
    pub __precision_: std_streamsize,
    pub __width_: std_streamsize,
    pub __rdstate_: std_ios_base_iostate,
    pub __exceptions_: std_ios_base_iostate,
    pub __rdbuf_: *mut ::std::os::raw::c_void,
    pub __loc_: *mut ::std::os::raw::c_void,
    pub __fn_: *mut std_ios_base_event_callback,
    pub __index_: *mut ::std::os::raw::c_int,
    pub __event_size_: usize,
    pub __event_cap_: usize,
    pub __iarray_: *mut ::std::os::raw::c_long,
    pub __iarray_size_: usize,
    pub __iarray_cap_: usize,
    pub __parray_: *mut *mut ::std::os::raw::c_void,
    pub __parray_size_: usize,
    pub __parray_cap_: usize,
}
pub type std_ios_base_fmtflags = ::std::os::raw::c_uint;
pub type std_ios_base_iostate = ::std::os::raw::c_uint;
pub type std_ios_base_openmode = ::std::os::raw::c_uint;
pub const std_ios_base_seekdir_beg: std_ios_base_seekdir = 0;
pub const std_ios_base_seekdir_cur: std_ios_base_seekdir = 1;
pub const std_ios_base_seekdir_end: std_ios_base_seekdir = 2;
pub type std_ios_base_seekdir = u32;
pub type std_ios_base_io_state = std_ios_base_iostate;
pub type std_ios_base_open_mode = std_ios_base_openmode;
pub use self::std_ios_base_seekdir as std_ios_base_seek_dir;
pub type std_ios_base_streamoff = std_streamoff;
pub type std_ios_base_streampos = std_streampos;
pub const std_ios_base_event_erase_event: std_ios_base_event = 0;
pub const std_ios_base_event_imbue_event: std_ios_base_event = 1;
pub const std_ios_base_event_copyfmt_event: std_ios_base_event = 2;
pub type std_ios_base_event = u32;
pub type std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: std_ios_base_event,
        arg2: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ),
>;
pub const std_ios_base_boolalpha: std_ios_base_fmtflags = 1;
pub const std_ios_base_dec: std_ios_base_fmtflags = 2;
pub const std_ios_base_fixed: std_ios_base_fmtflags = 4;
pub const std_ios_base_hex: std_ios_base_fmtflags = 8;
pub const std_ios_base_internal: std_ios_base_fmtflags = 16;
pub const std_ios_base_left: std_ios_base_fmtflags = 32;
pub const std_ios_base_oct: std_ios_base_fmtflags = 64;
pub const std_ios_base_right: std_ios_base_fmtflags = 128;
pub const std_ios_base_scientific: std_ios_base_fmtflags = 256;
pub const std_ios_base_showbase: std_ios_base_fmtflags = 512;
pub const std_ios_base_showpoint: std_ios_base_fmtflags = 1024;
pub const std_ios_base_showpos: std_ios_base_fmtflags = 2048;
pub const std_ios_base_skipws: std_ios_base_fmtflags = 4096;
pub const std_ios_base_unitbuf: std_ios_base_fmtflags = 8192;
pub const std_ios_base_uppercase: std_ios_base_fmtflags = 16384;
pub const std_ios_base_adjustfield: std_ios_base_fmtflags = 176;
pub const std_ios_base_basefield: std_ios_base_fmtflags = 74;
pub const std_ios_base_floatfield: std_ios_base_fmtflags = 260;
pub const std_ios_base_badbit: std_ios_base_iostate = 1;
pub const std_ios_base_eofbit: std_ios_base_iostate = 2;
pub const std_ios_base_failbit: std_ios_base_iostate = 4;
pub const std_ios_base_goodbit: std_ios_base_iostate = 0;
pub const std_ios_base_app: std_ios_base_openmode = 1;
pub const std_ios_base_ate: std_ios_base_openmode = 2;
pub const std_ios_base_binary: std_ios_base_openmode = 4;
pub const std_ios_base_in: std_ios_base_openmode = 8;
pub const std_ios_base_out: std_ios_base_openmode = 16;
pub const std_ios_base_trunc: std_ios_base_openmode = 32;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base9__xindex_E"]
    pub static mut std_ios_base___xindex_: std_atomic;
}
#[test]
fn bindgen_test_layout_std_ios_base() {
    assert_eq!(
        ::std::mem::size_of::<std_ios_base>(),
        136usize,
        concat!("Size of: ", stringify!(std_ios_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std_ios_base>(),
        8usize,
        concat!("Alignment of ", stringify!(std_ios_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__fmtflags_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__fmtflags_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__precision_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__precision_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__width_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__width_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__rdstate_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__rdstate_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__exceptions_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__exceptions_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__rdbuf_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__rdbuf_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__loc_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__loc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__fn_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__fn_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__index_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__index_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__event_size_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__event_size_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__event_cap_ as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__event_cap_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__iarray_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__iarray_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__iarray_size_ as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__iarray_size_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__iarray_cap_ as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__iarray_cap_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__parray_ as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__parray_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__parray_size_ as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__parray_size_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_ios_base>())).__parray_cap_ as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(std_ios_base),
            "::",
            stringify!(__parray_cap_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5imbueERKNS_6localeE"]
    pub fn std_ios_base_imbue(this: *mut std_ios_base, __loc: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__18ios_base6getlocEv"]
    pub fn std_ios_base_getloc(this: *const std_ios_base) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base6xallocEv"]
    pub fn std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5iwordEi"]
    pub fn std_ios_base_iword(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5pwordEi"]
    pub fn std_ios_base_pword(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base17register_callbackEPFvNS0_5eventERS0_iEi"]
    pub fn std_ios_base_register_callback(
        this: *mut std_ios_base,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base15sync_with_stdioEb"]
    pub fn std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5clearEj"]
    pub fn std_ios_base_clear(this: *mut std_ios_base, __state: std_ios_base_iostate);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv"]
    pub fn std_ios_base___set_badbit_and_consider_rethrow(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base34__set_failbit_and_consider_rethrowEv"]
    pub fn std_ios_base___set_failbit_and_consider_rethrow(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4initEPv"]
    pub fn std_ios_base_init(this: *mut std_ios_base, __sb: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base16__call_callbacksENS0_5eventE"]
    pub fn std_ios_base___call_callbacks(this: *mut std_ios_base, arg1: std_ios_base_event);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7copyfmtERKS0_"]
    pub fn std_ios_base_copyfmt(this: *mut std_ios_base, arg1: *const std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4moveERS0_"]
    pub fn std_ios_base_move(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4swapERS0_"]
    pub fn std_ios_base_swap(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn flags(&self) -> std_ios_base_fmtflags {
        std_ios_base_flags(self)
    }
    #[inline]
    pub unsafe fn flags1(&mut self, __fmtfl: std_ios_base_fmtflags) -> std_ios_base_fmtflags {
        std_ios_base_flags1(self, __fmtfl)
    }
    #[inline]
    pub unsafe fn setf(&mut self, __fmtfl: std_ios_base_fmtflags) -> std_ios_base_fmtflags {
        std_ios_base_setf(self, __fmtfl)
    }
    #[inline]
    pub unsafe fn setf1(
        &mut self,
        __fmtfl: std_ios_base_fmtflags,
        __mask: std_ios_base_fmtflags,
    ) -> std_ios_base_fmtflags {
        std_ios_base_setf1(self, __fmtfl, __mask)
    }
    #[inline]
    pub unsafe fn unsetf(&mut self, __mask: std_ios_base_fmtflags) {
        std_ios_base_unsetf(self, __mask)
    }
    #[inline]
    pub unsafe fn precision(&self) -> std_streamsize {
        std_ios_base_precision(self)
    }
    #[inline]
    pub unsafe fn precision1(&mut self, __prec: std_streamsize) -> std_streamsize {
        std_ios_base_precision1(self, __prec)
    }
    #[inline]
    pub unsafe fn width(&self) -> std_streamsize {
        std_ios_base_width(self)
    }
    #[inline]
    pub unsafe fn width1(&mut self, __wide: std_streamsize) -> std_streamsize {
        std_ios_base_width1(self, __wide)
    }
    #[inline]
    pub unsafe fn imbue(&mut self, __loc: *const std_locale) -> std_locale {
        std_ios_base_imbue(self, __loc)
    }
    #[inline]
    pub unsafe fn getloc(&self) -> std_locale {
        std_ios_base_getloc(self)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int {
        std_ios_base_xalloc()
    }
    #[inline]
    pub unsafe fn iword(&mut self, __index: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_long {
        std_ios_base_iword(self, __index)
    }
    #[inline]
    pub unsafe fn pword(
        &mut self,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void {
        std_ios_base_pword(self, __index)
    }
    #[inline]
    pub unsafe fn register_callback(
        &mut self,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    ) {
        std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn rdstate(&self) -> std_ios_base_iostate {
        std_ios_base_rdstate(self)
    }
    #[inline]
    pub unsafe fn clear(&mut self, __state: std_ios_base_iostate) {
        std_ios_base_clear(self, __state)
    }
    #[inline]
    pub unsafe fn setstate(&mut self, __state: std_ios_base_iostate) {
        std_ios_base_setstate(self, __state)
    }
    #[inline]
    pub unsafe fn good(&self) -> bool {
        std_ios_base_good(self)
    }
    #[inline]
    pub unsafe fn eof(&self) -> bool {
        std_ios_base_eof(self)
    }
    #[inline]
    pub unsafe fn fail(&self) -> bool {
        std_ios_base_fail(self)
    }
    #[inline]
    pub unsafe fn bad(&self) -> bool {
        std_ios_base_bad(self)
    }
    #[inline]
    pub unsafe fn exceptions(&self) -> std_ios_base_iostate {
        std_ios_base_exceptions(self)
    }
    #[inline]
    pub unsafe fn exceptions1(&mut self, __iostate: std_ios_base_iostate) {
        std_ios_base_exceptions1(self, __iostate)
    }
    #[inline]
    pub unsafe fn __set_badbit_and_consider_rethrow(&mut self) {
        std_ios_base___set_badbit_and_consider_rethrow(self)
    }
    #[inline]
    pub unsafe fn __set_failbit_and_consider_rethrow(&mut self) {
        std_ios_base___set_failbit_and_consider_rethrow(self)
    }
    #[inline]
    pub unsafe fn init(&mut self, __sb: *mut ::std::os::raw::c_void) {
        std_ios_base_init(self, __sb)
    }
    #[inline]
    pub unsafe fn __call_callbacks(&mut self, arg1: std_ios_base_event) {
        std_ios_base___call_callbacks(self, arg1)
    }
    #[inline]
    pub unsafe fn copyfmt(&mut self, arg1: *const std_ios_base) {
        std_ios_base_copyfmt(self, arg1)
    }
    #[inline]
    pub unsafe fn move_(&mut self, arg1: *mut std_ios_base) {
        std_ios_base_move(self, arg1)
    }
    #[inline]
    pub unsafe fn swap(&mut self, arg1: *mut std_ios_base) {
        std_ios_base_swap(self, arg1)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_baseD1Ev"]
    pub fn std_ios_base_ios_base_destructor(this: *mut std_ios_base);
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        4usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
#[test]
fn bindgen_test_layout_std_ios_base_failure() {
    assert_eq!(
        ::std::mem::size_of::<std_ios_base_failure>(),
        32usize,
        concat!("Size of: ", stringify!(std_ios_base_failure))
    );
    assert_eq!(
        ::std::mem::align_of::<std_ios_base_failure>(),
        8usize,
        concat!("Alignment of ", stringify!(std_ios_base_failure))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"]
    pub fn std_ios_base_failure_failure(
        this: *mut std_ios_base_failure,
        __msg: *const std_string,
        __ec: *const std_error_code,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureC1EPKcRKNS_10error_codeE"]
    pub fn std_ios_base_failure_failure1(
        this: *mut std_ios_base_failure,
        __msg: *const ::std::os::raw::c_char,
        __ec: *const std_error_code,
    );
}
impl std_ios_base_failure {
    #[inline]
    pub unsafe fn new(__msg: *const std_string, __ec: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_failure_failure(&mut __bindgen_tmp, __msg, __ec);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(__msg: *const ::std::os::raw::c_char, __ec: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_failure_failure1(&mut __bindgen_tmp, __msg, __ec);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureD1Ev"]
    pub fn std_ios_base_failure_failure_destructor(this: *mut std_ios_base_failure);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_ios_base_Init() {
    assert_eq!(
        ::std::mem::size_of::<std_ios_base_Init>(),
        1usize,
        concat!("Size of: ", stringify!(std_ios_base_Init))
    );
    assert_eq!(
        ::std::mem::align_of::<std_ios_base_Init>(),
        1usize,
        concat!("Alignment of ", stringify!(std_ios_base_Init))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4InitC1Ev"]
    pub fn std_ios_base_Init_Init(this: *mut std_ios_base_Init);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4InitD1Ev"]
    pub fn std_ios_base_Init_Init_destructor(this: *mut std_ios_base_Init);
}
impl std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_Init_Init(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_ios_base_Init_Init_destructor(self)
    }
}
#[repr(C)]
pub struct std_basic_ios {
    pub _base: std_ios_base,
    pub __tie_: *mut std_basic_ostream,
    pub __fill_: std_basic_ios_int_type,
}
pub type std_basic_ios_char_type<_CharT> = _CharT;
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios_int_type = [u8; 0usize];
pub type std_basic_ios_pos_type = [u8; 0usize];
pub type std_basic_ios_off_type = [u8; 0usize];
#[repr(C)]
pub struct std_basic_ostream {}
pub type std_basic_ostream_char_type<_CharT> = _CharT;
pub type std_basic_ostream_traits_type<_Traits> = _Traits;
pub type std_basic_ostream_int_type = [u8; 0usize];
pub type std_basic_ostream_pos_type = [u8; 0usize];
pub type std_basic_ostream_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream_sentry {
    pub __ok_: bool,
    pub __os_: *mut std_basic_ostream,
}
#[repr(C)]
pub struct std_basic_istream {
    pub __gc_: std_streamsize,
}
pub type std_basic_istream_char_type<_CharT> = _CharT;
pub type std_basic_istream_traits_type<_Traits> = _Traits;
pub type std_basic_istream_int_type = [u8; 0usize];
pub type std_basic_istream_pos_type = [u8; 0usize];
pub type std_basic_istream_off_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream_sentry {
    pub __ok_: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_set {
    pub __tree_: std_set___base,
}
pub type std_set_key_type<_Key> = _Key;
pub type std_set_value_type<_Key> = std_set_key_type<_Key>;
pub type std_set_key_compare<_Compare> = _Compare;
pub type std_set_value_compare<_Compare> = std_set_key_compare<_Compare>;
pub type std_set_allocator_type<_Allocator> = _Allocator;
pub type std_set_reference<_Key> = *mut std_set_value_type<_Key>;
pub type std_set_const_reference<_Key> = *const std_set_value_type<_Key>;
pub type std_set___base = std___tree;
pub type std_set___alloc_traits = std_allocator_traits;
pub type std_set___node_holder = std_set___base;
pub type std_set_pointer = std_set___base;
pub type std_set_const_pointer = std_set___base;
pub type std_set_size_type = std_set___base;
pub type std_set_difference_type = std_set___base;
pub type std_set_iterator = std_set___base;
pub type std_set_const_iterator = std_set___base;
pub type std_set_reverse_iterator = std_reverse_iterator<std_set_iterator>;
pub type std_set_const_reverse_iterator = std_reverse_iterator<std_set_const_iterator>;
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_exception>(),
        8usize,
        concat!("Size of: ", stringify!(std_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_exception_ptr {
    pub __ptr_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_std_exception_ptr() {
    assert_eq!(
        ::std::mem::size_of::<std_exception_ptr>(),
        8usize,
        concat!("Size of: ", stringify!(std_exception_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(std_exception_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_exception_ptr>())).__ptr_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_exception_ptr),
            "::",
            stringify!(__ptr_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13exception_ptrC1ERKS_"]
    pub fn std_exception_ptr_exception_ptr(
        this: *mut std_exception_ptr,
        arg1: *const std_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13exception_ptrD1Ev"]
    pub fn std_exception_ptr_exception_ptr_destructor(this: *mut std_exception_ptr);
}
impl std_exception_ptr {
    #[inline]
    pub unsafe fn new(arg1: *const std_exception_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_exception_ptr_exception_ptr(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_exception_ptr_exception_ptr_destructor(self)
    }
}
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __type_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_std_type_info() {
    assert_eq!(
        ::std::mem::size_of::<std_type_info>(),
        16usize,
        concat!("Size of: ", stringify!(std_type_info))
    );
    assert_eq!(
        ::std::mem::align_of::<std_type_info>(),
        8usize,
        concat!("Alignment of ", stringify!(std_type_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_type_info>())).__type_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_type_info),
            "::",
            stringify!(__type_name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub __imp_: std___libcpp_refstring,
}
#[test]
fn bindgen_test_layout_std_runtime_error() {
    assert_eq!(
        ::std::mem::size_of::<std_runtime_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_runtime_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_runtime_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_runtime_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_runtime_error>())).__imp_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_runtime_error),
            "::",
            stringify!(__imp_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(
        this: *mut std_runtime_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error2(
        this: *mut std_runtime_error,
        arg1: *const std_runtime_error,
    );
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorD1Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this: *mut std_runtime_error);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type __darwin_intptr_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type mbstate_t = __darwin_mbstate_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type google_protobuf_int32 = i32;
pub type google_protobuf_int64 = i64;
pub type google_protobuf_uint8 = u8;
pub type google_protobuf_uint32 = u32;
pub type google_protobuf_uint64 = u64;
pub type google_protobuf_internal_LifecycleId = i64;
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_internal_ArenaImpl {
    pub threads_: u64,
    pub hint_: u64,
    pub space_allocated_: std_atomic,
    pub initial_block_: *mut google_protobuf_internal_ArenaImpl_Block,
    pub lifecycle_id_: google_protobuf_internal_LifecycleId,
    pub options_: google_protobuf_internal_ArenaImpl_Options,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_Options {
    pub start_block_size: usize,
    pub max_block_size: usize,
    pub initial_block: *mut ::std::os::raw::c_char,
    pub initial_block_size: usize,
    pub block_alloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>,
    pub block_dealloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)>,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_Options() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_Options>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_Options>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_Options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>())).start_block_size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(start_block_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>())).max_block_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(max_block_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>())).initial_block
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(initial_block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>()))
                .initial_block_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(initial_block_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>())).block_alloc
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(block_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Options>())).block_dealloc
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Options),
            "::",
            stringify!(block_dealloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_CleanupNode {
    pub elem: *mut ::std::os::raw::c_void,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_CleanupNode() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_CleanupNode>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupNode)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_CleanupNode>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_CleanupNode>())).elem
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupNode),
            "::",
            stringify!(elem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_CleanupNode>())).cleanup
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupNode),
            "::",
            stringify!(cleanup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_CleanupChunk {
    pub size: usize,
    pub next: *mut google_protobuf_internal_ArenaImpl_CleanupChunk,
    pub nodes: [google_protobuf_internal_ArenaImpl_CleanupNode; 1usize],
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_CleanupChunk() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_CleanupChunk>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupChunk)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_CleanupChunk>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupChunk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_CleanupChunk>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupChunk),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_CleanupChunk>())).next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupChunk),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_CleanupChunk>())).nodes
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_CleanupChunk),
            "::",
            stringify!(nodes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_SerialArena {
    pub arena_: *mut google_protobuf_internal_ArenaImpl,
    pub owner_: *mut ::std::os::raw::c_void,
    pub head_: *mut google_protobuf_internal_ArenaImpl_Block,
    pub cleanup_: *mut google_protobuf_internal_ArenaImpl_CleanupChunk,
    pub next_: *mut google_protobuf_internal_ArenaImpl_SerialArena,
    pub ptr_: *mut ::std::os::raw::c_char,
    pub limit_: *mut ::std::os::raw::c_char,
    pub cleanup_ptr_: *mut google_protobuf_internal_ArenaImpl_CleanupNode,
    pub cleanup_limit_: *mut google_protobuf_internal_ArenaImpl_CleanupNode,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_SerialArena() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_SerialArena>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_SerialArena>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).arena_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(arena_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).owner_
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(owner_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).head_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(head_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).cleanup_
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(cleanup_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).next_
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(next_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).ptr_
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(ptr_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).limit_
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(limit_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>())).cleanup_ptr_
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(cleanup_ptr_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_SerialArena>()))
                .cleanup_limit_ as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_SerialArena),
            "::",
            stringify!(cleanup_limit_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl11SerialArena3NewEPNS2_5BlockEPvPS2_"]
    pub fn google_protobuf_internal_ArenaImpl_SerialArena_New(
        b: *mut google_protobuf_internal_ArenaImpl_Block,
        owner: *mut ::std::os::raw::c_void,
        arena: *mut google_protobuf_internal_ArenaImpl,
    ) -> *mut google_protobuf_internal_ArenaImpl_SerialArena;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl11SerialArena4FreeEPS3_PNS2_5BlockEPFvPvmE"]
    pub fn google_protobuf_internal_ArenaImpl_SerialArena_Free(
        serial: *mut google_protobuf_internal_ArenaImpl_SerialArena,
        initial_block: *mut google_protobuf_internal_ArenaImpl_Block,
        block_dealloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
        >,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl11SerialArena11CleanupListEv"]
    pub fn google_protobuf_internal_ArenaImpl_SerialArena_CleanupList(
        this: *mut google_protobuf_internal_ArenaImpl_SerialArena,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal9ArenaImpl11SerialArena9SpaceUsedEv"]
    pub fn google_protobuf_internal_ArenaImpl_SerialArena_SpaceUsed(
        this: *const google_protobuf_internal_ArenaImpl_SerialArena,
    ) -> google_protobuf_uint64;
}
impl google_protobuf_internal_ArenaImpl_SerialArena {
    #[inline]
    pub unsafe fn New(
        b: *mut google_protobuf_internal_ArenaImpl_Block,
        owner: *mut ::std::os::raw::c_void,
        arena: *mut google_protobuf_internal_ArenaImpl,
    ) -> *mut google_protobuf_internal_ArenaImpl_SerialArena {
        google_protobuf_internal_ArenaImpl_SerialArena_New(b, owner, arena)
    }
    #[inline]
    pub unsafe fn Free(
        serial: *mut google_protobuf_internal_ArenaImpl_SerialArena,
        initial_block: *mut google_protobuf_internal_ArenaImpl_Block,
        block_dealloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
        >,
    ) -> google_protobuf_uint64 {
        google_protobuf_internal_ArenaImpl_SerialArena_Free(serial, initial_block, block_dealloc)
    }
    #[inline]
    pub unsafe fn CleanupList(&mut self) {
        google_protobuf_internal_ArenaImpl_SerialArena_CleanupList(self)
    }
    #[inline]
    pub unsafe fn SpaceUsed(&self) -> google_protobuf_uint64 {
        google_protobuf_internal_ArenaImpl_SerialArena_SpaceUsed(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_Block {
    pub next_: *mut google_protobuf_internal_ArenaImpl_Block,
    pub pos_: usize,
    pub size_: usize,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_Block() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_Block>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_Block)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_Block>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_Block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Block>())).next_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Block),
            "::",
            stringify!(next_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Block>())).pos_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Block),
            "::",
            stringify!(pos_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_Block>())).size_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_Block),
            "::",
            stringify!(size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl5BlockC1EmPS3_"]
    pub fn google_protobuf_internal_ArenaImpl_Block_Block(
        this: *mut google_protobuf_internal_ArenaImpl_Block,
        size: usize,
        next: *mut google_protobuf_internal_ArenaImpl_Block,
    );
}
impl google_protobuf_internal_ArenaImpl_Block {
    #[inline]
    pub unsafe fn new(size: usize, next: *mut google_protobuf_internal_ArenaImpl_Block) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_internal_ArenaImpl_Block_Block(&mut __bindgen_tmp, size, next);
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaImpl_ThreadCache {
    pub last_lifecycle_id_seen: google_protobuf_internal_LifecycleId,
    pub last_serial_arena: *mut google_protobuf_internal_ArenaImpl_SerialArena,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl_ThreadCache() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl_ThreadCache>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaImpl_ThreadCache)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl_ThreadCache>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl_ThreadCache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_ThreadCache>()))
                .last_lifecycle_id_seen as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_ThreadCache),
            "::",
            stringify!(last_lifecycle_id_seen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl_ThreadCache>()))
                .last_serial_arena as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl_ThreadCache),
            "::",
            stringify!(last_serial_arena)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl23lifecycle_id_generator_E"]
    pub static mut google_protobuf_internal_ArenaImpl_lifecycle_id_generator_: std_atomic;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl13thread_cache_E"]
    pub static mut google_protobuf_internal_ArenaImpl_thread_cache_:
        google_protobuf_internal_ArenaImpl_ThreadCache;
}
pub const google_protobuf_internal_ArenaImpl_kBlockHeaderSize: usize = 24;
pub const google_protobuf_internal_ArenaImpl_kSerialArenaSize: usize = 72;
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaImpl() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaImpl>(),
        88usize,
        concat!("Size of: ", stringify!(google_protobuf_internal_ArenaImpl))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaImpl>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).threads_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(threads_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).hint_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(hint_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).space_allocated_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(space_allocated_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).initial_block_
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(initial_block_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).lifecycle_id_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(lifecycle_id_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaImpl>())).options_ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaImpl),
            "::",
            stringify!(options_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl5ResetEv"]
    pub fn google_protobuf_internal_ArenaImpl_Reset(
        this: *mut google_protobuf_internal_ArenaImpl,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal9ArenaImpl14SpaceAllocatedEv"]
    pub fn google_protobuf_internal_ArenaImpl_SpaceAllocated(
        this: *const google_protobuf_internal_ArenaImpl,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal9ArenaImpl9SpaceUsedEv"]
    pub fn google_protobuf_internal_ArenaImpl_SpaceUsed(
        this: *const google_protobuf_internal_ArenaImpl,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl15AllocateAlignedEm"]
    pub fn google_protobuf_internal_ArenaImpl_AllocateAligned(
        this: *mut google_protobuf_internal_ArenaImpl,
        n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl28AllocateAlignedAndAddCleanupEmPFvPvE"]
    pub fn google_protobuf_internal_ArenaImpl_AllocateAlignedAndAddCleanup(
        this: *mut google_protobuf_internal_ArenaImpl,
        n: usize,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImpl10AddCleanupEPvPFvS3_E"]
    pub fn google_protobuf_internal_ArenaImpl_AddCleanup(
        this: *mut google_protobuf_internal_ArenaImpl,
        elem: *mut ::std::os::raw::c_void,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal9ArenaImplD1Ev"]
    pub fn google_protobuf_internal_ArenaImpl_ArenaImpl_destructor(
        this: *mut google_protobuf_internal_ArenaImpl,
    );
}
impl google_protobuf_internal_ArenaImpl {
    #[inline]
    pub unsafe fn Reset(&mut self) -> google_protobuf_uint64 {
        google_protobuf_internal_ArenaImpl_Reset(self)
    }
    #[inline]
    pub unsafe fn SpaceAllocated(&self) -> google_protobuf_uint64 {
        google_protobuf_internal_ArenaImpl_SpaceAllocated(self)
    }
    #[inline]
    pub unsafe fn SpaceUsed(&self) -> google_protobuf_uint64 {
        google_protobuf_internal_ArenaImpl_SpaceUsed(self)
    }
    #[inline]
    pub unsafe fn AllocateAligned(&mut self, n: usize) -> *mut ::std::os::raw::c_void {
        google_protobuf_internal_ArenaImpl_AllocateAligned(self, n)
    }
    #[inline]
    pub unsafe fn AllocateAlignedAndAddCleanup(
        &mut self,
        n: usize,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut ::std::os::raw::c_void {
        google_protobuf_internal_ArenaImpl_AllocateAlignedAndAddCleanup(self, n, cleanup)
    }
    #[inline]
    pub unsafe fn AddCleanup(
        &mut self,
        elem: *mut ::std::os::raw::c_void,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) {
        google_protobuf_internal_ArenaImpl_AddCleanup(self, elem, cleanup)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        google_protobuf_internal_ArenaImpl_ArenaImpl_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ArenaStringPtr {
    pub ptr_: *mut std_string,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ArenaStringPtr() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ArenaStringPtr>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ArenaStringPtr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ArenaStringPtr>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ArenaStringPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ArenaStringPtr>())).ptr_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ArenaStringPtr),
            "::",
            stringify!(ptr_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal14ArenaStringPtr17AssignWithDefaultEPKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES2_"]
    pub fn google_protobuf_internal_ArenaStringPtr_AssignWithDefault(
        this: *mut google_protobuf_internal_ArenaStringPtr,
        default_value: *const std_string,
        value: google_protobuf_internal_ArenaStringPtr,
    );
}
impl google_protobuf_internal_ArenaStringPtr {
    #[inline]
    pub unsafe fn AssignWithDefault(
        &mut self,
        default_value: *const std_string,
        value: google_protobuf_internal_ArenaStringPtr,
    ) {
        google_protobuf_internal_ArenaStringPtr_AssignWithDefault(self, default_value, value)
    }
}
pub type google_protobuf_internal_once_flag = std_once_flag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_IsMovable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_internal_RepeatedPtrFieldBase {
    pub arena_: *mut google_protobuf_Arena,
    pub current_size_: ::std::os::raw::c_int,
    pub total_size_: ::std::os::raw::c_int,
    pub rep_: *mut google_protobuf_internal_RepeatedPtrFieldBase_Rep,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_RepeatedPtrFieldBase_Rep {
    pub allocated_size: ::std::os::raw::c_int,
    pub elements: [*mut ::std::os::raw::c_void; 1usize],
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_RepeatedPtrFieldBase_Rep() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_RepeatedPtrFieldBase_Rep>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase_Rep)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_RepeatedPtrFieldBase_Rep>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase_Rep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase_Rep>()))
                .allocated_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase_Rep),
            "::",
            stringify!(allocated_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase_Rep>())).elements
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase_Rep),
            "::",
            stringify!(elements)
        )
    );
}
pub const google_protobuf_internal_RepeatedPtrFieldBase_kInitialSize: ::std::os::raw::c_int = 0;
pub const google_protobuf_internal_RepeatedPtrFieldBase_kRepHeaderSize: usize = 8;
#[test]
fn bindgen_test_layout_google_protobuf_internal_RepeatedPtrFieldBase() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_RepeatedPtrFieldBase>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_RepeatedPtrFieldBase>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase>())).arena_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase),
            "::",
            stringify!(arena_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase>())).current_size_
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase),
            "::",
            stringify!(current_size_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase>())).total_size_
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase),
            "::",
            stringify!(total_size_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_RepeatedPtrFieldBase>())).rep_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_RepeatedPtrFieldBase),
            "::",
            stringify!(rep_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase5emptyEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_empty(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase4sizeEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_size(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBase7AddWeakEPKNS0_11MessageLiteE"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_AddWeak(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
        prototype: *const google_protobuf_MessageLite,
    ) -> *mut google_protobuf_MessageLite;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBase8CloseGapEii"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_CloseGap(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
        start: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBase7ReserveEi"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_Reserve(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
        new_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase8CapacityEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_Capacity(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase8raw_dataEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_raw_data(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> *const *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase16raw_mutable_dataEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_raw_mutable_data(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBase12SwapElementsEii"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_SwapElements(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf8internal20RepeatedPtrFieldBase12ClearedCountEv"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_ClearedCount(
        this: *const google_protobuf_internal_RepeatedPtrFieldBase,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBaseC1Ev"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_RepeatedPtrFieldBase(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal20RepeatedPtrFieldBaseC1EPNS0_5ArenaE"]
    pub fn google_protobuf_internal_RepeatedPtrFieldBase_RepeatedPtrFieldBase1(
        this: *mut google_protobuf_internal_RepeatedPtrFieldBase,
        arena: *mut google_protobuf_Arena,
    );
}
impl google_protobuf_internal_RepeatedPtrFieldBase {
    #[inline]
    pub unsafe fn empty(&self) -> bool {
        google_protobuf_internal_RepeatedPtrFieldBase_empty(self)
    }
    #[inline]
    pub unsafe fn size(&self) -> ::std::os::raw::c_int {
        google_protobuf_internal_RepeatedPtrFieldBase_size(self)
    }
    #[inline]
    pub unsafe fn AddWeak(
        &mut self,
        prototype: *const google_protobuf_MessageLite,
    ) -> *mut google_protobuf_MessageLite {
        google_protobuf_internal_RepeatedPtrFieldBase_AddWeak(self, prototype)
    }
    #[inline]
    pub unsafe fn CloseGap(&mut self, start: ::std::os::raw::c_int, num: ::std::os::raw::c_int) {
        google_protobuf_internal_RepeatedPtrFieldBase_CloseGap(self, start, num)
    }
    #[inline]
    pub unsafe fn Reserve(&mut self, new_size: ::std::os::raw::c_int) {
        google_protobuf_internal_RepeatedPtrFieldBase_Reserve(self, new_size)
    }
    #[inline]
    pub unsafe fn Capacity(&self) -> ::std::os::raw::c_int {
        google_protobuf_internal_RepeatedPtrFieldBase_Capacity(self)
    }
    #[inline]
    pub unsafe fn raw_data(&self) -> *const *mut ::std::os::raw::c_void {
        google_protobuf_internal_RepeatedPtrFieldBase_raw_data(self)
    }
    #[inline]
    pub unsafe fn raw_mutable_data(&self) -> *mut *mut ::std::os::raw::c_void {
        google_protobuf_internal_RepeatedPtrFieldBase_raw_mutable_data(self)
    }
    #[inline]
    pub unsafe fn SwapElements(
        &mut self,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    ) {
        google_protobuf_internal_RepeatedPtrFieldBase_SwapElements(self, index1, index2)
    }
    #[inline]
    pub unsafe fn ClearedCount(&self) -> ::std::os::raw::c_int {
        google_protobuf_internal_RepeatedPtrFieldBase_ClearedCount(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_internal_RepeatedPtrFieldBase_RepeatedPtrFieldBase(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arena: *mut google_protobuf_Arena) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_internal_RepeatedPtrFieldBase_RepeatedPtrFieldBase1(
            &mut __bindgen_tmp,
            arena,
        );
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_GenericTypeHandler {
    pub _address: u8,
}
pub type google_protobuf_internal_GenericTypeHandler_Type<GenericType> = GenericType;
pub type google_protobuf_internal_GenericTypeHandler_WeakType<GenericType> = GenericType;
pub type google_protobuf_internal_GenericTypeHandler_Movable = google_protobuf_internal_IsMovable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_RepeatedPtrIterator {
    pub it_: *const *mut ::std::os::raw::c_void,
}
pub type google_protobuf_internal_RepeatedPtrIterator_iterator =
    google_protobuf_internal_RepeatedPtrIterator;
pub type google_protobuf_internal_RepeatedPtrIterator_iterator_category =
    std_random_access_iterator_tag;
pub type google_protobuf_internal_RepeatedPtrIterator_value_type = std_remove_const;
pub type google_protobuf_internal_RepeatedPtrIterator_difference_type = isize;
pub type google_protobuf_internal_RepeatedPtrIterator_pointer<Element> = *mut Element;
pub type google_protobuf_internal_RepeatedPtrIterator_reference<Element> = *mut Element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_RepeatedPtrOverPtrsIterator<VoidPtr> {
    pub it_: *mut VoidPtr,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<VoidPtr>>,
}
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_iterator<VoidPtr> =
    google_protobuf_internal_RepeatedPtrOverPtrsIterator<VoidPtr>;
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_iterator_category =
    std_random_access_iterator_tag;
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_value_type = std_remove_const;
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_difference_type = isize;
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_pointer<Element> = *mut Element;
pub type google_protobuf_internal_RepeatedPtrOverPtrsIterator_reference<Element> = *mut Element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_CachedSize {
    pub size_: std_atomic,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_CachedSize() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_CachedSize>(),
        4usize,
        concat!("Size of: ", stringify!(google_protobuf_internal_CachedSize))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_CachedSize>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_CachedSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_CachedSize>())).size_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_CachedSize),
            "::",
            stringify!(size_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_SCCInfoBase {
    pub visit_status: std_atomic,
    pub num_deps: ::std::os::raw::c_int,
    pub init_func: ::std::option::Option<unsafe extern "C" fn()>,
}
pub const google_protobuf_internal_SCCInfoBase_kInitialized:
    google_protobuf_internal_SCCInfoBase__bindgen_ty_1 = 0;
pub const google_protobuf_internal_SCCInfoBase_kRunning:
    google_protobuf_internal_SCCInfoBase__bindgen_ty_1 = 1;
pub const google_protobuf_internal_SCCInfoBase_kUninitialized:
    google_protobuf_internal_SCCInfoBase__bindgen_ty_1 = -1;
pub type google_protobuf_internal_SCCInfoBase__bindgen_ty_1 = i32;
#[test]
fn bindgen_test_layout_google_protobuf_internal_SCCInfoBase() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_SCCInfoBase>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_SCCInfoBase)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_SCCInfoBase>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_SCCInfoBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_SCCInfoBase>())).visit_status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_SCCInfoBase),
            "::",
            stringify!(visit_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_SCCInfoBase>())).num_deps as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_SCCInfoBase),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_SCCInfoBase>())).init_func as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_SCCInfoBase),
            "::",
            stringify!(init_func)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_internal_InternalMetadataWithArenaBase {
    pub ptr_: *mut ::std::os::raw::c_void,
}
pub const google_protobuf_internal_InternalMetadataWithArenaBase_kTagArena:
    google_protobuf_internal_InternalMetadataWithArenaBase__bindgen_ty_1 = 0;
pub const google_protobuf_internal_InternalMetadataWithArenaBase_kTagContainer:
    google_protobuf_internal_InternalMetadataWithArenaBase__bindgen_ty_1 = 0;
pub type google_protobuf_internal_InternalMetadataWithArenaBase__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_InternalMetadataWithArenaBase_Container<T> {
    pub unknown_fields: T,
    pub arena: *mut google_protobuf_Arena,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
pub struct google_protobuf_internal_InternalMetadataWithArena {
    pub _base: google_protobuf_internal_InternalMetadataWithArenaBase,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_InternalMetadataWithArena() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_InternalMetadataWithArena>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_InternalMetadataWithArena)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_InternalMetadataWithArena>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_InternalMetadataWithArena)
        )
    );
}
#[repr(C)]
pub struct google_protobuf_internal_WrappedMutex {
    pub mu_: std_mutex,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_WrappedMutex() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_WrappedMutex>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_WrappedMutex)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_WrappedMutex>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_WrappedMutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_WrappedMutex>())).mu_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_WrappedMutex),
            "::",
            stringify!(mu_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_LazyDescriptor {
    pub descriptor_: *const google_protobuf_Descriptor,
    pub name_: *const std_string,
    pub once_: *mut google_protobuf_internal_once_flag,
    pub file_: *const google_protobuf_FileDescriptor,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_LazyDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_LazyDescriptor>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_LazyDescriptor)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_LazyDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_LazyDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_LazyDescriptor>())).descriptor_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_LazyDescriptor),
            "::",
            stringify!(descriptor_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_LazyDescriptor>())).name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_LazyDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_LazyDescriptor>())).once_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_LazyDescriptor),
            "::",
            stringify!(once_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_LazyDescriptor>())).file_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_LazyDescriptor),
            "::",
            stringify!(file_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal14LazyDescriptor3SetEPKNS0_10DescriptorE"]
    pub fn google_protobuf_internal_LazyDescriptor_Set(
        this: *mut google_protobuf_internal_LazyDescriptor,
        descriptor: *const google_protobuf_Descriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf8internal14LazyDescriptor7SetLazyERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKNS0_14FileDescriptorE"]
    pub fn google_protobuf_internal_LazyDescriptor_SetLazy(
        this: *mut google_protobuf_internal_LazyDescriptor,
        name: *const std_string,
        file: *const google_protobuf_FileDescriptor,
    );
}
impl google_protobuf_internal_LazyDescriptor {
    #[inline]
    pub unsafe fn Set(&mut self, descriptor: *const google_protobuf_Descriptor) {
        google_protobuf_internal_LazyDescriptor_Set(self, descriptor)
    }
    #[inline]
    pub unsafe fn SetLazy(
        &mut self,
        name: *const std_string,
        file: *const google_protobuf_FileDescriptor,
    ) {
        google_protobuf_internal_LazyDescriptor_SetLazy(self, name, file)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_ReflectionSchema {
    pub default_instance_: *const google_protobuf_Message,
    pub offsets_: *const google_protobuf_uint32,
    pub has_bit_indices_: *const google_protobuf_uint32,
    pub has_bits_offset_: ::std::os::raw::c_int,
    pub metadata_offset_: ::std::os::raw::c_int,
    pub extensions_offset_: ::std::os::raw::c_int,
    pub oneof_case_offset_: ::std::os::raw::c_int,
    pub object_size_: ::std::os::raw::c_int,
    pub weak_field_map_offset_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_ReflectionSchema() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_ReflectionSchema>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_ReflectionSchema)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_ReflectionSchema>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_ReflectionSchema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).default_instance_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(default_instance_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).offsets_
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(offsets_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).has_bit_indices_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(has_bit_indices_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).has_bits_offset_
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(has_bits_offset_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).metadata_offset_
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(metadata_offset_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).extensions_offset_
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(extensions_offset_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).oneof_case_offset_
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(oneof_case_offset_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>())).object_size_
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(object_size_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_ReflectionSchema>()))
                .weak_field_map_offset_ as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_ReflectionSchema),
            "::",
            stringify!(weak_field_map_offset_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_MigrationSchema {
    pub offsets_index: google_protobuf_int32,
    pub has_bit_indices_index: google_protobuf_int32,
    pub object_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_MigrationSchema() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_MigrationSchema>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_MigrationSchema)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_MigrationSchema>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_MigrationSchema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_MigrationSchema>())).offsets_index
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_MigrationSchema),
            "::",
            stringify!(offsets_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_MigrationSchema>()))
                .has_bit_indices_index as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_MigrationSchema),
            "::",
            stringify!(has_bit_indices_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_MigrationSchema>())).object_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_MigrationSchema),
            "::",
            stringify!(object_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_internal_DescriptorTable {
    pub is_initialized: *mut bool,
    pub descriptor: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub once: *mut google_protobuf_internal_once_flag,
    pub init_default_instances: *const *mut google_protobuf_internal_SCCInfoBase,
    pub deps: *const *const google_protobuf_internal_DescriptorTable,
    pub num_sccs: ::std::os::raw::c_int,
    pub num_deps: ::std::os::raw::c_int,
    pub schemas: *const google_protobuf_internal_MigrationSchema,
    pub default_instances: *const *const google_protobuf_Message,
    pub offsets: *const google_protobuf_uint32,
    pub file_level_metadata: *mut google_protobuf_Metadata,
    pub num_messages: ::std::os::raw::c_int,
    pub file_level_enum_descriptors: *mut *const google_protobuf_EnumDescriptor,
    pub file_level_service_descriptors: *mut *const google_protobuf_ServiceDescriptor,
}
#[test]
fn bindgen_test_layout_google_protobuf_internal_DescriptorTable() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_DescriptorTable>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_internal_DescriptorTable)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_DescriptorTable>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_internal_DescriptorTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).is_initialized
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).descriptor
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).filename
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).once as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(once)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>()))
                .init_default_instances as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(init_default_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).deps as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).num_sccs
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(num_sccs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).num_deps
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).schemas as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(schemas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).default_instances
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(default_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).offsets as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).file_level_metadata
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(file_level_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>())).num_messages
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(num_messages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>()))
                .file_level_enum_descriptors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(file_level_enum_descriptors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_internal_DescriptorTable>()))
                .file_level_service_descriptors as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_internal_DescriptorTable),
            "::",
            stringify!(file_level_service_descriptors)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_io_CodedInputStream {
    pub buffer_: *const google_protobuf_uint8,
    pub buffer_end_: *const google_protobuf_uint8,
    pub input_: *mut google_protobuf_io_ZeroCopyInputStream,
    pub total_bytes_read_: ::std::os::raw::c_int,
    pub overflow_bytes_: ::std::os::raw::c_int,
    pub last_tag_: google_protobuf_uint32,
    pub legitimate_message_end_: bool,
    pub aliasing_enabled_: bool,
    pub current_limit_: google_protobuf_io_CodedInputStream_Limit,
    pub buffer_size_after_limit_: ::std::os::raw::c_int,
    pub total_bytes_limit_: ::std::os::raw::c_int,
    pub recursion_budget_: ::std::os::raw::c_int,
    pub recursion_limit_: ::std::os::raw::c_int,
    pub extension_pool_: *const google_protobuf_DescriptorPool,
    pub extension_factory_: *mut google_protobuf_MessageFactory,
}
pub type google_protobuf_io_CodedInputStream_Limit = ::std::os::raw::c_int;
pub const google_protobuf_io_CodedInputStream_kDefaultTotalBytesLimit: ::std::os::raw::c_int =
    2147483647;
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream24default_recursion_limit_E"]
    pub static mut google_protobuf_io_CodedInputStream_default_recursion_limit_:
        ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_google_protobuf_io_CodedInputStream() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_io_CodedInputStream>(),
        80usize,
        concat!("Size of: ", stringify!(google_protobuf_io_CodedInputStream))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_io_CodedInputStream>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_io_CodedInputStream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).buffer_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(buffer_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).buffer_end_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(buffer_end_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).input_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(input_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).total_bytes_read_
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(total_bytes_read_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).overflow_bytes_
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(overflow_bytes_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).last_tag_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(last_tag_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).legitimate_message_end_
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(legitimate_message_end_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).aliasing_enabled_
                as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(aliasing_enabled_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).current_limit_
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(current_limit_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).buffer_size_after_limit_
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(buffer_size_after_limit_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).total_bytes_limit_
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(total_bytes_limit_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).recursion_budget_
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(recursion_budget_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).recursion_limit_
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(recursion_limit_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).extension_pool_
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(extension_pool_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedInputStream>())).extension_factory_
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedInputStream),
            "::",
            stringify!(extension_factory_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream22GetDirectBufferPointerEPPKvPi"]
    pub fn google_protobuf_io_CodedInputStream_GetDirectBufferPointer(
        this: *mut google_protobuf_io_CodedInputStream,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream28GetDirectBufferPointerInlineEPPKvPi"]
    pub fn google_protobuf_io_CodedInputStream_GetDirectBufferPointerInline(
        this: *mut google_protobuf_io_CodedInputStream,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream7ReadRawEPvi"]
    pub fn google_protobuf_io_CodedInputStream_ReadRaw(
        this: *mut google_protobuf_io_CodedInputStream,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream21InternalReadRawInlineEPvi"]
    pub fn google_protobuf_io_CodedInputStream_InternalReadRawInline(
        this: *mut google_protobuf_io_CodedInputStream,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream10ReadStringEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEi"]
    pub fn google_protobuf_io_CodedInputStream_ReadString(
        this: *mut google_protobuf_io_CodedInputStream,
        buffer: *mut std_string,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream24InternalReadStringInlineEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEi"]
    pub fn google_protobuf_io_CodedInputStream_InternalReadStringInline(
        this: *mut google_protobuf_io_CodedInputStream,
        buffer: *mut std_string,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream18ReadLittleEndian32EPj"]
    pub fn google_protobuf_io_CodedInputStream_ReadLittleEndian32(
        this: *mut google_protobuf_io_CodedInputStream,
        value: *mut google_protobuf_uint32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream18ReadLittleEndian64EPy"]
    pub fn google_protobuf_io_CodedInputStream_ReadLittleEndian64(
        this: *mut google_protobuf_io_CodedInputStream,
        value: *mut google_protobuf_uint64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream27ReadLittleEndian32FromArrayEPKhPj"]
    pub fn google_protobuf_io_CodedInputStream_ReadLittleEndian32FromArray(
        buffer: *const google_protobuf_uint8,
        value: *mut google_protobuf_uint32,
    ) -> *const google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream27ReadLittleEndian64FromArrayEPKhPy"]
    pub fn google_protobuf_io_CodedInputStream_ReadLittleEndian64FromArray(
        buffer: *const google_protobuf_uint8,
        value: *mut google_protobuf_uint64,
    ) -> *const google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream12ReadVarint32EPj"]
    pub fn google_protobuf_io_CodedInputStream_ReadVarint32(
        this: *mut google_protobuf_io_CodedInputStream,
        value: *mut google_protobuf_uint32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream12ReadVarint64EPy"]
    pub fn google_protobuf_io_CodedInputStream_ReadVarint64(
        this: *mut google_protobuf_io_CodedInputStream,
        value: *mut google_protobuf_uint64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream19ReadVarintSizeAsIntEPi"]
    pub fn google_protobuf_io_CodedInputStream_ReadVarintSizeAsInt(
        this: *mut google_protobuf_io_CodedInputStream,
        value: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream16ReadTagNoLastTagEv"]
    pub fn google_protobuf_io_CodedInputStream_ReadTagNoLastTag(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream26ReadTagWithCutoffNoLastTagEj"]
    pub fn google_protobuf_io_CodedInputStream_ReadTagWithCutoffNoLastTag(
        this: *mut google_protobuf_io_CodedInputStream,
        cutoff: google_protobuf_uint32,
    ) -> std_pair<google_protobuf_uint32, bool>;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream9ExpectTagEj"]
    pub fn google_protobuf_io_CodedInputStream_ExpectTag(
        this: *mut google_protobuf_io_CodedInputStream,
        expected: google_protobuf_uint32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream18ExpectTagFromArrayEPKhj"]
    pub fn google_protobuf_io_CodedInputStream_ExpectTagFromArray(
        buffer: *const google_protobuf_uint8,
        expected: google_protobuf_uint32,
    ) -> *const google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream11ExpectAtEndEv"]
    pub fn google_protobuf_io_CodedInputStream_ExpectAtEnd(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream10LastTagWasEj"]
    pub fn google_protobuf_io_CodedInputStream_LastTagWas(
        this: *mut google_protobuf_io_CodedInputStream,
        expected: google_protobuf_uint32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream21ConsumedEntireMessageEv"]
    pub fn google_protobuf_io_CodedInputStream_ConsumedEntireMessage(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream9PushLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_PushLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        byte_limit: ::std::os::raw::c_int,
    ) -> google_protobuf_io_CodedInputStream_Limit;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream8PopLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_PopLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        limit: google_protobuf_io_CodedInputStream_Limit,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf2io16CodedInputStream15BytesUntilLimitEv"]
    pub fn google_protobuf_io_CodedInputStream_BytesUntilLimit(
        this: *const google_protobuf_io_CodedInputStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf2io16CodedInputStream15CurrentPositionEv"]
    pub fn google_protobuf_io_CodedInputStream_CurrentPosition(
        this: *const google_protobuf_io_CodedInputStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream18SetTotalBytesLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_SetTotalBytesLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        total_bytes_limit: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf2io16CodedInputStream25BytesUntilTotalBytesLimitEv"]
    pub fn google_protobuf_io_CodedInputStream_BytesUntilTotalBytesLimit(
        this: *const google_protobuf_io_CodedInputStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream17SetRecursionLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_SetRecursionLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        limit: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream23IncrementRecursionDepthEv"]
    pub fn google_protobuf_io_CodedInputStream_IncrementRecursionDepth(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream23DecrementRecursionDepthEv"]
    pub fn google_protobuf_io_CodedInputStream_DecrementRecursionDepth(
        this: *mut google_protobuf_io_CodedInputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream29UnsafeDecrementRecursionDepthEv"]
    pub fn google_protobuf_io_CodedInputStream_UnsafeDecrementRecursionDepth(
        this: *mut google_protobuf_io_CodedInputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream35IncrementRecursionDepthAndPushLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_IncrementRecursionDepthAndPushLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        byte_limit: ::std::os::raw::c_int,
    ) -> std_pair<google_protobuf_io_CodedInputStream_Limit, ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream22ReadLengthAndPushLimitEv"]
    pub fn google_protobuf_io_CodedInputStream_ReadLengthAndPushLimit(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> google_protobuf_io_CodedInputStream_Limit;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream34DecrementRecursionDepthAndPopLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_DecrementRecursionDepthAndPopLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        limit: google_protobuf_io_CodedInputStream_Limit,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream37CheckEntireMessageConsumedAndPopLimitEi"]
    pub fn google_protobuf_io_CodedInputStream_CheckEntireMessageConsumedAndPopLimit(
        this: *mut google_protobuf_io_CodedInputStream,
        limit: google_protobuf_io_CodedInputStream_Limit,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream20SetExtensionRegistryEPKNS0_14DescriptorPoolEPNS0_14MessageFactoryE"]
    pub fn google_protobuf_io_CodedInputStream_SetExtensionRegistry(
        this: *mut google_protobuf_io_CodedInputStream,
        pool: *const google_protobuf_DescriptorPool,
        factory: *mut google_protobuf_MessageFactory,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream16GetExtensionPoolEv"]
    pub fn google_protobuf_io_CodedInputStream_GetExtensionPool(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> *const google_protobuf_DescriptorPool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStream19GetExtensionFactoryEv"]
    pub fn google_protobuf_io_CodedInputStream_GetExtensionFactory(
        this: *mut google_protobuf_io_CodedInputStream,
    ) -> *mut google_protobuf_MessageFactory;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStreamC1EPNS1_19ZeroCopyInputStreamE"]
    pub fn google_protobuf_io_CodedInputStream_CodedInputStream(
        this: *mut google_protobuf_io_CodedInputStream,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStreamC1EPKhi"]
    pub fn google_protobuf_io_CodedInputStream_CodedInputStream1(
        this: *mut google_protobuf_io_CodedInputStream,
        buffer: *const google_protobuf_uint8,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io16CodedInputStreamD1Ev"]
    pub fn google_protobuf_io_CodedInputStream_CodedInputStream_destructor(
        this: *mut google_protobuf_io_CodedInputStream,
    );
}
impl google_protobuf_io_CodedInputStream {
    #[inline]
    pub unsafe fn GetDirectBufferPointer(
        &mut self,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedInputStream_GetDirectBufferPointer(self, data, size)
    }
    #[inline]
    pub unsafe fn GetDirectBufferPointerInline(
        &mut self,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) {
        google_protobuf_io_CodedInputStream_GetDirectBufferPointerInline(self, data, size)
    }
    #[inline]
    pub unsafe fn ReadRaw(
        &mut self,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedInputStream_ReadRaw(self, buffer, size)
    }
    #[inline]
    pub unsafe fn InternalReadRawInline(
        &mut self,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedInputStream_InternalReadRawInline(self, buffer, size)
    }
    #[inline]
    pub unsafe fn ReadString(
        &mut self,
        buffer: *mut std_string,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedInputStream_ReadString(self, buffer, size)
    }
    #[inline]
    pub unsafe fn InternalReadStringInline(
        &mut self,
        buffer: *mut std_string,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedInputStream_InternalReadStringInline(self, buffer, size)
    }
    #[inline]
    pub unsafe fn ReadLittleEndian32(&mut self, value: *mut google_protobuf_uint32) -> bool {
        google_protobuf_io_CodedInputStream_ReadLittleEndian32(self, value)
    }
    #[inline]
    pub unsafe fn ReadLittleEndian64(&mut self, value: *mut google_protobuf_uint64) -> bool {
        google_protobuf_io_CodedInputStream_ReadLittleEndian64(self, value)
    }
    #[inline]
    pub unsafe fn ReadLittleEndian32FromArray(
        buffer: *const google_protobuf_uint8,
        value: *mut google_protobuf_uint32,
    ) -> *const google_protobuf_uint8 {
        google_protobuf_io_CodedInputStream_ReadLittleEndian32FromArray(buffer, value)
    }
    #[inline]
    pub unsafe fn ReadLittleEndian64FromArray(
        buffer: *const google_protobuf_uint8,
        value: *mut google_protobuf_uint64,
    ) -> *const google_protobuf_uint8 {
        google_protobuf_io_CodedInputStream_ReadLittleEndian64FromArray(buffer, value)
    }
    #[inline]
    pub unsafe fn ReadVarint32(&mut self, value: *mut google_protobuf_uint32) -> bool {
        google_protobuf_io_CodedInputStream_ReadVarint32(self, value)
    }
    #[inline]
    pub unsafe fn ReadVarint64(&mut self, value: *mut google_protobuf_uint64) -> bool {
        google_protobuf_io_CodedInputStream_ReadVarint64(self, value)
    }
    #[inline]
    pub unsafe fn ReadVarintSizeAsInt(&mut self, value: *mut ::std::os::raw::c_int) -> bool {
        google_protobuf_io_CodedInputStream_ReadVarintSizeAsInt(self, value)
    }
    #[inline]
    pub unsafe fn ReadTagNoLastTag(&mut self) -> google_protobuf_uint32 {
        google_protobuf_io_CodedInputStream_ReadTagNoLastTag(self)
    }
    #[inline]
    pub unsafe fn ReadTagWithCutoffNoLastTag(
        &mut self,
        cutoff: google_protobuf_uint32,
    ) -> std_pair<google_protobuf_uint32, bool> {
        google_protobuf_io_CodedInputStream_ReadTagWithCutoffNoLastTag(self, cutoff)
    }
    #[inline]
    pub unsafe fn ExpectTag(&mut self, expected: google_protobuf_uint32) -> bool {
        google_protobuf_io_CodedInputStream_ExpectTag(self, expected)
    }
    #[inline]
    pub unsafe fn ExpectTagFromArray(
        buffer: *const google_protobuf_uint8,
        expected: google_protobuf_uint32,
    ) -> *const google_protobuf_uint8 {
        google_protobuf_io_CodedInputStream_ExpectTagFromArray(buffer, expected)
    }
    #[inline]
    pub unsafe fn ExpectAtEnd(&mut self) -> bool {
        google_protobuf_io_CodedInputStream_ExpectAtEnd(self)
    }
    #[inline]
    pub unsafe fn LastTagWas(&mut self, expected: google_protobuf_uint32) -> bool {
        google_protobuf_io_CodedInputStream_LastTagWas(self, expected)
    }
    #[inline]
    pub unsafe fn ConsumedEntireMessage(&mut self) -> bool {
        google_protobuf_io_CodedInputStream_ConsumedEntireMessage(self)
    }
    #[inline]
    pub unsafe fn PushLimit(
        &mut self,
        byte_limit: ::std::os::raw::c_int,
    ) -> google_protobuf_io_CodedInputStream_Limit {
        google_protobuf_io_CodedInputStream_PushLimit(self, byte_limit)
    }
    #[inline]
    pub unsafe fn PopLimit(&mut self, limit: google_protobuf_io_CodedInputStream_Limit) {
        google_protobuf_io_CodedInputStream_PopLimit(self, limit)
    }
    #[inline]
    pub unsafe fn BytesUntilLimit(&self) -> ::std::os::raw::c_int {
        google_protobuf_io_CodedInputStream_BytesUntilLimit(self)
    }
    #[inline]
    pub unsafe fn CurrentPosition(&self) -> ::std::os::raw::c_int {
        google_protobuf_io_CodedInputStream_CurrentPosition(self)
    }
    #[inline]
    pub unsafe fn SetTotalBytesLimit(&mut self, total_bytes_limit: ::std::os::raw::c_int) {
        google_protobuf_io_CodedInputStream_SetTotalBytesLimit(self, total_bytes_limit)
    }
    #[inline]
    pub unsafe fn BytesUntilTotalBytesLimit(&self) -> ::std::os::raw::c_int {
        google_protobuf_io_CodedInputStream_BytesUntilTotalBytesLimit(self)
    }
    #[inline]
    pub unsafe fn SetRecursionLimit(&mut self, limit: ::std::os::raw::c_int) {
        google_protobuf_io_CodedInputStream_SetRecursionLimit(self, limit)
    }
    #[inline]
    pub unsafe fn IncrementRecursionDepth(&mut self) -> bool {
        google_protobuf_io_CodedInputStream_IncrementRecursionDepth(self)
    }
    #[inline]
    pub unsafe fn DecrementRecursionDepth(&mut self) {
        google_protobuf_io_CodedInputStream_DecrementRecursionDepth(self)
    }
    #[inline]
    pub unsafe fn UnsafeDecrementRecursionDepth(&mut self) {
        google_protobuf_io_CodedInputStream_UnsafeDecrementRecursionDepth(self)
    }
    #[inline]
    pub unsafe fn IncrementRecursionDepthAndPushLimit(
        &mut self,
        byte_limit: ::std::os::raw::c_int,
    ) -> std_pair<google_protobuf_io_CodedInputStream_Limit, ::std::os::raw::c_int> {
        google_protobuf_io_CodedInputStream_IncrementRecursionDepthAndPushLimit(self, byte_limit)
    }
    #[inline]
    pub unsafe fn ReadLengthAndPushLimit(&mut self) -> google_protobuf_io_CodedInputStream_Limit {
        google_protobuf_io_CodedInputStream_ReadLengthAndPushLimit(self)
    }
    #[inline]
    pub unsafe fn DecrementRecursionDepthAndPopLimit(
        &mut self,
        limit: google_protobuf_io_CodedInputStream_Limit,
    ) -> bool {
        google_protobuf_io_CodedInputStream_DecrementRecursionDepthAndPopLimit(self, limit)
    }
    #[inline]
    pub unsafe fn CheckEntireMessageConsumedAndPopLimit(
        &mut self,
        limit: google_protobuf_io_CodedInputStream_Limit,
    ) -> bool {
        google_protobuf_io_CodedInputStream_CheckEntireMessageConsumedAndPopLimit(self, limit)
    }
    #[inline]
    pub unsafe fn SetExtensionRegistry(
        &mut self,
        pool: *const google_protobuf_DescriptorPool,
        factory: *mut google_protobuf_MessageFactory,
    ) {
        google_protobuf_io_CodedInputStream_SetExtensionRegistry(self, pool, factory)
    }
    #[inline]
    pub unsafe fn GetExtensionPool(&mut self) -> *const google_protobuf_DescriptorPool {
        google_protobuf_io_CodedInputStream_GetExtensionPool(self)
    }
    #[inline]
    pub unsafe fn GetExtensionFactory(&mut self) -> *mut google_protobuf_MessageFactory {
        google_protobuf_io_CodedInputStream_GetExtensionFactory(self)
    }
    #[inline]
    pub unsafe fn new(input: *mut google_protobuf_io_ZeroCopyInputStream) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_io_CodedInputStream_CodedInputStream(&mut __bindgen_tmp, input);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(buffer: *const google_protobuf_uint8, size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_io_CodedInputStream_CodedInputStream1(&mut __bindgen_tmp, buffer, size);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        google_protobuf_io_CodedInputStream_CodedInputStream_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_io_CodedOutputStream {
    pub output_: *mut google_protobuf_io_ZeroCopyOutputStream,
    pub buffer_: *mut google_protobuf_uint8,
    pub buffer_size_: ::std::os::raw::c_int,
    pub total_bytes_: ::std::os::raw::c_int,
    pub had_error_: bool,
    pub aliasing_enabled_: bool,
    pub is_serialization_deterministic_: bool,
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream36default_serialization_deterministic_E"]
    pub static mut google_protobuf_io_CodedOutputStream_default_serialization_deterministic_:
        std_atomic;
}
#[test]
fn bindgen_test_layout_google_protobuf_io_CodedOutputStream() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_io_CodedOutputStream>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_io_CodedOutputStream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_io_CodedOutputStream>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_io_CodedOutputStream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).output_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(output_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).buffer_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(buffer_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).buffer_size_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(buffer_size_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).total_bytes_
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(total_bytes_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).had_error_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(had_error_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>())).aliasing_enabled_
                as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(aliasing_enabled_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_io_CodedOutputStream>()))
                .is_serialization_deterministic_ as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_io_CodedOutputStream),
            "::",
            stringify!(is_serialization_deterministic_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream4TrimEv"]
    pub fn google_protobuf_io_CodedOutputStream_Trim(
        this: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream4SkipEi"]
    pub fn google_protobuf_io_CodedOutputStream_Skip(
        this: *mut google_protobuf_io_CodedOutputStream,
        count: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream22GetDirectBufferPointerEPPvPi"]
    pub fn google_protobuf_io_CodedOutputStream_GetDirectBufferPointer(
        this: *mut google_protobuf_io_CodedOutputStream,
        data: *mut *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream8WriteRawEPKvi"]
    pub fn google_protobuf_io_CodedOutputStream_WriteRaw(
        this: *mut google_protobuf_io_CodedOutputStream,
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream20WriteRawMaybeAliasedEPKvi"]
    pub fn google_protobuf_io_CodedOutputStream_WriteRawMaybeAliased(
        this: *mut google_protobuf_io_CodedOutputStream,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream15WriteRawToArrayEPKviPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteRawToArray(
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream11WriteStringERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE"]
    pub fn google_protobuf_io_CodedOutputStream_WriteString(
        this: *mut google_protobuf_io_CodedOutputStream,
        str: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream18WriteStringToArrayERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteStringToArray(
        str: *const std_string,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream26WriteStringWithSizeToArrayERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteStringWithSizeToArray(
        str: *const std_string,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream14EnableAliasingEb"]
    pub fn google_protobuf_io_CodedOutputStream_EnableAliasing(
        this: *mut google_protobuf_io_CodedOutputStream,
        enabled: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream19WriteLittleEndian32Ej"]
    pub fn google_protobuf_io_CodedOutputStream_WriteLittleEndian32(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian32ToArrayEjPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteLittleEndian32ToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream19WriteLittleEndian64Ey"]
    pub fn google_protobuf_io_CodedOutputStream_WriteLittleEndian64(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian64ToArrayEyPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteLittleEndian64ToArray(
        value: google_protobuf_uint64,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream13WriteVarint32Ej"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint32(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream20WriteVarint32ToArrayEjPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint32ToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream13WriteVarint64Ey"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint64(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream20WriteVarint64ToArrayEyPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint64ToArray(
        value: google_protobuf_uint64,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream25WriteVarint32SignExtendedEi"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint32SignExtended(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_int32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream32WriteVarint32SignExtendedToArrayEiPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteVarint32SignExtendedToArray(
        value: google_protobuf_int32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream8WriteTagEj"]
    pub fn google_protobuf_io_CodedOutputStream_WriteTag(
        this: *mut google_protobuf_io_CodedOutputStream,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream15WriteTagToArrayEjPh"]
    pub fn google_protobuf_io_CodedOutputStream_WriteTagToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream12VarintSize32Ej"]
    pub fn google_protobuf_io_CodedOutputStream_VarintSize32(
        value: google_protobuf_uint32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream12VarintSize64Ey"]
    pub fn google_protobuf_io_CodedOutputStream_VarintSize64(
        value: google_protobuf_uint64,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStream24VarintSize32SignExtendedEi"]
    pub fn google_protobuf_io_CodedOutputStream_VarintSize32SignExtended(
        value: google_protobuf_int32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStreamC1EPNS1_20ZeroCopyOutputStreamE"]
    pub fn google_protobuf_io_CodedOutputStream_CodedOutputStream(
        this: *mut google_protobuf_io_CodedOutputStream,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStreamC1EPNS1_20ZeroCopyOutputStreamEb"]
    pub fn google_protobuf_io_CodedOutputStream_CodedOutputStream1(
        this: *mut google_protobuf_io_CodedOutputStream,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
        do_eager_refresh: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io17CodedOutputStreamD1Ev"]
    pub fn google_protobuf_io_CodedOutputStream_CodedOutputStream_destructor(
        this: *mut google_protobuf_io_CodedOutputStream,
    );
}
impl google_protobuf_io_CodedOutputStream {
    #[inline]
    pub unsafe fn Trim(&mut self) {
        google_protobuf_io_CodedOutputStream_Trim(self)
    }
    #[inline]
    pub unsafe fn Skip(&mut self, count: ::std::os::raw::c_int) -> bool {
        google_protobuf_io_CodedOutputStream_Skip(self, count)
    }
    #[inline]
    pub unsafe fn GetDirectBufferPointer(
        &mut self,
        data: *mut *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_io_CodedOutputStream_GetDirectBufferPointer(self, data, size)
    }
    #[inline]
    pub unsafe fn WriteRaw(
        &mut self,
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) {
        google_protobuf_io_CodedOutputStream_WriteRaw(self, buffer, size)
    }
    #[inline]
    pub unsafe fn WriteRawMaybeAliased(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) {
        google_protobuf_io_CodedOutputStream_WriteRawMaybeAliased(self, data, size)
    }
    #[inline]
    pub unsafe fn WriteRawToArray(
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteRawToArray(buffer, size, target)
    }
    #[inline]
    pub unsafe fn WriteString(&mut self, str: *const std_string) {
        google_protobuf_io_CodedOutputStream_WriteString(self, str)
    }
    #[inline]
    pub unsafe fn WriteStringToArray(
        str: *const std_string,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteStringToArray(str, target)
    }
    #[inline]
    pub unsafe fn WriteStringWithSizeToArray(
        str: *const std_string,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteStringWithSizeToArray(str, target)
    }
    #[inline]
    pub unsafe fn EnableAliasing(&mut self, enabled: bool) {
        google_protobuf_io_CodedOutputStream_EnableAliasing(self, enabled)
    }
    #[inline]
    pub unsafe fn WriteLittleEndian32(&mut self, value: google_protobuf_uint32) {
        google_protobuf_io_CodedOutputStream_WriteLittleEndian32(self, value)
    }
    #[inline]
    pub unsafe fn WriteLittleEndian32ToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteLittleEndian32ToArray(value, target)
    }
    #[inline]
    pub unsafe fn WriteLittleEndian64(&mut self, value: google_protobuf_uint64) {
        google_protobuf_io_CodedOutputStream_WriteLittleEndian64(self, value)
    }
    #[inline]
    pub unsafe fn WriteLittleEndian64ToArray(
        value: google_protobuf_uint64,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteLittleEndian64ToArray(value, target)
    }
    #[inline]
    pub unsafe fn WriteVarint32(&mut self, value: google_protobuf_uint32) {
        google_protobuf_io_CodedOutputStream_WriteVarint32(self, value)
    }
    #[inline]
    pub unsafe fn WriteVarint32ToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteVarint32ToArray(value, target)
    }
    #[inline]
    pub unsafe fn WriteVarint64(&mut self, value: google_protobuf_uint64) {
        google_protobuf_io_CodedOutputStream_WriteVarint64(self, value)
    }
    #[inline]
    pub unsafe fn WriteVarint64ToArray(
        value: google_protobuf_uint64,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteVarint64ToArray(value, target)
    }
    #[inline]
    pub unsafe fn WriteVarint32SignExtended(&mut self, value: google_protobuf_int32) {
        google_protobuf_io_CodedOutputStream_WriteVarint32SignExtended(self, value)
    }
    #[inline]
    pub unsafe fn WriteVarint32SignExtendedToArray(
        value: google_protobuf_int32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteVarint32SignExtendedToArray(value, target)
    }
    #[inline]
    pub unsafe fn WriteTag(&mut self, value: google_protobuf_uint32) {
        google_protobuf_io_CodedOutputStream_WriteTag(self, value)
    }
    #[inline]
    pub unsafe fn WriteTagToArray(
        value: google_protobuf_uint32,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_io_CodedOutputStream_WriteTagToArray(value, target)
    }
    #[inline]
    pub unsafe fn VarintSize32(value: google_protobuf_uint32) -> usize {
        google_protobuf_io_CodedOutputStream_VarintSize32(value)
    }
    #[inline]
    pub unsafe fn VarintSize64(value: google_protobuf_uint64) -> usize {
        google_protobuf_io_CodedOutputStream_VarintSize64(value)
    }
    #[inline]
    pub unsafe fn VarintSize32SignExtended(value: google_protobuf_int32) -> usize {
        google_protobuf_io_CodedOutputStream_VarintSize32SignExtended(value)
    }
    #[inline]
    pub unsafe fn new(output: *mut google_protobuf_io_ZeroCopyOutputStream) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_io_CodedOutputStream_CodedOutputStream(&mut __bindgen_tmp, output);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
        do_eager_refresh: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_io_CodedOutputStream_CodedOutputStream1(
            &mut __bindgen_tmp,
            output,
            do_eager_refresh,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        google_protobuf_io_CodedOutputStream_CodedOutputStream_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static google_protobuf_io_CodedOutputStream_StaticVarintSize32_value: usize;
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[repr(C)]
pub struct google_protobuf_io_ZeroCopyInputStream__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_io_ZeroCopyInputStream {
    pub vtable_: *const google_protobuf_io_ZeroCopyInputStream__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_google_protobuf_io_ZeroCopyInputStream() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_io_ZeroCopyInputStream>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_io_ZeroCopyInputStream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_io_ZeroCopyInputStream>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_io_ZeroCopyInputStream)
        )
    );
}
#[repr(C)]
pub struct google_protobuf_io_ZeroCopyOutputStream__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_io_ZeroCopyOutputStream {
    pub vtable_: *const google_protobuf_io_ZeroCopyOutputStream__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_google_protobuf_io_ZeroCopyOutputStream() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_io_ZeroCopyOutputStream>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_io_ZeroCopyOutputStream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_io_ZeroCopyOutputStream>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_io_ZeroCopyOutputStream)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf2io20ZeroCopyOutputStream15WriteAliasedRawEPKvi"]
    pub fn google_protobuf_io_ZeroCopyOutputStream_WriteAliasedRaw(
        this: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_Arena {
    pub impl_: google_protobuf_internal_ArenaImpl,
    pub on_arena_allocation_: ::std::option::Option<
        unsafe extern "C" fn(
            allocated_type: *const std_type_info,
            alloc_size: google_protobuf_uint64,
            cookie: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_arena_reset_: ::std::option::Option<
        unsafe extern "C" fn(
            arena: *mut google_protobuf_Arena,
            cookie: *mut ::std::os::raw::c_void,
            space_used: google_protobuf_uint64,
        ),
    >,
    pub on_arena_destruction_: ::std::option::Option<
        unsafe extern "C" fn(
            arena: *mut google_protobuf_Arena,
            cookie: *mut ::std::os::raw::c_void,
            space_used: google_protobuf_uint64,
        ),
    >,
    pub hooks_cookie_: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Arena_InternalHelper {
    pub _address: u8,
}
pub type google_protobuf_Arena_InternalHelper_is_destructor_skippable = u8;
pub type google_protobuf_Arena_InternalHelper_is_arena_constructable = u8;
pub type google_protobuf_Arena_InternalHelper_has_get_arena = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Arena_is_arena_constructable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Arena_is_destructor_skippable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Arena_has_get_arena {
    pub _address: u8,
}
pub const google_protobuf_Arena_kBlockOverhead: usize = 96;
#[test]
fn bindgen_test_layout_google_protobuf_Arena() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Arena>(),
        120usize,
        concat!("Size of: ", stringify!(google_protobuf_Arena))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Arena>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_Arena))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<google_protobuf_Arena>())).impl_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Arena),
            "::",
            stringify!(impl_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Arena>())).on_arena_allocation_ as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Arena),
            "::",
            stringify!(on_arena_allocation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Arena>())).on_arena_reset_ as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Arena),
            "::",
            stringify!(on_arena_reset_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Arena>())).on_arena_destruction_ as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Arena),
            "::",
            stringify!(on_arena_destruction_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Arena>())).hooks_cookie_ as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Arena),
            "::",
            stringify!(hooks_cookie_)
        )
    );
}
#[repr(C)]
pub struct google_protobuf_MessageLite__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_MessageLite {
    pub vtable_: *const google_protobuf_MessageLite__bindgen_vtable,
}
pub const google_protobuf_MessageLite_ParseFlags_kMerge: google_protobuf_MessageLite_ParseFlags = 0;
pub const google_protobuf_MessageLite_ParseFlags_kParse: google_protobuf_MessageLite_ParseFlags = 1;
pub const google_protobuf_MessageLite_ParseFlags_kMergePartial:
    google_protobuf_MessageLite_ParseFlags = 2;
pub const google_protobuf_MessageLite_ParseFlags_kParsePartial:
    google_protobuf_MessageLite_ParseFlags = 3;
pub const google_protobuf_MessageLite_ParseFlags_kMergeWithAliasing:
    google_protobuf_MessageLite_ParseFlags = 4;
pub const google_protobuf_MessageLite_ParseFlags_kParseWithAliasing:
    google_protobuf_MessageLite_ParseFlags = 5;
pub const google_protobuf_MessageLite_ParseFlags_kMergePartialWithAliasing:
    google_protobuf_MessageLite_ParseFlags = 6;
pub const google_protobuf_MessageLite_ParseFlags_kParsePartialWithAliasing:
    google_protobuf_MessageLite_ParseFlags = 7;
pub type google_protobuf_MessageLite_ParseFlags = u32;
#[test]
fn bindgen_test_layout_google_protobuf_MessageLite() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_MessageLite>(),
        8usize,
        concat!("Size of: ", stringify!(google_protobuf_MessageLite))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_MessageLite>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_MessageLite))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite11DebugStringEv"]
    pub fn google_protobuf_MessageLite_DebugString(
        this: *const google_protobuf_MessageLite,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite20ParseFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_MessageLite_ParseFromCodedStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite27ParsePartialFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_MessageLite_ParsePartialFromCodedStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite23ParseFromZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamE"]
    pub fn google_protobuf_MessageLite_ParseFromZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite30ParsePartialFromZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamE"]
    pub fn google_protobuf_MessageLite_ParsePartialFromZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite23ParseFromFileDescriptorEi"]
    pub fn google_protobuf_MessageLite_ParseFromFileDescriptor(
        this: *mut google_protobuf_MessageLite,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite30ParsePartialFromFileDescriptorEi"]
    pub fn google_protobuf_MessageLite_ParsePartialFromFileDescriptor(
        this: *mut google_protobuf_MessageLite,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite16ParseFromIstreamEPNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE"]
    pub fn google_protobuf_MessageLite_ParseFromIstream(
        this: *mut google_protobuf_MessageLite,
        input: *mut std_istream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite23ParsePartialFromIstreamEPNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE"]
    pub fn google_protobuf_MessageLite_ParsePartialFromIstream(
        this: *mut google_protobuf_MessageLite,
        input: *mut std_istream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite37MergePartialFromBoundedZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamEi"]
    pub fn google_protobuf_MessageLite_MergePartialFromBoundedZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite30MergeFromBoundedZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamEi"]
    pub fn google_protobuf_MessageLite_MergeFromBoundedZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite30ParseFromBoundedZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamEi"]
    pub fn google_protobuf_MessageLite_ParseFromBoundedZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite37ParsePartialFromBoundedZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamEi"]
    pub fn google_protobuf_MessageLite_ParsePartialFromBoundedZeroCopyStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite15ParseFromStringERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_ParseFromString(
        this: *mut google_protobuf_MessageLite,
        data: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite22ParsePartialFromStringERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_ParsePartialFromString(
        this: *mut google_protobuf_MessageLite,
        data: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite14ParseFromArrayEPKvi"]
    pub fn google_protobuf_MessageLite_ParseFromArray(
        this: *mut google_protobuf_MessageLite,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite21ParsePartialFromArrayEPKvi"]
    pub fn google_protobuf_MessageLite_ParsePartialFromArray(
        this: *mut google_protobuf_MessageLite,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite20MergeFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_MessageLite_MergeFromCodedStream(
        this: *mut google_protobuf_MessageLite,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf11MessageLite15MergeFromStringERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_MergeFromString(
        this: *mut google_protobuf_MessageLite,
        data: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite22SerializeToCodedStreamEPNS0_2io17CodedOutputStreamE"]
    pub fn google_protobuf_MessageLite_SerializeToCodedStream(
        this: *const google_protobuf_MessageLite,
        output: *mut google_protobuf_io_CodedOutputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite29SerializePartialToCodedStreamEPNS0_2io17CodedOutputStreamE"]
    pub fn google_protobuf_MessageLite_SerializePartialToCodedStream(
        this: *const google_protobuf_MessageLite,
        output: *mut google_protobuf_io_CodedOutputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite25SerializeToZeroCopyStreamEPNS0_2io20ZeroCopyOutputStreamE"]
    pub fn google_protobuf_MessageLite_SerializeToZeroCopyStream(
        this: *const google_protobuf_MessageLite,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite32SerializePartialToZeroCopyStreamEPNS0_2io20ZeroCopyOutputStreamE"]
    pub fn google_protobuf_MessageLite_SerializePartialToZeroCopyStream(
        this: *const google_protobuf_MessageLite,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite17SerializeToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_SerializeToString(
        this: *const google_protobuf_MessageLite,
        output: *mut std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite24SerializePartialToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_SerializePartialToString(
        this: *const google_protobuf_MessageLite,
        output: *mut std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite16SerializeToArrayEPvi"]
    pub fn google_protobuf_MessageLite_SerializeToArray(
        this: *const google_protobuf_MessageLite,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite23SerializePartialToArrayEPvi"]
    pub fn google_protobuf_MessageLite_SerializePartialToArray(
        this: *const google_protobuf_MessageLite,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite17SerializeAsStringEv"]
    pub fn google_protobuf_MessageLite_SerializeAsString(
        this: *const google_protobuf_MessageLite,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite24SerializePartialAsStringEv"]
    pub fn google_protobuf_MessageLite_SerializePartialAsString(
        this: *const google_protobuf_MessageLite,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite25SerializeToFileDescriptorEi"]
    pub fn google_protobuf_MessageLite_SerializeToFileDescriptor(
        this: *const google_protobuf_MessageLite,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite32SerializePartialToFileDescriptorEi"]
    pub fn google_protobuf_MessageLite_SerializePartialToFileDescriptor(
        this: *const google_protobuf_MessageLite,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite18SerializeToOstreamEPNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE"]
    pub fn google_protobuf_MessageLite_SerializeToOstream(
        this: *const google_protobuf_MessageLite,
        output: *mut std_ostream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite25SerializePartialToOstreamEPNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE"]
    pub fn google_protobuf_MessageLite_SerializePartialToOstream(
        this: *const google_protobuf_MessageLite,
        output: *mut std_ostream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite14AppendToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_AppendToString(
        this: *const google_protobuf_MessageLite,
        output: *mut std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite21AppendPartialToStringEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_MessageLite_AppendPartialToString(
        this: *const google_protobuf_MessageLite,
        output: *mut std_string,
    ) -> bool;
}
impl google_protobuf_MessageLite {
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_MessageLite_DebugString(self)
    }
    #[inline]
    pub unsafe fn ParseFromCodedStream(
        &mut self,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool {
        google_protobuf_MessageLite_ParseFromCodedStream(self, input)
    }
    #[inline]
    pub unsafe fn ParsePartialFromCodedStream(
        &mut self,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool {
        google_protobuf_MessageLite_ParsePartialFromCodedStream(self, input)
    }
    #[inline]
    pub unsafe fn ParseFromZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool {
        google_protobuf_MessageLite_ParseFromZeroCopyStream(self, input)
    }
    #[inline]
    pub unsafe fn ParsePartialFromZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool {
        google_protobuf_MessageLite_ParsePartialFromZeroCopyStream(self, input)
    }
    #[inline]
    pub unsafe fn ParseFromFileDescriptor(
        &mut self,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParseFromFileDescriptor(self, file_descriptor)
    }
    #[inline]
    pub unsafe fn ParsePartialFromFileDescriptor(
        &mut self,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParsePartialFromFileDescriptor(self, file_descriptor)
    }
    #[inline]
    pub unsafe fn ParseFromIstream(&mut self, input: *mut std_istream) -> bool {
        google_protobuf_MessageLite_ParseFromIstream(self, input)
    }
    #[inline]
    pub unsafe fn ParsePartialFromIstream(&mut self, input: *mut std_istream) -> bool {
        google_protobuf_MessageLite_ParsePartialFromIstream(self, input)
    }
    #[inline]
    pub unsafe fn MergePartialFromBoundedZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_MergePartialFromBoundedZeroCopyStream(self, input, size)
    }
    #[inline]
    pub unsafe fn MergeFromBoundedZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_MergeFromBoundedZeroCopyStream(self, input, size)
    }
    #[inline]
    pub unsafe fn ParseFromBoundedZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParseFromBoundedZeroCopyStream(self, input, size)
    }
    #[inline]
    pub unsafe fn ParsePartialFromBoundedZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParsePartialFromBoundedZeroCopyStream(self, input, size)
    }
    #[inline]
    pub unsafe fn ParseFromString(&mut self, data: *const std_string) -> bool {
        google_protobuf_MessageLite_ParseFromString(self, data)
    }
    #[inline]
    pub unsafe fn ParsePartialFromString(&mut self, data: *const std_string) -> bool {
        google_protobuf_MessageLite_ParsePartialFromString(self, data)
    }
    #[inline]
    pub unsafe fn ParseFromArray(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParseFromArray(self, data, size)
    }
    #[inline]
    pub unsafe fn ParsePartialFromArray(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_ParsePartialFromArray(self, data, size)
    }
    #[inline]
    pub unsafe fn MergeFromCodedStream(
        &mut self,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool {
        google_protobuf_MessageLite_MergeFromCodedStream(self, input)
    }
    #[inline]
    pub unsafe fn MergeFromString(&mut self, data: *const std_string) -> bool {
        google_protobuf_MessageLite_MergeFromString(self, data)
    }
    #[inline]
    pub unsafe fn SerializeToCodedStream(
        &self,
        output: *mut google_protobuf_io_CodedOutputStream,
    ) -> bool {
        google_protobuf_MessageLite_SerializeToCodedStream(self, output)
    }
    #[inline]
    pub unsafe fn SerializePartialToCodedStream(
        &self,
        output: *mut google_protobuf_io_CodedOutputStream,
    ) -> bool {
        google_protobuf_MessageLite_SerializePartialToCodedStream(self, output)
    }
    #[inline]
    pub unsafe fn SerializeToZeroCopyStream(
        &self,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
    ) -> bool {
        google_protobuf_MessageLite_SerializeToZeroCopyStream(self, output)
    }
    #[inline]
    pub unsafe fn SerializePartialToZeroCopyStream(
        &self,
        output: *mut google_protobuf_io_ZeroCopyOutputStream,
    ) -> bool {
        google_protobuf_MessageLite_SerializePartialToZeroCopyStream(self, output)
    }
    #[inline]
    pub unsafe fn SerializeToString(&self, output: *mut std_string) -> bool {
        google_protobuf_MessageLite_SerializeToString(self, output)
    }
    #[inline]
    pub unsafe fn SerializePartialToString(&self, output: *mut std_string) -> bool {
        google_protobuf_MessageLite_SerializePartialToString(self, output)
    }
    #[inline]
    pub unsafe fn SerializeToArray(
        &self,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_SerializeToArray(self, data, size)
    }
    #[inline]
    pub unsafe fn SerializePartialToArray(
        &self,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_SerializePartialToArray(self, data, size)
    }
    #[inline]
    pub unsafe fn SerializeAsString(&self) -> std_string {
        google_protobuf_MessageLite_SerializeAsString(self)
    }
    #[inline]
    pub unsafe fn SerializePartialAsString(&self) -> std_string {
        google_protobuf_MessageLite_SerializePartialAsString(self)
    }
    #[inline]
    pub unsafe fn SerializeToFileDescriptor(&self, file_descriptor: ::std::os::raw::c_int) -> bool {
        google_protobuf_MessageLite_SerializeToFileDescriptor(self, file_descriptor)
    }
    #[inline]
    pub unsafe fn SerializePartialToFileDescriptor(
        &self,
        file_descriptor: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_MessageLite_SerializePartialToFileDescriptor(self, file_descriptor)
    }
    #[inline]
    pub unsafe fn SerializeToOstream(&self, output: *mut std_ostream) -> bool {
        google_protobuf_MessageLite_SerializeToOstream(self, output)
    }
    #[inline]
    pub unsafe fn SerializePartialToOstream(&self, output: *mut std_ostream) -> bool {
        google_protobuf_MessageLite_SerializePartialToOstream(self, output)
    }
    #[inline]
    pub unsafe fn AppendToString(&self, output: *mut std_string) -> bool {
        google_protobuf_MessageLite_AppendToString(self, output)
    }
    #[inline]
    pub unsafe fn AppendPartialToString(&self, output: *mut std_string) -> bool {
        google_protobuf_MessageLite_AppendPartialToString(self, output)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite3NewEPNS0_5ArenaE"]
    pub fn google_protobuf_MessageLite_New1(
        this: *mut ::std::os::raw::c_void,
        arena: *mut google_protobuf_Arena,
    ) -> *mut google_protobuf_MessageLite;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite25InitializationErrorStringEv"]
    pub fn google_protobuf_MessageLite_InitializationErrorString(
        this: *mut ::std::os::raw::c_void,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite24SerializeWithCachedSizesEPNS0_2io17CodedOutputStreamE"]
    pub fn google_protobuf_MessageLite_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite31SerializeWithCachedSizesToArrayEPh"]
    pub fn google_protobuf_MessageLite_SerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf11MessageLite39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn google_protobuf_MessageLite_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_RepeatedField {
    pub current_size_: ::std::os::raw::c_int,
    pub total_size_: ::std::os::raw::c_int,
    pub arena_or_elements_: *mut ::std::os::raw::c_void,
}
pub type google_protobuf_RepeatedField_iterator<Element> = *mut Element;
pub type google_protobuf_RepeatedField_const_iterator<Element> = *const Element;
pub type google_protobuf_RepeatedField_value_type<Element> = Element;
pub type google_protobuf_RepeatedField_reference<Element> =
    *mut google_protobuf_RepeatedField_value_type<Element>;
pub type google_protobuf_RepeatedField_const_reference<Element> =
    *const google_protobuf_RepeatedField_value_type<Element>;
pub type google_protobuf_RepeatedField_pointer<Element> =
    *mut google_protobuf_RepeatedField_value_type<Element>;
pub type google_protobuf_RepeatedField_const_pointer<Element> =
    *const google_protobuf_RepeatedField_value_type<Element>;
pub type google_protobuf_RepeatedField_size_type = ::std::os::raw::c_int;
pub type google_protobuf_RepeatedField_difference_type = isize;
pub type google_protobuf_RepeatedField_const_reverse_iterator<Element> =
    std_reverse_iterator<google_protobuf_RepeatedField_const_iterator<Element>>;
pub type google_protobuf_RepeatedField_reverse_iterator<Element> =
    std_reverse_iterator<google_protobuf_RepeatedField_iterator<Element>>;
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_RepeatedField_Rep<Element> {
    pub arena: *mut google_protobuf_Arena,
    pub elements: [Element; 1usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Element>>,
}
pub type google_protobuf_RepeatedField_InternalArenaConstructable_ = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_RepeatedPtrField {
    pub _base: google_protobuf_internal_RepeatedPtrFieldBase,
}
pub type google_protobuf_RepeatedPtrField_iterator = google_protobuf_internal_RepeatedPtrIterator;
pub type google_protobuf_RepeatedPtrField_const_iterator =
    google_protobuf_internal_RepeatedPtrIterator;
pub type google_protobuf_RepeatedPtrField_value_type<Element> = Element;
pub type google_protobuf_RepeatedPtrField_reference<Element> =
    *mut google_protobuf_RepeatedPtrField_value_type<Element>;
pub type google_protobuf_RepeatedPtrField_const_reference<Element> =
    *const google_protobuf_RepeatedPtrField_value_type<Element>;
pub type google_protobuf_RepeatedPtrField_pointer<Element> =
    *mut google_protobuf_RepeatedPtrField_value_type<Element>;
pub type google_protobuf_RepeatedPtrField_const_pointer<Element> =
    *const google_protobuf_RepeatedPtrField_value_type<Element>;
pub type google_protobuf_RepeatedPtrField_size_type = ::std::os::raw::c_int;
pub type google_protobuf_RepeatedPtrField_difference_type = isize;
pub type google_protobuf_RepeatedPtrField_const_reverse_iterator =
    std_reverse_iterator<google_protobuf_RepeatedPtrField_const_iterator>;
pub type google_protobuf_RepeatedPtrField_reverse_iterator =
    std_reverse_iterator<google_protobuf_RepeatedPtrField_iterator>;
pub type google_protobuf_RepeatedPtrField_pointer_iterator =
    google_protobuf_internal_RepeatedPtrOverPtrsIterator<VoidPtr>;
pub type google_protobuf_RepeatedPtrField_const_pointer_iterator =
    google_protobuf_internal_RepeatedPtrOverPtrsIterator<VoidPtr>;
pub type google_protobuf_RepeatedPtrField_InternalArenaConstructable_ = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_RepeatedPtrField_TypeHandler {
    pub _address: u8,
}
#[repr(C)]
pub struct google_protobuf_UnknownFieldSet {
    pub fields_: std_vector,
}
#[test]
fn bindgen_test_layout_google_protobuf_UnknownFieldSet() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_UnknownFieldSet>(),
        24usize,
        concat!("Size of: ", stringify!(google_protobuf_UnknownFieldSet))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_UnknownFieldSet>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_UnknownFieldSet))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownFieldSet>())).fields_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownFieldSet),
            "::",
            stringify!(fields_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet18ClearAndFreeMemoryEv"]
    pub fn google_protobuf_UnknownFieldSet_ClearAndFreeMemory(
        this: *mut google_protobuf_UnknownFieldSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet9MergeFromERKS1_"]
    pub fn google_protobuf_UnknownFieldSet_MergeFrom(
        this: *mut google_protobuf_UnknownFieldSet,
        other: *const google_protobuf_UnknownFieldSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet19MergeFromAndDestroyEPS1_"]
    pub fn google_protobuf_UnknownFieldSet_MergeFromAndDestroy(
        this: *mut google_protobuf_UnknownFieldSet,
        other: *mut google_protobuf_UnknownFieldSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet22MergeToInternalMetdataERKS1_PNS0_8internal25InternalMetadataWithArenaE"]
    pub fn google_protobuf_UnknownFieldSet_MergeToInternalMetdata(
        other: *const google_protobuf_UnknownFieldSet,
        metadata: *mut google_protobuf_internal_InternalMetadataWithArena,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15UnknownFieldSet26SpaceUsedExcludingSelfLongEv"]
    pub fn google_protobuf_UnknownFieldSet_SpaceUsedExcludingSelfLong(
        this: *const google_protobuf_UnknownFieldSet,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15UnknownFieldSet13SpaceUsedLongEv"]
    pub fn google_protobuf_UnknownFieldSet_SpaceUsedLong(
        this: *const google_protobuf_UnknownFieldSet,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet9AddVarintEiy"]
    pub fn google_protobuf_UnknownFieldSet_AddVarint(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet10AddFixed32Eij"]
    pub fn google_protobuf_UnknownFieldSet_AddFixed32(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet10AddFixed64Eiy"]
    pub fn google_protobuf_UnknownFieldSet_AddFixed64(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet18AddLengthDelimitedEiRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_UnknownFieldSet_AddLengthDelimited(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet18AddLengthDelimitedEi"]
    pub fn google_protobuf_UnknownFieldSet_AddLengthDelimited1(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet8AddGroupEi"]
    pub fn google_protobuf_UnknownFieldSet_AddGroup(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
    ) -> *mut google_protobuf_UnknownFieldSet;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet8AddFieldERKNS0_12UnknownFieldE"]
    pub fn google_protobuf_UnknownFieldSet_AddField(
        this: *mut google_protobuf_UnknownFieldSet,
        field: *const google_protobuf_UnknownField,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet14DeleteSubrangeEii"]
    pub fn google_protobuf_UnknownFieldSet_DeleteSubrange(
        this: *mut google_protobuf_UnknownFieldSet,
        start: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet14DeleteByNumberEi"]
    pub fn google_protobuf_UnknownFieldSet_DeleteByNumber(
        this: *mut google_protobuf_UnknownFieldSet,
        number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet20MergeFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_UnknownFieldSet_MergeFromCodedStream(
        this: *mut google_protobuf_UnknownFieldSet,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet20ParseFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_UnknownFieldSet_ParseFromCodedStream(
        this: *mut google_protobuf_UnknownFieldSet,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet23ParseFromZeroCopyStreamEPNS0_2io19ZeroCopyInputStreamE"]
    pub fn google_protobuf_UnknownFieldSet_ParseFromZeroCopyStream(
        this: *mut google_protobuf_UnknownFieldSet,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet14ParseFromArrayEPKvi"]
    pub fn google_protobuf_UnknownFieldSet_ParseFromArray(
        this: *mut google_protobuf_UnknownFieldSet,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSet16default_instanceEv"]
    pub fn google_protobuf_UnknownFieldSet_default_instance(
    ) -> *const google_protobuf_UnknownFieldSet;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSetC1Ev"]
    pub fn google_protobuf_UnknownFieldSet_UnknownFieldSet(
        this: *mut google_protobuf_UnknownFieldSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15UnknownFieldSetD1Ev"]
    pub fn google_protobuf_UnknownFieldSet_UnknownFieldSet_destructor(
        this: *mut google_protobuf_UnknownFieldSet,
    );
}
impl google_protobuf_UnknownFieldSet {
    #[inline]
    pub unsafe fn ClearAndFreeMemory(&mut self) {
        google_protobuf_UnknownFieldSet_ClearAndFreeMemory(self)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, other: *const google_protobuf_UnknownFieldSet) {
        google_protobuf_UnknownFieldSet_MergeFrom(self, other)
    }
    #[inline]
    pub unsafe fn MergeFromAndDestroy(&mut self, other: *mut google_protobuf_UnknownFieldSet) {
        google_protobuf_UnknownFieldSet_MergeFromAndDestroy(self, other)
    }
    #[inline]
    pub unsafe fn MergeToInternalMetdata(
        other: *const google_protobuf_UnknownFieldSet,
        metadata: *mut google_protobuf_internal_InternalMetadataWithArena,
    ) {
        google_protobuf_UnknownFieldSet_MergeToInternalMetdata(other, metadata)
    }
    #[inline]
    pub unsafe fn SpaceUsedExcludingSelfLong(&self) -> usize {
        google_protobuf_UnknownFieldSet_SpaceUsedExcludingSelfLong(self)
    }
    #[inline]
    pub unsafe fn SpaceUsedLong(&self) -> usize {
        google_protobuf_UnknownFieldSet_SpaceUsedLong(self)
    }
    #[inline]
    pub unsafe fn AddVarint(
        &mut self,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    ) {
        google_protobuf_UnknownFieldSet_AddVarint(self, number, value)
    }
    #[inline]
    pub unsafe fn AddFixed32(
        &mut self,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint32,
    ) {
        google_protobuf_UnknownFieldSet_AddFixed32(self, number, value)
    }
    #[inline]
    pub unsafe fn AddFixed64(
        &mut self,
        number: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    ) {
        google_protobuf_UnknownFieldSet_AddFixed64(self, number, value)
    }
    #[inline]
    pub unsafe fn AddLengthDelimited(
        &mut self,
        number: ::std::os::raw::c_int,
        value: *const std_string,
    ) {
        google_protobuf_UnknownFieldSet_AddLengthDelimited(self, number, value)
    }
    #[inline]
    pub unsafe fn AddLengthDelimited1(&mut self, number: ::std::os::raw::c_int) -> *mut std_string {
        google_protobuf_UnknownFieldSet_AddLengthDelimited1(self, number)
    }
    #[inline]
    pub unsafe fn AddGroup(
        &mut self,
        number: ::std::os::raw::c_int,
    ) -> *mut google_protobuf_UnknownFieldSet {
        google_protobuf_UnknownFieldSet_AddGroup(self, number)
    }
    #[inline]
    pub unsafe fn AddField(&mut self, field: *const google_protobuf_UnknownField) {
        google_protobuf_UnknownFieldSet_AddField(self, field)
    }
    #[inline]
    pub unsafe fn DeleteSubrange(
        &mut self,
        start: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
    ) {
        google_protobuf_UnknownFieldSet_DeleteSubrange(self, start, num)
    }
    #[inline]
    pub unsafe fn DeleteByNumber(&mut self, number: ::std::os::raw::c_int) {
        google_protobuf_UnknownFieldSet_DeleteByNumber(self, number)
    }
    #[inline]
    pub unsafe fn MergeFromCodedStream(
        &mut self,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool {
        google_protobuf_UnknownFieldSet_MergeFromCodedStream(self, input)
    }
    #[inline]
    pub unsafe fn ParseFromCodedStream(
        &mut self,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool {
        google_protobuf_UnknownFieldSet_ParseFromCodedStream(self, input)
    }
    #[inline]
    pub unsafe fn ParseFromZeroCopyStream(
        &mut self,
        input: *mut google_protobuf_io_ZeroCopyInputStream,
    ) -> bool {
        google_protobuf_UnknownFieldSet_ParseFromZeroCopyStream(self, input)
    }
    #[inline]
    pub unsafe fn ParseFromArray(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_UnknownFieldSet_ParseFromArray(self, data, size)
    }
    #[inline]
    pub unsafe fn default_instance() -> *const google_protobuf_UnknownFieldSet {
        google_protobuf_UnknownFieldSet_default_instance()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_UnknownFieldSet_UnknownFieldSet(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        google_protobuf_UnknownFieldSet_UnknownFieldSet_destructor(self)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct google_protobuf_UnknownField {
    pub number_: google_protobuf_uint32,
    pub type_: google_protobuf_uint32,
    pub data_: google_protobuf_UnknownField__bindgen_ty_1,
}
pub const google_protobuf_UnknownField_Type_TYPE_VARINT: google_protobuf_UnknownField_Type = 0;
pub const google_protobuf_UnknownField_Type_TYPE_FIXED32: google_protobuf_UnknownField_Type = 1;
pub const google_protobuf_UnknownField_Type_TYPE_FIXED64: google_protobuf_UnknownField_Type = 2;
pub const google_protobuf_UnknownField_Type_TYPE_LENGTH_DELIMITED:
    google_protobuf_UnknownField_Type = 3;
pub const google_protobuf_UnknownField_Type_TYPE_GROUP: google_protobuf_UnknownField_Type = 4;
pub type google_protobuf_UnknownField_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union google_protobuf_UnknownField_LengthDelimited {
    pub string_value: *mut std_string,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_google_protobuf_UnknownField_LengthDelimited() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_UnknownField_LengthDelimited>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_UnknownField_LengthDelimited)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_UnknownField_LengthDelimited>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_UnknownField_LengthDelimited)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField_LengthDelimited>())).string_value
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField_LengthDelimited),
            "::",
            stringify!(string_value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union google_protobuf_UnknownField__bindgen_ty_1 {
    pub varint_: google_protobuf_uint64,
    pub fixed32_: google_protobuf_uint32,
    pub fixed64_: google_protobuf_uint64,
    pub length_delimited_: google_protobuf_UnknownField_LengthDelimited,
    pub group_: *mut google_protobuf_UnknownFieldSet,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_google_protobuf_UnknownField__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_UnknownField__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_UnknownField__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField__bindgen_ty_1>())).varint_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1),
            "::",
            stringify!(varint_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField__bindgen_ty_1>())).fixed32_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1),
            "::",
            stringify!(fixed32_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField__bindgen_ty_1>())).fixed64_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1),
            "::",
            stringify!(fixed64_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField__bindgen_ty_1>())).length_delimited_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1),
            "::",
            stringify!(length_delimited_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField__bindgen_ty_1>())).group_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField__bindgen_ty_1),
            "::",
            stringify!(group_)
        )
    );
}
#[test]
fn bindgen_test_layout_google_protobuf_UnknownField() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_UnknownField>(),
        16usize,
        concat!("Size of: ", stringify!(google_protobuf_UnknownField))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_UnknownField>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_UnknownField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField>())).number_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField),
            "::",
            stringify!(number_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField>())).type_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_UnknownField>())).data_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_UnknownField),
            "::",
            stringify!(data_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf12UnknownField29SerializeLengthDelimitedNoTagEPNS0_2io17CodedOutputStreamE"]
    pub fn google_protobuf_UnknownField_SerializeLengthDelimitedNoTag(
        this: *const google_protobuf_UnknownField,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf12UnknownField36SerializeLengthDelimitedNoTagToArrayEPh"]
    pub fn google_protobuf_UnknownField_SerializeLengthDelimitedNoTagToArray(
        this: *const google_protobuf_UnknownField,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf12UnknownField6DeleteEv"]
    pub fn google_protobuf_UnknownField_Delete(this: *mut google_protobuf_UnknownField);
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf12UnknownField8DeepCopyERKS1_"]
    pub fn google_protobuf_UnknownField_DeepCopy(
        this: *mut google_protobuf_UnknownField,
        other: *const google_protobuf_UnknownField,
    );
}
impl google_protobuf_UnknownField {
    #[inline]
    pub unsafe fn SerializeLengthDelimitedNoTag(
        &self,
        output: *mut google_protobuf_io_CodedOutputStream,
    ) {
        google_protobuf_UnknownField_SerializeLengthDelimitedNoTag(self, output)
    }
    #[inline]
    pub unsafe fn SerializeLengthDelimitedNoTagToArray(
        &self,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8 {
        google_protobuf_UnknownField_SerializeLengthDelimitedNoTagToArray(self, target)
    }
    #[inline]
    pub unsafe fn Delete(&mut self) {
        google_protobuf_UnknownField_Delete(self)
    }
    #[inline]
    pub unsafe fn DeepCopy(&mut self, other: *const google_protobuf_UnknownField) {
        google_protobuf_UnknownField_DeepCopy(self, other)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_DescriptorDatabase {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_DescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_DescriptorProto_ExtensionRange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FieldDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_OneofDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumValueDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_ServiceDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_MethodDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FileDescriptorProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_MessageOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FieldOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_OneofOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumValueOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_ExtensionRangeOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_ServiceOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_MethodOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FileOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_SourceCodeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FileDescriptorTables {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct google_protobuf_SourceLocation {
    pub start_line: ::std::os::raw::c_int,
    pub end_line: ::std::os::raw::c_int,
    pub start_column: ::std::os::raw::c_int,
    pub end_column: ::std::os::raw::c_int,
    pub leading_comments: std_string,
    pub trailing_comments: std_string,
    pub leading_detached_comments: std_vector,
}
#[test]
fn bindgen_test_layout_google_protobuf_SourceLocation() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_SourceLocation>(),
        88usize,
        concat!("Size of: ", stringify!(google_protobuf_SourceLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_SourceLocation>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_SourceLocation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).start_line as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(start_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).end_line as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(end_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).start_column as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(start_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).end_column as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(end_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).leading_comments as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(leading_comments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).trailing_comments as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(trailing_comments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_SourceLocation>())).leading_detached_comments
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_SourceLocation),
            "::",
            stringify!(leading_detached_comments)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_DebugStringOptions {
    pub include_comments: bool,
    pub elide_group_body: bool,
    pub elide_oneof_body: bool,
}
#[test]
fn bindgen_test_layout_google_protobuf_DebugStringOptions() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_DebugStringOptions>(),
        3usize,
        concat!("Size of: ", stringify!(google_protobuf_DebugStringOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_DebugStringOptions>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_DebugStringOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DebugStringOptions>())).include_comments
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DebugStringOptions),
            "::",
            stringify!(include_comments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DebugStringOptions>())).elide_group_body
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DebugStringOptions),
            "::",
            stringify!(elide_group_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DebugStringOptions>())).elide_oneof_body
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DebugStringOptions),
            "::",
            stringify!(elide_oneof_body)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Descriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub file_: *const google_protobuf_FileDescriptor,
    pub containing_type_: *const google_protobuf_Descriptor,
    pub options_: *const google_protobuf_MessageOptions,
    pub fields_: *mut google_protobuf_FieldDescriptor,
    pub oneof_decls_: *mut google_protobuf_OneofDescriptor,
    pub nested_types_: *mut google_protobuf_Descriptor,
    pub enum_types_: *mut google_protobuf_EnumDescriptor,
    pub extension_ranges_: *mut google_protobuf_Descriptor_ExtensionRange,
    pub extensions_: *mut google_protobuf_FieldDescriptor,
    pub reserved_ranges_: *mut google_protobuf_Descriptor_ReservedRange,
    pub reserved_names_: *mut *const std_string,
    pub field_count_: ::std::os::raw::c_int,
    pub oneof_decl_count_: ::std::os::raw::c_int,
    pub nested_type_count_: ::std::os::raw::c_int,
    pub enum_type_count_: ::std::os::raw::c_int,
    pub extension_range_count_: ::std::os::raw::c_int,
    pub extension_count_: ::std::os::raw::c_int,
    pub reserved_range_count_: ::std::os::raw::c_int,
    pub reserved_name_count_: ::std::os::raw::c_int,
    pub is_placeholder_: bool,
    pub is_unqualified_placeholder_: bool,
}
pub type google_protobuf_Descriptor_Proto = google_protobuf_DescriptorProto;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Descriptor_ExtensionRange {
    pub start: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub options_: *const google_protobuf_ExtensionRangeOptions,
}
pub type google_protobuf_Descriptor_ExtensionRange_Proto =
    google_protobuf_DescriptorProto_ExtensionRange;
pub type google_protobuf_Descriptor_ExtensionRange_OptionsType =
    google_protobuf_ExtensionRangeOptions;
#[test]
fn bindgen_test_layout_google_protobuf_Descriptor_ExtensionRange() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Descriptor_ExtensionRange>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_Descriptor_ExtensionRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Descriptor_ExtensionRange>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_Descriptor_ExtensionRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor_ExtensionRange>())).start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor_ExtensionRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor_ExtensionRange>())).end as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor_ExtensionRange),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor_ExtensionRange>())).options_
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor_ExtensionRange),
            "::",
            stringify!(options_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor14ExtensionRange6CopyToEPNS0_30DescriptorProto_ExtensionRangeE"]
    pub fn google_protobuf_Descriptor_ExtensionRange_CopyTo(
        this: *const google_protobuf_Descriptor_ExtensionRange,
        proto: *mut google_protobuf_DescriptorProto_ExtensionRange,
    );
}
impl google_protobuf_Descriptor_ExtensionRange {
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_DescriptorProto_ExtensionRange) {
        google_protobuf_Descriptor_ExtensionRange_CopyTo(self, proto)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Descriptor_ReservedRange {
    pub start: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_google_protobuf_Descriptor_ReservedRange() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Descriptor_ReservedRange>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_Descriptor_ReservedRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Descriptor_ReservedRange>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_Descriptor_ReservedRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor_ReservedRange>())).start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor_ReservedRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor_ReservedRange>())).end as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor_ReservedRange),
            "::",
            stringify!(end)
        )
    );
}
pub type google_protobuf_Descriptor_OptionsType = google_protobuf_MessageOptions;
#[test]
fn bindgen_test_layout_google_protobuf_Descriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Descriptor>(),
        144usize,
        concat!("Size of: ", stringify!(google_protobuf_Descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_Descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).full_name_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).file_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(file_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).containing_type_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(containing_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).options_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).fields_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(fields_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).oneof_decls_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(oneof_decls_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).nested_types_ as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(nested_types_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).enum_types_ as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(enum_types_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).extension_ranges_ as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(extension_ranges_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).extensions_ as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(extensions_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).reserved_ranges_ as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(reserved_ranges_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).reserved_names_ as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(reserved_names_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).field_count_ as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(field_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).oneof_decl_count_ as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(oneof_decl_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).nested_type_count_ as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(nested_type_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).enum_type_count_ as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(enum_type_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).extension_range_count_
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(extension_range_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).extension_count_ as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(extension_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).reserved_range_count_ as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(reserved_range_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).reserved_name_count_ as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(reserved_name_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).is_placeholder_ as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(is_placeholder_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Descriptor>())).is_unqualified_placeholder_
                as *const _ as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Descriptor),
            "::",
            stringify!(is_unqualified_placeholder_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor4nameEv"]
    pub fn google_protobuf_Descriptor_name(
        this: *const google_protobuf_Descriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor9full_nameEv"]
    pub fn google_protobuf_Descriptor_full_name(
        this: *const google_protobuf_Descriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor5indexEv"]
    pub fn google_protobuf_Descriptor_index(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor4fileEv"]
    pub fn google_protobuf_Descriptor_file(
        this: *const google_protobuf_Descriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15containing_typeEv"]
    pub fn google_protobuf_Descriptor_containing_type(
        this: *const google_protobuf_Descriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor7optionsEv"]
    pub fn google_protobuf_Descriptor_options(
        this: *const google_protobuf_Descriptor,
    ) -> *const google_protobuf_MessageOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor6CopyToEPNS0_15DescriptorProtoE"]
    pub fn google_protobuf_Descriptor_CopyTo(
        this: *const google_protobuf_Descriptor,
        proto: *mut google_protobuf_DescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor11DebugStringEv"]
    pub fn google_protobuf_Descriptor_DebugString(
        this: *const google_protobuf_Descriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_Descriptor_DebugStringWithOptions(
        this: *const google_protobuf_Descriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor14is_placeholderEv"]
    pub fn google_protobuf_Descriptor_is_placeholder(
        this: *const google_protobuf_Descriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor11field_countEv"]
    pub fn google_protobuf_Descriptor_field_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor5fieldEi"]
    pub fn google_protobuf_Descriptor_field(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor17FindFieldByNumberEi"]
    pub fn google_protobuf_Descriptor_FindFieldByNumber(
        this: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15FindFieldByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindFieldByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor24FindFieldByLowercaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindFieldByLowercaseName(
        this: *const google_protobuf_Descriptor,
        lowercase_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor24FindFieldByCamelcaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindFieldByCamelcaseName(
        this: *const google_protobuf_Descriptor,
        camelcase_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor16oneof_decl_countEv"]
    pub fn google_protobuf_Descriptor_oneof_decl_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor10oneof_declEi"]
    pub fn google_protobuf_Descriptor_oneof_decl(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_OneofDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15FindOneofByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindOneofByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_OneofDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor17nested_type_countEv"]
    pub fn google_protobuf_Descriptor_nested_type_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor11nested_typeEi"]
    pub fn google_protobuf_Descriptor_nested_type(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor20FindNestedTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindNestedTypeByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15enum_type_countEv"]
    pub fn google_protobuf_Descriptor_enum_type_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor9enum_typeEi"]
    pub fn google_protobuf_Descriptor_enum_type(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor18FindEnumTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindEnumTypeByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor19FindEnumValueByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindEnumValueByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor21extension_range_countEv"]
    pub fn google_protobuf_Descriptor_extension_range_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15extension_rangeEi"]
    pub fn google_protobuf_Descriptor_extension_range(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ExtensionRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor17IsExtensionNumberEi"]
    pub fn google_protobuf_Descriptor_IsExtensionNumber(
        this: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor34FindExtensionRangeContainingNumberEi"]
    pub fn google_protobuf_Descriptor_FindExtensionRangeContainingNumber(
        this: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ExtensionRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor15extension_countEv"]
    pub fn google_protobuf_Descriptor_extension_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor9extensionEi"]
    pub fn google_protobuf_Descriptor_extension(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor19FindExtensionByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindExtensionByName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor28FindExtensionByLowercaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindExtensionByLowercaseName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor28FindExtensionByCamelcaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_FindExtensionByCamelcaseName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor20reserved_range_countEv"]
    pub fn google_protobuf_Descriptor_reserved_range_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor14reserved_rangeEi"]
    pub fn google_protobuf_Descriptor_reserved_range(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ReservedRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor16IsReservedNumberEi"]
    pub fn google_protobuf_Descriptor_IsReservedNumber(
        this: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor33FindReservedRangeContainingNumberEi"]
    pub fn google_protobuf_Descriptor_FindReservedRangeContainingNumber(
        this: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ReservedRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor19reserved_name_countEv"]
    pub fn google_protobuf_Descriptor_reserved_name_count(
        this: *const google_protobuf_Descriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor13reserved_nameEi"]
    pub fn google_protobuf_Descriptor_reserved_name(
        this: *const google_protobuf_Descriptor,
        index: ::std::os::raw::c_int,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor14IsReservedNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Descriptor_IsReservedName(
        this: *const google_protobuf_Descriptor,
        name: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Descriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_Descriptor_GetSourceLocation(
        this: *const google_protobuf_Descriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_Descriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_Descriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_Descriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_index(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_Descriptor_file(self)
    }
    #[inline]
    pub unsafe fn containing_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_Descriptor_containing_type(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_MessageOptions {
        google_protobuf_Descriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_DescriptorProto) {
        google_protobuf_Descriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_Descriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_Descriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn is_placeholder(&self) -> bool {
        google_protobuf_Descriptor_is_placeholder(self)
    }
    #[inline]
    pub unsafe fn field_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_field_count(self)
    }
    #[inline]
    pub unsafe fn field(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_field(self, index)
    }
    #[inline]
    pub unsafe fn FindFieldByNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindFieldByNumber(self, number)
    }
    #[inline]
    pub unsafe fn FindFieldByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindFieldByName(self, name)
    }
    #[inline]
    pub unsafe fn FindFieldByLowercaseName(
        &self,
        lowercase_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindFieldByLowercaseName(self, lowercase_name)
    }
    #[inline]
    pub unsafe fn FindFieldByCamelcaseName(
        &self,
        camelcase_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindFieldByCamelcaseName(self, camelcase_name)
    }
    #[inline]
    pub unsafe fn oneof_decl_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_oneof_decl_count(self)
    }
    #[inline]
    pub unsafe fn oneof_decl(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_OneofDescriptor {
        google_protobuf_Descriptor_oneof_decl(self, index)
    }
    #[inline]
    pub unsafe fn FindOneofByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_OneofDescriptor {
        google_protobuf_Descriptor_FindOneofByName(self, name)
    }
    #[inline]
    pub unsafe fn nested_type_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_nested_type_count(self)
    }
    #[inline]
    pub unsafe fn nested_type(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor {
        google_protobuf_Descriptor_nested_type(self, index)
    }
    #[inline]
    pub unsafe fn FindNestedTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor {
        google_protobuf_Descriptor_FindNestedTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn enum_type_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_enum_type_count(self)
    }
    #[inline]
    pub unsafe fn enum_type(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_Descriptor_enum_type(self, index)
    }
    #[inline]
    pub unsafe fn FindEnumTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_Descriptor_FindEnumTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn FindEnumValueByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_Descriptor_FindEnumValueByName(self, name)
    }
    #[inline]
    pub unsafe fn extension_range_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_extension_range_count(self)
    }
    #[inline]
    pub unsafe fn extension_range(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ExtensionRange {
        google_protobuf_Descriptor_extension_range(self, index)
    }
    #[inline]
    pub unsafe fn IsExtensionNumber(&self, number: ::std::os::raw::c_int) -> bool {
        google_protobuf_Descriptor_IsExtensionNumber(self, number)
    }
    #[inline]
    pub unsafe fn FindExtensionRangeContainingNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ExtensionRange {
        google_protobuf_Descriptor_FindExtensionRangeContainingNumber(self, number)
    }
    #[inline]
    pub unsafe fn extension_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_extension_count(self)
    }
    #[inline]
    pub unsafe fn extension(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_extension(self, index)
    }
    #[inline]
    pub unsafe fn FindExtensionByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindExtensionByName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByLowercaseName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindExtensionByLowercaseName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByCamelcaseName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Descriptor_FindExtensionByCamelcaseName(self, name)
    }
    #[inline]
    pub unsafe fn reserved_range_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_reserved_range_count(self)
    }
    #[inline]
    pub unsafe fn reserved_range(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ReservedRange {
        google_protobuf_Descriptor_reserved_range(self, index)
    }
    #[inline]
    pub unsafe fn IsReservedNumber(&self, number: ::std::os::raw::c_int) -> bool {
        google_protobuf_Descriptor_IsReservedNumber(self, number)
    }
    #[inline]
    pub unsafe fn FindReservedRangeContainingNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor_ReservedRange {
        google_protobuf_Descriptor_FindReservedRangeContainingNumber(self, number)
    }
    #[inline]
    pub unsafe fn reserved_name_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_Descriptor_reserved_name_count(self)
    }
    #[inline]
    pub unsafe fn reserved_name(&self, index: ::std::os::raw::c_int) -> *const std_string {
        google_protobuf_Descriptor_reserved_name(self, index)
    }
    #[inline]
    pub unsafe fn IsReservedName(&self, name: *const std_string) -> bool {
        google_protobuf_Descriptor_IsReservedName(self, name)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_Descriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct google_protobuf_FieldDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub lowercase_name_: *const std_string,
    pub camelcase_name_: *const std_string,
    pub json_name_: *const std_string,
    pub file_: *const google_protobuf_FileDescriptor,
    pub type_once_: *mut google_protobuf_internal_once_flag,
    pub type_: google_protobuf_FieldDescriptor_Type,
    pub label_: google_protobuf_FieldDescriptor_Label,
    pub has_default_value_: bool,
    pub has_json_name_: bool,
    pub is_extension_: bool,
    pub number_: ::std::os::raw::c_int,
    pub index_in_oneof_: ::std::os::raw::c_int,
    pub containing_type_: *const google_protobuf_Descriptor,
    pub containing_oneof_: *const google_protobuf_OneofDescriptor,
    pub extension_scope_: *const google_protobuf_Descriptor,
    pub message_type_: *const google_protobuf_Descriptor,
    pub enum_type_: *const google_protobuf_EnumDescriptor,
    pub options_: *const google_protobuf_FieldOptions,
    pub type_name_: *const std_string,
    pub default_value_enum_name_: *const std_string,
    pub __bindgen_anon_1: google_protobuf_FieldDescriptor__bindgen_ty_1,
}
pub type google_protobuf_FieldDescriptor_Proto = google_protobuf_FieldDescriptorProto;
pub const google_protobuf_FieldDescriptor_Type_TYPE_DOUBLE: google_protobuf_FieldDescriptor_Type =
    1;
pub const google_protobuf_FieldDescriptor_Type_TYPE_FLOAT: google_protobuf_FieldDescriptor_Type = 2;
pub const google_protobuf_FieldDescriptor_Type_TYPE_INT64: google_protobuf_FieldDescriptor_Type = 3;
pub const google_protobuf_FieldDescriptor_Type_TYPE_UINT64: google_protobuf_FieldDescriptor_Type =
    4;
pub const google_protobuf_FieldDescriptor_Type_TYPE_INT32: google_protobuf_FieldDescriptor_Type = 5;
pub const google_protobuf_FieldDescriptor_Type_TYPE_FIXED64: google_protobuf_FieldDescriptor_Type =
    6;
pub const google_protobuf_FieldDescriptor_Type_TYPE_FIXED32: google_protobuf_FieldDescriptor_Type =
    7;
pub const google_protobuf_FieldDescriptor_Type_TYPE_BOOL: google_protobuf_FieldDescriptor_Type = 8;
pub const google_protobuf_FieldDescriptor_Type_TYPE_STRING: google_protobuf_FieldDescriptor_Type =
    9;
pub const google_protobuf_FieldDescriptor_Type_TYPE_GROUP: google_protobuf_FieldDescriptor_Type =
    10;
pub const google_protobuf_FieldDescriptor_Type_TYPE_MESSAGE: google_protobuf_FieldDescriptor_Type =
    11;
pub const google_protobuf_FieldDescriptor_Type_TYPE_BYTES: google_protobuf_FieldDescriptor_Type =
    12;
pub const google_protobuf_FieldDescriptor_Type_TYPE_UINT32: google_protobuf_FieldDescriptor_Type =
    13;
pub const google_protobuf_FieldDescriptor_Type_TYPE_ENUM: google_protobuf_FieldDescriptor_Type = 14;
pub const google_protobuf_FieldDescriptor_Type_TYPE_SFIXED32: google_protobuf_FieldDescriptor_Type =
    15;
pub const google_protobuf_FieldDescriptor_Type_TYPE_SFIXED64: google_protobuf_FieldDescriptor_Type =
    16;
pub const google_protobuf_FieldDescriptor_Type_TYPE_SINT32: google_protobuf_FieldDescriptor_Type =
    17;
pub const google_protobuf_FieldDescriptor_Type_TYPE_SINT64: google_protobuf_FieldDescriptor_Type =
    18;
pub const google_protobuf_FieldDescriptor_Type_MAX_TYPE: google_protobuf_FieldDescriptor_Type = 18;
pub type google_protobuf_FieldDescriptor_Type = u32;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_INT32:
    google_protobuf_FieldDescriptor_CppType = 1;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_INT64:
    google_protobuf_FieldDescriptor_CppType = 2;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_UINT32:
    google_protobuf_FieldDescriptor_CppType = 3;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_UINT64:
    google_protobuf_FieldDescriptor_CppType = 4;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_DOUBLE:
    google_protobuf_FieldDescriptor_CppType = 5;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_FLOAT:
    google_protobuf_FieldDescriptor_CppType = 6;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_BOOL:
    google_protobuf_FieldDescriptor_CppType = 7;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_ENUM:
    google_protobuf_FieldDescriptor_CppType = 8;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_STRING:
    google_protobuf_FieldDescriptor_CppType = 9;
pub const google_protobuf_FieldDescriptor_CppType_CPPTYPE_MESSAGE:
    google_protobuf_FieldDescriptor_CppType = 10;
pub const google_protobuf_FieldDescriptor_CppType_MAX_CPPTYPE:
    google_protobuf_FieldDescriptor_CppType = 10;
pub type google_protobuf_FieldDescriptor_CppType = u32;
pub const google_protobuf_FieldDescriptor_Label_LABEL_OPTIONAL:
    google_protobuf_FieldDescriptor_Label = 1;
pub const google_protobuf_FieldDescriptor_Label_LABEL_REQUIRED:
    google_protobuf_FieldDescriptor_Label = 2;
pub const google_protobuf_FieldDescriptor_Label_LABEL_REPEATED:
    google_protobuf_FieldDescriptor_Label = 3;
pub const google_protobuf_FieldDescriptor_Label_MAX_LABEL: google_protobuf_FieldDescriptor_Label =
    3;
pub type google_protobuf_FieldDescriptor_Label = u32;
pub type google_protobuf_FieldDescriptor_OptionsType = google_protobuf_FieldOptions;
pub const google_protobuf_FieldDescriptor_PrintLabelFlag_PRINT_LABEL:
    google_protobuf_FieldDescriptor_PrintLabelFlag = 0;
pub const google_protobuf_FieldDescriptor_PrintLabelFlag_OMIT_LABEL:
    google_protobuf_FieldDescriptor_PrintLabelFlag = 1;
pub type google_protobuf_FieldDescriptor_PrintLabelFlag = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union google_protobuf_FieldDescriptor__bindgen_ty_1 {
    pub default_value_int32_: google_protobuf_int32,
    pub default_value_int64_: google_protobuf_int64,
    pub default_value_uint32_: google_protobuf_uint32,
    pub default_value_uint64_: google_protobuf_uint64,
    pub default_value_float_: f32,
    pub default_value_double_: f64,
    pub default_value_bool_: bool,
    pub default_value_enum_: *const google_protobuf_EnumValueDescriptor,
    pub default_value_string_: *const std_string,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_google_protobuf_FieldDescriptor__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_FieldDescriptor__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_FieldDescriptor__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_int32_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_int32_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_int64_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_int64_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_uint32_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_uint32_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_uint64_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_uint64_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_float_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_float_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_double_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_double_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_bool_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_bool_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_enum_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_enum_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor__bindgen_ty_1>()))
                .default_value_string_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor__bindgen_ty_1),
            "::",
            stringify!(default_value_string_)
        )
    );
}
pub const google_protobuf_FieldDescriptor_kMaxNumber: ::std::os::raw::c_int = 536870911;
pub const google_protobuf_FieldDescriptor_kFirstReservedNumber: ::std::os::raw::c_int = 19000;
pub const google_protobuf_FieldDescriptor_kLastReservedNumber: ::std::os::raw::c_int = 19999;
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor17kTypeToCppTypeMapE"]
    pub static mut google_protobuf_FieldDescriptor_kTypeToCppTypeMap:
        [google_protobuf_FieldDescriptor_CppType; 19usize];
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor11kTypeToNameE"]
    pub static mut google_protobuf_FieldDescriptor_kTypeToName:
        [*const ::std::os::raw::c_char; 19usize];
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor14kCppTypeToNameE"]
    pub static mut google_protobuf_FieldDescriptor_kCppTypeToName:
        [*const ::std::os::raw::c_char; 11usize];
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor12kLabelToNameE"]
    pub static mut google_protobuf_FieldDescriptor_kLabelToName:
        [*const ::std::os::raw::c_char; 4usize];
}
#[test]
fn bindgen_test_layout_google_protobuf_FieldDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_FieldDescriptor>(),
        152usize,
        concat!("Size of: ", stringify!(google_protobuf_FieldDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_FieldDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_FieldDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).lowercase_name_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(lowercase_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).camelcase_name_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(camelcase_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).json_name_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(json_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).file_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(file_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).type_once_ as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(type_once_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).type_ as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).label_ as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(label_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).has_default_value_
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(has_default_value_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).has_json_name_ as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(has_json_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).is_extension_ as *const _
                as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(is_extension_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).number_ as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(number_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).index_in_oneof_ as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(index_in_oneof_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).containing_type_ as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(containing_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).containing_oneof_
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(containing_oneof_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).extension_scope_ as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(extension_scope_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).message_type_ as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(message_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).enum_type_ as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(enum_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).options_ as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).type_name_ as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(type_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FieldDescriptor>())).default_value_enum_name_
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FieldDescriptor),
            "::",
            stringify!(default_value_enum_name_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor4nameEv"]
    pub fn google_protobuf_FieldDescriptor_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor9full_nameEv"]
    pub fn google_protobuf_FieldDescriptor_full_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor9json_nameEv"]
    pub fn google_protobuf_FieldDescriptor_json_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor4fileEv"]
    pub fn google_protobuf_FieldDescriptor_file(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor12is_extensionEv"]
    pub fn google_protobuf_FieldDescriptor_is_extension(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor6numberEv"]
    pub fn google_protobuf_FieldDescriptor_number(
        this: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor14lowercase_nameEv"]
    pub fn google_protobuf_FieldDescriptor_lowercase_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor14camelcase_nameEv"]
    pub fn google_protobuf_FieldDescriptor_camelcase_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor4typeEv"]
    pub fn google_protobuf_FieldDescriptor_type(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_FieldDescriptor_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor9type_nameEv"]
    pub fn google_protobuf_FieldDescriptor_type_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor8cpp_typeEv"]
    pub fn google_protobuf_FieldDescriptor_cpp_type(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_FieldDescriptor_CppType;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor13cpp_type_nameEv"]
    pub fn google_protobuf_FieldDescriptor_cpp_type_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor5labelEv"]
    pub fn google_protobuf_FieldDescriptor_label(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_FieldDescriptor_Label;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor11is_requiredEv"]
    pub fn google_protobuf_FieldDescriptor_is_required(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor11is_optionalEv"]
    pub fn google_protobuf_FieldDescriptor_is_optional(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor11is_repeatedEv"]
    pub fn google_protobuf_FieldDescriptor_is_repeated(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor11is_packableEv"]
    pub fn google_protobuf_FieldDescriptor_is_packable(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor9is_packedEv"]
    pub fn google_protobuf_FieldDescriptor_is_packed(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor6is_mapEv"]
    pub fn google_protobuf_FieldDescriptor_is_map(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor5indexEv"]
    pub fn google_protobuf_FieldDescriptor_index(
        this: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor17has_default_valueEv"]
    pub fn google_protobuf_FieldDescriptor_has_default_value(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor13has_json_nameEv"]
    pub fn google_protobuf_FieldDescriptor_has_json_name(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor19default_value_int32Ev"]
    pub fn google_protobuf_FieldDescriptor_default_value_int32(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor19default_value_int64Ev"]
    pub fn google_protobuf_FieldDescriptor_default_value_int64(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor20default_value_uint32Ev"]
    pub fn google_protobuf_FieldDescriptor_default_value_uint32(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor20default_value_uint64Ev"]
    pub fn google_protobuf_FieldDescriptor_default_value_uint64(
        this: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor19default_value_floatEv"]
    pub fn google_protobuf_FieldDescriptor_default_value_float(
        this: *const google_protobuf_FieldDescriptor,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor20default_value_doubleEv"]
    pub fn google_protobuf_FieldDescriptor_default_value_double(
        this: *const google_protobuf_FieldDescriptor,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor18default_value_boolEv"]
    pub fn google_protobuf_FieldDescriptor_default_value_bool(
        this: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor18default_value_enumEv"]
    pub fn google_protobuf_FieldDescriptor_default_value_enum(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor20default_value_stringEv"]
    pub fn google_protobuf_FieldDescriptor_default_value_string(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor15containing_typeEv"]
    pub fn google_protobuf_FieldDescriptor_containing_type(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor16containing_oneofEv"]
    pub fn google_protobuf_FieldDescriptor_containing_oneof(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_OneofDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor14index_in_oneofEv"]
    pub fn google_protobuf_FieldDescriptor_index_in_oneof(
        this: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor15extension_scopeEv"]
    pub fn google_protobuf_FieldDescriptor_extension_scope(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor12message_typeEv"]
    pub fn google_protobuf_FieldDescriptor_message_type(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor9enum_typeEv"]
    pub fn google_protobuf_FieldDescriptor_enum_type(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor7optionsEv"]
    pub fn google_protobuf_FieldDescriptor_options(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_FieldOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor6CopyToEPNS0_20FieldDescriptorProtoE"]
    pub fn google_protobuf_FieldDescriptor_CopyTo(
        this: *const google_protobuf_FieldDescriptor,
        proto: *mut google_protobuf_FieldDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor11DebugStringEv"]
    pub fn google_protobuf_FieldDescriptor_DebugString(
        this: *const google_protobuf_FieldDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_FieldDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_FieldDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor13TypeToCppTypeENS1_4TypeE"]
    pub fn google_protobuf_FieldDescriptor_TypeToCppType(
        type_: google_protobuf_FieldDescriptor_Type,
    ) -> google_protobuf_FieldDescriptor_CppType;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor8TypeNameENS1_4TypeE"]
    pub fn google_protobuf_FieldDescriptor_TypeName(
        type_: google_protobuf_FieldDescriptor_Type,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf15FieldDescriptor11CppTypeNameENS1_7CppTypeE"]
    pub fn google_protobuf_FieldDescriptor_CppTypeName(
        cpp_type: google_protobuf_FieldDescriptor_CppType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor25PrintableNameForExtensionEv"]
    pub fn google_protobuf_FieldDescriptor_PrintableNameForExtension(
        this: *const google_protobuf_FieldDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15FieldDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_FieldDescriptor_GetSourceLocation(
        this: *const google_protobuf_FieldDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_FieldDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn json_name(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_json_name(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_FieldDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn is_extension(&self) -> bool {
        google_protobuf_FieldDescriptor_is_extension(self)
    }
    #[inline]
    pub unsafe fn number(&self) -> ::std::os::raw::c_int {
        google_protobuf_FieldDescriptor_number(self)
    }
    #[inline]
    pub unsafe fn lowercase_name(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_lowercase_name(self)
    }
    #[inline]
    pub unsafe fn camelcase_name(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_camelcase_name(self)
    }
    #[inline]
    pub unsafe fn type_(&self) -> google_protobuf_FieldDescriptor_Type {
        google_protobuf_FieldDescriptor_type(self)
    }
    #[inline]
    pub unsafe fn type_name(&self) -> *const ::std::os::raw::c_char {
        google_protobuf_FieldDescriptor_type_name(self)
    }
    #[inline]
    pub unsafe fn cpp_type(&self) -> google_protobuf_FieldDescriptor_CppType {
        google_protobuf_FieldDescriptor_cpp_type(self)
    }
    #[inline]
    pub unsafe fn cpp_type_name(&self) -> *const ::std::os::raw::c_char {
        google_protobuf_FieldDescriptor_cpp_type_name(self)
    }
    #[inline]
    pub unsafe fn label(&self) -> google_protobuf_FieldDescriptor_Label {
        google_protobuf_FieldDescriptor_label(self)
    }
    #[inline]
    pub unsafe fn is_required(&self) -> bool {
        google_protobuf_FieldDescriptor_is_required(self)
    }
    #[inline]
    pub unsafe fn is_optional(&self) -> bool {
        google_protobuf_FieldDescriptor_is_optional(self)
    }
    #[inline]
    pub unsafe fn is_repeated(&self) -> bool {
        google_protobuf_FieldDescriptor_is_repeated(self)
    }
    #[inline]
    pub unsafe fn is_packable(&self) -> bool {
        google_protobuf_FieldDescriptor_is_packable(self)
    }
    #[inline]
    pub unsafe fn is_packed(&self) -> bool {
        google_protobuf_FieldDescriptor_is_packed(self)
    }
    #[inline]
    pub unsafe fn is_map(&self) -> bool {
        google_protobuf_FieldDescriptor_is_map(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_FieldDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn has_default_value(&self) -> bool {
        google_protobuf_FieldDescriptor_has_default_value(self)
    }
    #[inline]
    pub unsafe fn has_json_name(&self) -> bool {
        google_protobuf_FieldDescriptor_has_json_name(self)
    }
    #[inline]
    pub unsafe fn default_value_int32(&self) -> google_protobuf_int32 {
        google_protobuf_FieldDescriptor_default_value_int32(self)
    }
    #[inline]
    pub unsafe fn default_value_int64(&self) -> google_protobuf_int64 {
        google_protobuf_FieldDescriptor_default_value_int64(self)
    }
    #[inline]
    pub unsafe fn default_value_uint32(&self) -> google_protobuf_uint32 {
        google_protobuf_FieldDescriptor_default_value_uint32(self)
    }
    #[inline]
    pub unsafe fn default_value_uint64(&self) -> google_protobuf_uint64 {
        google_protobuf_FieldDescriptor_default_value_uint64(self)
    }
    #[inline]
    pub unsafe fn default_value_float(&self) -> f32 {
        google_protobuf_FieldDescriptor_default_value_float(self)
    }
    #[inline]
    pub unsafe fn default_value_double(&self) -> f64 {
        google_protobuf_FieldDescriptor_default_value_double(self)
    }
    #[inline]
    pub unsafe fn default_value_bool(&self) -> bool {
        google_protobuf_FieldDescriptor_default_value_bool(self)
    }
    #[inline]
    pub unsafe fn default_value_enum(&self) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_FieldDescriptor_default_value_enum(self)
    }
    #[inline]
    pub unsafe fn default_value_string(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_default_value_string(self)
    }
    #[inline]
    pub unsafe fn containing_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_FieldDescriptor_containing_type(self)
    }
    #[inline]
    pub unsafe fn containing_oneof(&self) -> *const google_protobuf_OneofDescriptor {
        google_protobuf_FieldDescriptor_containing_oneof(self)
    }
    #[inline]
    pub unsafe fn index_in_oneof(&self) -> ::std::os::raw::c_int {
        google_protobuf_FieldDescriptor_index_in_oneof(self)
    }
    #[inline]
    pub unsafe fn extension_scope(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_FieldDescriptor_extension_scope(self)
    }
    #[inline]
    pub unsafe fn message_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_FieldDescriptor_message_type(self)
    }
    #[inline]
    pub unsafe fn enum_type(&self) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_FieldDescriptor_enum_type(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_FieldOptions {
        google_protobuf_FieldDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_FieldDescriptorProto) {
        google_protobuf_FieldDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_FieldDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_FieldDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn TypeToCppType(
        type_: google_protobuf_FieldDescriptor_Type,
    ) -> google_protobuf_FieldDescriptor_CppType {
        google_protobuf_FieldDescriptor_TypeToCppType(type_)
    }
    #[inline]
    pub unsafe fn TypeName(
        type_: google_protobuf_FieldDescriptor_Type,
    ) -> *const ::std::os::raw::c_char {
        google_protobuf_FieldDescriptor_TypeName(type_)
    }
    #[inline]
    pub unsafe fn CppTypeName(
        cpp_type: google_protobuf_FieldDescriptor_CppType,
    ) -> *const ::std::os::raw::c_char {
        google_protobuf_FieldDescriptor_CppTypeName(cpp_type)
    }
    #[inline]
    pub unsafe fn PrintableNameForExtension(&self) -> *const std_string {
        google_protobuf_FieldDescriptor_PrintableNameForExtension(self)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_FieldDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_OneofDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub containing_type_: *const google_protobuf_Descriptor,
    pub field_count_: ::std::os::raw::c_int,
    pub fields_: *mut *const google_protobuf_FieldDescriptor,
    pub options_: *const google_protobuf_OneofOptions,
}
pub type google_protobuf_OneofDescriptor_Proto = google_protobuf_OneofDescriptorProto;
pub type google_protobuf_OneofDescriptor_OptionsType = google_protobuf_OneofOptions;
#[test]
fn bindgen_test_layout_google_protobuf_OneofDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_OneofDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(google_protobuf_OneofDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_OneofDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_OneofDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).containing_type_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(containing_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).field_count_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(field_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).fields_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(fields_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_OneofDescriptor>())).options_ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_OneofDescriptor),
            "::",
            stringify!(options_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor4nameEv"]
    pub fn google_protobuf_OneofDescriptor_name(
        this: *const google_protobuf_OneofDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor9full_nameEv"]
    pub fn google_protobuf_OneofDescriptor_full_name(
        this: *const google_protobuf_OneofDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor5indexEv"]
    pub fn google_protobuf_OneofDescriptor_index(
        this: *const google_protobuf_OneofDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor4fileEv"]
    pub fn google_protobuf_OneofDescriptor_file(
        this: *const google_protobuf_OneofDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor15containing_typeEv"]
    pub fn google_protobuf_OneofDescriptor_containing_type(
        this: *const google_protobuf_OneofDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor11field_countEv"]
    pub fn google_protobuf_OneofDescriptor_field_count(
        this: *const google_protobuf_OneofDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor5fieldEi"]
    pub fn google_protobuf_OneofDescriptor_field(
        this: *const google_protobuf_OneofDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor7optionsEv"]
    pub fn google_protobuf_OneofDescriptor_options(
        this: *const google_protobuf_OneofDescriptor,
    ) -> *const google_protobuf_OneofOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor6CopyToEPNS0_20OneofDescriptorProtoE"]
    pub fn google_protobuf_OneofDescriptor_CopyTo(
        this: *const google_protobuf_OneofDescriptor,
        proto: *mut google_protobuf_OneofDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor11DebugStringEv"]
    pub fn google_protobuf_OneofDescriptor_DebugString(
        this: *const google_protobuf_OneofDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_OneofDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_OneofDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf15OneofDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_OneofDescriptor_GetSourceLocation(
        this: *const google_protobuf_OneofDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_OneofDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_OneofDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_OneofDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_OneofDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_OneofDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn containing_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_OneofDescriptor_containing_type(self)
    }
    #[inline]
    pub unsafe fn field_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_OneofDescriptor_field_count(self)
    }
    #[inline]
    pub unsafe fn field(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_OneofDescriptor_field(self, index)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_OneofOptions {
        google_protobuf_OneofDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_OneofDescriptorProto) {
        google_protobuf_OneofDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_OneofDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_OneofDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_OneofDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub file_: *const google_protobuf_FileDescriptor,
    pub containing_type_: *const google_protobuf_Descriptor,
    pub options_: *const google_protobuf_EnumOptions,
    pub is_placeholder_: bool,
    pub is_unqualified_placeholder_: bool,
    pub value_count_: ::std::os::raw::c_int,
    pub values_: *mut google_protobuf_EnumValueDescriptor,
    pub reserved_range_count_: ::std::os::raw::c_int,
    pub reserved_name_count_: ::std::os::raw::c_int,
    pub reserved_ranges_: *mut google_protobuf_EnumDescriptor_ReservedRange,
    pub reserved_names_: *mut *const std_string,
}
pub type google_protobuf_EnumDescriptor_Proto = google_protobuf_EnumDescriptorProto;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumDescriptor_ReservedRange {
    pub start: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_google_protobuf_EnumDescriptor_ReservedRange() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_EnumDescriptor_ReservedRange>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_EnumDescriptor_ReservedRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_EnumDescriptor_ReservedRange>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_EnumDescriptor_ReservedRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor_ReservedRange>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor_ReservedRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor_ReservedRange>())).end as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor_ReservedRange),
            "::",
            stringify!(end)
        )
    );
}
pub type google_protobuf_EnumDescriptor_OptionsType = google_protobuf_EnumOptions;
#[test]
fn bindgen_test_layout_google_protobuf_EnumDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_EnumDescriptor>(),
        80usize,
        concat!("Size of: ", stringify!(google_protobuf_EnumDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_EnumDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_EnumDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).file_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(file_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).containing_type_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(containing_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).options_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).is_placeholder_ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(is_placeholder_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).is_unqualified_placeholder_
                as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(is_unqualified_placeholder_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).value_count_ as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(value_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).values_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(values_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).reserved_range_count_
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(reserved_range_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).reserved_name_count_
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(reserved_name_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).reserved_ranges_ as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(reserved_ranges_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumDescriptor>())).reserved_names_ as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumDescriptor),
            "::",
            stringify!(reserved_names_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor4nameEv"]
    pub fn google_protobuf_EnumDescriptor_name(
        this: *const google_protobuf_EnumDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor9full_nameEv"]
    pub fn google_protobuf_EnumDescriptor_full_name(
        this: *const google_protobuf_EnumDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor5indexEv"]
    pub fn google_protobuf_EnumDescriptor_index(
        this: *const google_protobuf_EnumDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor4fileEv"]
    pub fn google_protobuf_EnumDescriptor_file(
        this: *const google_protobuf_EnumDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor11value_countEv"]
    pub fn google_protobuf_EnumDescriptor_value_count(
        this: *const google_protobuf_EnumDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor5valueEi"]
    pub fn google_protobuf_EnumDescriptor_value(
        this: *const google_protobuf_EnumDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor15FindValueByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_EnumDescriptor_FindValueByName(
        this: *const google_protobuf_EnumDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor17FindValueByNumberEi"]
    pub fn google_protobuf_EnumDescriptor_FindValueByNumber(
        this: *const google_protobuf_EnumDescriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor15containing_typeEv"]
    pub fn google_protobuf_EnumDescriptor_containing_type(
        this: *const google_protobuf_EnumDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor7optionsEv"]
    pub fn google_protobuf_EnumDescriptor_options(
        this: *const google_protobuf_EnumDescriptor,
    ) -> *const google_protobuf_EnumOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor6CopyToEPNS0_19EnumDescriptorProtoE"]
    pub fn google_protobuf_EnumDescriptor_CopyTo(
        this: *const google_protobuf_EnumDescriptor,
        proto: *mut google_protobuf_EnumDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor11DebugStringEv"]
    pub fn google_protobuf_EnumDescriptor_DebugString(
        this: *const google_protobuf_EnumDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_EnumDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_EnumDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor14is_placeholderEv"]
    pub fn google_protobuf_EnumDescriptor_is_placeholder(
        this: *const google_protobuf_EnumDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor20reserved_range_countEv"]
    pub fn google_protobuf_EnumDescriptor_reserved_range_count(
        this: *const google_protobuf_EnumDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor14reserved_rangeEi"]
    pub fn google_protobuf_EnumDescriptor_reserved_range(
        this: *const google_protobuf_EnumDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor_ReservedRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor16IsReservedNumberEi"]
    pub fn google_protobuf_EnumDescriptor_IsReservedNumber(
        this: *const google_protobuf_EnumDescriptor,
        number: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor33FindReservedRangeContainingNumberEi"]
    pub fn google_protobuf_EnumDescriptor_FindReservedRangeContainingNumber(
        this: *const google_protobuf_EnumDescriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor_ReservedRange;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor19reserved_name_countEv"]
    pub fn google_protobuf_EnumDescriptor_reserved_name_count(
        this: *const google_protobuf_EnumDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor13reserved_nameEi"]
    pub fn google_protobuf_EnumDescriptor_reserved_name(
        this: *const google_protobuf_EnumDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor14IsReservedNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_EnumDescriptor_IsReservedName(
        this: *const google_protobuf_EnumDescriptor,
        name: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14EnumDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_EnumDescriptor_GetSourceLocation(
        this: *const google_protobuf_EnumDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_EnumDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_EnumDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_EnumDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_EnumDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn value_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumDescriptor_value_count(self)
    }
    #[inline]
    pub unsafe fn value(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_EnumDescriptor_value(self, index)
    }
    #[inline]
    pub unsafe fn FindValueByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_EnumDescriptor_FindValueByName(self, name)
    }
    #[inline]
    pub unsafe fn FindValueByNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_EnumDescriptor_FindValueByNumber(self, number)
    }
    #[inline]
    pub unsafe fn containing_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_EnumDescriptor_containing_type(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_EnumOptions {
        google_protobuf_EnumDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_EnumDescriptorProto) {
        google_protobuf_EnumDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_EnumDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_EnumDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn is_placeholder(&self) -> bool {
        google_protobuf_EnumDescriptor_is_placeholder(self)
    }
    #[inline]
    pub unsafe fn reserved_range_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumDescriptor_reserved_range_count(self)
    }
    #[inline]
    pub unsafe fn reserved_range(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor_ReservedRange {
        google_protobuf_EnumDescriptor_reserved_range(self, index)
    }
    #[inline]
    pub unsafe fn IsReservedNumber(&self, number: ::std::os::raw::c_int) -> bool {
        google_protobuf_EnumDescriptor_IsReservedNumber(self, number)
    }
    #[inline]
    pub unsafe fn FindReservedRangeContainingNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor_ReservedRange {
        google_protobuf_EnumDescriptor_FindReservedRangeContainingNumber(self, number)
    }
    #[inline]
    pub unsafe fn reserved_name_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumDescriptor_reserved_name_count(self)
    }
    #[inline]
    pub unsafe fn reserved_name(&self, index: ::std::os::raw::c_int) -> *const std_string {
        google_protobuf_EnumDescriptor_reserved_name(self, index)
    }
    #[inline]
    pub unsafe fn IsReservedName(&self, name: *const std_string) -> bool {
        google_protobuf_EnumDescriptor_IsReservedName(self, name)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_EnumDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_EnumValueDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub number_: ::std::os::raw::c_int,
    pub type_: *const google_protobuf_EnumDescriptor,
    pub options_: *const google_protobuf_EnumValueOptions,
}
pub type google_protobuf_EnumValueDescriptor_Proto = google_protobuf_EnumValueDescriptorProto;
pub type google_protobuf_EnumValueDescriptor_OptionsType = google_protobuf_EnumValueOptions;
#[test]
fn bindgen_test_layout_google_protobuf_EnumValueDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_EnumValueDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(google_protobuf_EnumValueDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_EnumValueDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_EnumValueDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumValueDescriptor>())).name_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumValueDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumValueDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumValueDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumValueDescriptor>())).number_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumValueDescriptor),
            "::",
            stringify!(number_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumValueDescriptor>())).type_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumValueDescriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_EnumValueDescriptor>())).options_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_EnumValueDescriptor),
            "::",
            stringify!(options_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor4nameEv"]
    pub fn google_protobuf_EnumValueDescriptor_name(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor5indexEv"]
    pub fn google_protobuf_EnumValueDescriptor_index(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor6numberEv"]
    pub fn google_protobuf_EnumValueDescriptor_number(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor9full_nameEv"]
    pub fn google_protobuf_EnumValueDescriptor_full_name(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor4fileEv"]
    pub fn google_protobuf_EnumValueDescriptor_file(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor4typeEv"]
    pub fn google_protobuf_EnumValueDescriptor_type(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor7optionsEv"]
    pub fn google_protobuf_EnumValueDescriptor_options(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> *const google_protobuf_EnumValueOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor6CopyToEPNS0_24EnumValueDescriptorProtoE"]
    pub fn google_protobuf_EnumValueDescriptor_CopyTo(
        this: *const google_protobuf_EnumValueDescriptor,
        proto: *mut google_protobuf_EnumValueDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor11DebugStringEv"]
    pub fn google_protobuf_EnumValueDescriptor_DebugString(
        this: *const google_protobuf_EnumValueDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_EnumValueDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_EnumValueDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf19EnumValueDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_EnumValueDescriptor_GetSourceLocation(
        this: *const google_protobuf_EnumValueDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_EnumValueDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_EnumValueDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumValueDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn number(&self) -> ::std::os::raw::c_int {
        google_protobuf_EnumValueDescriptor_number(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_EnumValueDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_EnumValueDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn type_(&self) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_EnumValueDescriptor_type(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_EnumValueOptions {
        google_protobuf_EnumValueDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_EnumValueDescriptorProto) {
        google_protobuf_EnumValueDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_EnumValueDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_EnumValueDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_EnumValueDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_ServiceDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub file_: *const google_protobuf_FileDescriptor,
    pub options_: *const google_protobuf_ServiceOptions,
    pub methods_: *mut google_protobuf_MethodDescriptor,
    pub method_count_: ::std::os::raw::c_int,
}
pub type google_protobuf_ServiceDescriptor_Proto = google_protobuf_ServiceDescriptorProto;
pub type google_protobuf_ServiceDescriptor_OptionsType = google_protobuf_ServiceOptions;
#[test]
fn bindgen_test_layout_google_protobuf_ServiceDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_ServiceDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(google_protobuf_ServiceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_ServiceDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_ServiceDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).file_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(file_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).options_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).methods_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(methods_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_ServiceDescriptor>())).method_count_ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_ServiceDescriptor),
            "::",
            stringify!(method_count_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor4nameEv"]
    pub fn google_protobuf_ServiceDescriptor_name(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor9full_nameEv"]
    pub fn google_protobuf_ServiceDescriptor_full_name(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor5indexEv"]
    pub fn google_protobuf_ServiceDescriptor_index(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor4fileEv"]
    pub fn google_protobuf_ServiceDescriptor_file(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor7optionsEv"]
    pub fn google_protobuf_ServiceDescriptor_options(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> *const google_protobuf_ServiceOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor12method_countEv"]
    pub fn google_protobuf_ServiceDescriptor_method_count(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor6methodEi"]
    pub fn google_protobuf_ServiceDescriptor_method(
        this: *const google_protobuf_ServiceDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_MethodDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor16FindMethodByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_ServiceDescriptor_FindMethodByName(
        this: *const google_protobuf_ServiceDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_MethodDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor6CopyToEPNS0_22ServiceDescriptorProtoE"]
    pub fn google_protobuf_ServiceDescriptor_CopyTo(
        this: *const google_protobuf_ServiceDescriptor,
        proto: *mut google_protobuf_ServiceDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor11DebugStringEv"]
    pub fn google_protobuf_ServiceDescriptor_DebugString(
        this: *const google_protobuf_ServiceDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_ServiceDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_ServiceDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf17ServiceDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_ServiceDescriptor_GetSourceLocation(
        this: *const google_protobuf_ServiceDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_ServiceDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_ServiceDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_ServiceDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_ServiceDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_ServiceDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_ServiceOptions {
        google_protobuf_ServiceDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn method_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_ServiceDescriptor_method_count(self)
    }
    #[inline]
    pub unsafe fn method(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_MethodDescriptor {
        google_protobuf_ServiceDescriptor_method(self, index)
    }
    #[inline]
    pub unsafe fn FindMethodByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_MethodDescriptor {
        google_protobuf_ServiceDescriptor_FindMethodByName(self, name)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_ServiceDescriptorProto) {
        google_protobuf_ServiceDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_ServiceDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_ServiceDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_ServiceDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_MethodDescriptor {
    pub name_: *const std_string,
    pub full_name_: *const std_string,
    pub service_: *const google_protobuf_ServiceDescriptor,
    pub input_type_: google_protobuf_internal_LazyDescriptor,
    pub output_type_: google_protobuf_internal_LazyDescriptor,
    pub options_: *const google_protobuf_MethodOptions,
    pub client_streaming_: bool,
    pub server_streaming_: bool,
}
pub type google_protobuf_MethodDescriptor_Proto = google_protobuf_MethodDescriptorProto;
pub type google_protobuf_MethodDescriptor_OptionsType = google_protobuf_MethodOptions;
#[test]
fn bindgen_test_layout_google_protobuf_MethodDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_MethodDescriptor>(),
        104usize,
        concat!("Size of: ", stringify!(google_protobuf_MethodDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_MethodDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_MethodDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).full_name_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(full_name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).service_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(service_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).input_type_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(input_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).output_type_ as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(output_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).options_ as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).client_streaming_
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(client_streaming_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_MethodDescriptor>())).server_streaming_
                as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_MethodDescriptor),
            "::",
            stringify!(server_streaming_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor4nameEv"]
    pub fn google_protobuf_MethodDescriptor_name(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor9full_nameEv"]
    pub fn google_protobuf_MethodDescriptor_full_name(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor5indexEv"]
    pub fn google_protobuf_MethodDescriptor_index(
        this: *const google_protobuf_MethodDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor4fileEv"]
    pub fn google_protobuf_MethodDescriptor_file(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor7serviceEv"]
    pub fn google_protobuf_MethodDescriptor_service(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const google_protobuf_ServiceDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor10input_typeEv"]
    pub fn google_protobuf_MethodDescriptor_input_type(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor11output_typeEv"]
    pub fn google_protobuf_MethodDescriptor_output_type(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor16client_streamingEv"]
    pub fn google_protobuf_MethodDescriptor_client_streaming(
        this: *const google_protobuf_MethodDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor16server_streamingEv"]
    pub fn google_protobuf_MethodDescriptor_server_streaming(
        this: *const google_protobuf_MethodDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor7optionsEv"]
    pub fn google_protobuf_MethodDescriptor_options(
        this: *const google_protobuf_MethodDescriptor,
    ) -> *const google_protobuf_MethodOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor6CopyToEPNS0_21MethodDescriptorProtoE"]
    pub fn google_protobuf_MethodDescriptor_CopyTo(
        this: *const google_protobuf_MethodDescriptor,
        proto: *mut google_protobuf_MethodDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor11DebugStringEv"]
    pub fn google_protobuf_MethodDescriptor_DebugString(
        this: *const google_protobuf_MethodDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_MethodDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_MethodDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf16MethodDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_MethodDescriptor_GetSourceLocation(
        this: *const google_protobuf_MethodDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_MethodDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_MethodDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn full_name(&self) -> *const std_string {
        google_protobuf_MethodDescriptor_full_name(self)
    }
    #[inline]
    pub unsafe fn index(&self) -> ::std::os::raw::c_int {
        google_protobuf_MethodDescriptor_index(self)
    }
    #[inline]
    pub unsafe fn file(&self) -> *const google_protobuf_FileDescriptor {
        google_protobuf_MethodDescriptor_file(self)
    }
    #[inline]
    pub unsafe fn service(&self) -> *const google_protobuf_ServiceDescriptor {
        google_protobuf_MethodDescriptor_service(self)
    }
    #[inline]
    pub unsafe fn input_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_MethodDescriptor_input_type(self)
    }
    #[inline]
    pub unsafe fn output_type(&self) -> *const google_protobuf_Descriptor {
        google_protobuf_MethodDescriptor_output_type(self)
    }
    #[inline]
    pub unsafe fn client_streaming(&self) -> bool {
        google_protobuf_MethodDescriptor_client_streaming(self)
    }
    #[inline]
    pub unsafe fn server_streaming(&self) -> bool {
        google_protobuf_MethodDescriptor_server_streaming(self)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_MethodOptions {
        google_protobuf_MethodDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_MethodDescriptorProto) {
        google_protobuf_MethodDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_MethodDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_MethodDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_MethodDescriptor_GetSourceLocation(self, out_location)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_FileDescriptor {
    pub name_: *const std_string,
    pub package_: *const std_string,
    pub pool_: *const google_protobuf_DescriptorPool,
    pub dependencies_once_: *mut google_protobuf_internal_once_flag,
    pub dependency_count_: ::std::os::raw::c_int,
    pub public_dependency_count_: ::std::os::raw::c_int,
    pub weak_dependency_count_: ::std::os::raw::c_int,
    pub message_type_count_: ::std::os::raw::c_int,
    pub enum_type_count_: ::std::os::raw::c_int,
    pub service_count_: ::std::os::raw::c_int,
    pub extension_count_: ::std::os::raw::c_int,
    pub syntax_: google_protobuf_FileDescriptor_Syntax,
    pub is_placeholder_: bool,
    pub finished_building_: bool,
    pub dependencies_: *mut *const google_protobuf_FileDescriptor,
    pub dependencies_names_: *mut *const std_string,
    pub public_dependencies_: *mut ::std::os::raw::c_int,
    pub weak_dependencies_: *mut ::std::os::raw::c_int,
    pub message_types_: *mut google_protobuf_Descriptor,
    pub enum_types_: *mut google_protobuf_EnumDescriptor,
    pub services_: *mut google_protobuf_ServiceDescriptor,
    pub extensions_: *mut google_protobuf_FieldDescriptor,
    pub options_: *const google_protobuf_FileOptions,
    pub tables_: *const google_protobuf_FileDescriptorTables,
    pub source_code_info_: *const google_protobuf_SourceCodeInfo,
}
pub type google_protobuf_FileDescriptor_Proto = google_protobuf_FileDescriptorProto;
pub const google_protobuf_FileDescriptor_Syntax_SYNTAX_UNKNOWN:
    google_protobuf_FileDescriptor_Syntax = 0;
pub const google_protobuf_FileDescriptor_Syntax_SYNTAX_PROTO2:
    google_protobuf_FileDescriptor_Syntax = 2;
pub const google_protobuf_FileDescriptor_Syntax_SYNTAX_PROTO3:
    google_protobuf_FileDescriptor_Syntax = 3;
pub type google_protobuf_FileDescriptor_Syntax = u32;
pub type google_protobuf_FileDescriptor_OptionsType = google_protobuf_FileOptions;
#[test]
fn bindgen_test_layout_google_protobuf_FileDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_FileDescriptor>(),
        160usize,
        concat!("Size of: ", stringify!(google_protobuf_FileDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_FileDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_FileDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).package_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(package_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).pool_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(pool_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).dependencies_once_
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(dependencies_once_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).dependency_count_ as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(dependency_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).public_dependency_count_
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(public_dependency_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).weak_dependency_count_
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(weak_dependency_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).message_type_count_
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(message_type_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).enum_type_count_ as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(enum_type_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).service_count_ as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(service_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).extension_count_ as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(extension_count_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).syntax_ as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(syntax_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).is_placeholder_ as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(is_placeholder_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).finished_building_
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(finished_building_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).dependencies_ as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(dependencies_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).dependencies_names_
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(dependencies_names_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).public_dependencies_
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(public_dependencies_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).weak_dependencies_
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(weak_dependencies_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).message_types_ as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(message_types_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).enum_types_ as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(enum_types_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).services_ as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(services_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).extensions_ as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(extensions_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).options_ as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(options_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).tables_ as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(tables_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_FileDescriptor>())).source_code_info_ as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_FileDescriptor),
            "::",
            stringify!(source_code_info_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor4nameEv"]
    pub fn google_protobuf_FileDescriptor_name(
        this: *const google_protobuf_FileDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor7packageEv"]
    pub fn google_protobuf_FileDescriptor_package(
        this: *const google_protobuf_FileDescriptor,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor4poolEv"]
    pub fn google_protobuf_FileDescriptor_pool(
        this: *const google_protobuf_FileDescriptor,
    ) -> *const google_protobuf_DescriptorPool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor16dependency_countEv"]
    pub fn google_protobuf_FileDescriptor_dependency_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor10dependencyEi"]
    pub fn google_protobuf_FileDescriptor_dependency(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor23public_dependency_countEv"]
    pub fn google_protobuf_FileDescriptor_public_dependency_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor17public_dependencyEi"]
    pub fn google_protobuf_FileDescriptor_public_dependency(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor21weak_dependency_countEv"]
    pub fn google_protobuf_FileDescriptor_weak_dependency_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor15weak_dependencyEi"]
    pub fn google_protobuf_FileDescriptor_weak_dependency(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor18message_type_countEv"]
    pub fn google_protobuf_FileDescriptor_message_type_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor12message_typeEi"]
    pub fn google_protobuf_FileDescriptor_message_type(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor15enum_type_countEv"]
    pub fn google_protobuf_FileDescriptor_enum_type_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor9enum_typeEi"]
    pub fn google_protobuf_FileDescriptor_enum_type(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor13service_countEv"]
    pub fn google_protobuf_FileDescriptor_service_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor7serviceEi"]
    pub fn google_protobuf_FileDescriptor_service(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_ServiceDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor15extension_countEv"]
    pub fn google_protobuf_FileDescriptor_extension_count(
        this: *const google_protobuf_FileDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor9extensionEi"]
    pub fn google_protobuf_FileDescriptor_extension(
        this: *const google_protobuf_FileDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor7optionsEv"]
    pub fn google_protobuf_FileDescriptor_options(
        this: *const google_protobuf_FileDescriptor,
    ) -> *const google_protobuf_FileOptions;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor6syntaxEv"]
    pub fn google_protobuf_FileDescriptor_syntax(
        this: *const google_protobuf_FileDescriptor,
    ) -> google_protobuf_FileDescriptor_Syntax;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14FileDescriptor10SyntaxNameENS1_6SyntaxE"]
    pub fn google_protobuf_FileDescriptor_SyntaxName(
        syntax: google_protobuf_FileDescriptor_Syntax,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor21FindMessageTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindMessageTypeByName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor18FindEnumTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindEnumTypeByName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor19FindEnumValueByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindEnumValueByName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor17FindServiceByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindServiceByName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_ServiceDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor19FindExtensionByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindExtensionByName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor28FindExtensionByLowercaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindExtensionByLowercaseName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor28FindExtensionByCamelcaseNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_FileDescriptor_FindExtensionByCamelcaseName(
        this: *const google_protobuf_FileDescriptor,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor6CopyToEPNS0_19FileDescriptorProtoE"]
    pub fn google_protobuf_FileDescriptor_CopyTo(
        this: *const google_protobuf_FileDescriptor,
        proto: *mut google_protobuf_FileDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor20CopySourceCodeInfoToEPNS0_19FileDescriptorProtoE"]
    pub fn google_protobuf_FileDescriptor_CopySourceCodeInfoTo(
        this: *const google_protobuf_FileDescriptor,
        proto: *mut google_protobuf_FileDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor14CopyJsonNameToEPNS0_19FileDescriptorProtoE"]
    pub fn google_protobuf_FileDescriptor_CopyJsonNameTo(
        this: *const google_protobuf_FileDescriptor,
        proto: *mut google_protobuf_FileDescriptorProto,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor11DebugStringEv"]
    pub fn google_protobuf_FileDescriptor_DebugString(
        this: *const google_protobuf_FileDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor22DebugStringWithOptionsERKNS0_18DebugStringOptionsE"]
    pub fn google_protobuf_FileDescriptor_DebugStringWithOptions(
        this: *const google_protobuf_FileDescriptor,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor14is_placeholderEv"]
    pub fn google_protobuf_FileDescriptor_is_placeholder(
        this: *const google_protobuf_FileDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor17GetSourceLocationEPNS0_14SourceLocationE"]
    pub fn google_protobuf_FileDescriptor_GetSourceLocation(
        this: *const google_protobuf_FileDescriptor,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14FileDescriptor17GetSourceLocationERKNSt3__16vectorIiNS2_9allocatorIiEEEEPNS0_14SourceLocationE"]
    pub fn google_protobuf_FileDescriptor_GetSourceLocation1(
        this: *const google_protobuf_FileDescriptor,
        path: *const std_vector,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool;
}
impl google_protobuf_FileDescriptor {
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        google_protobuf_FileDescriptor_name(self)
    }
    #[inline]
    pub unsafe fn package(&self) -> *const std_string {
        google_protobuf_FileDescriptor_package(self)
    }
    #[inline]
    pub unsafe fn pool(&self) -> *const google_protobuf_DescriptorPool {
        google_protobuf_FileDescriptor_pool(self)
    }
    #[inline]
    pub unsafe fn dependency_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_dependency_count(self)
    }
    #[inline]
    pub unsafe fn dependency(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_FileDescriptor_dependency(self, index)
    }
    #[inline]
    pub unsafe fn public_dependency_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_public_dependency_count(self)
    }
    #[inline]
    pub unsafe fn public_dependency(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_FileDescriptor_public_dependency(self, index)
    }
    #[inline]
    pub unsafe fn weak_dependency_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_weak_dependency_count(self)
    }
    #[inline]
    pub unsafe fn weak_dependency(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_FileDescriptor_weak_dependency(self, index)
    }
    #[inline]
    pub unsafe fn message_type_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_message_type_count(self)
    }
    #[inline]
    pub unsafe fn message_type(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Descriptor {
        google_protobuf_FileDescriptor_message_type(self, index)
    }
    #[inline]
    pub unsafe fn enum_type_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_enum_type_count(self)
    }
    #[inline]
    pub unsafe fn enum_type(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_FileDescriptor_enum_type(self, index)
    }
    #[inline]
    pub unsafe fn service_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_service_count(self)
    }
    #[inline]
    pub unsafe fn service(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_ServiceDescriptor {
        google_protobuf_FileDescriptor_service(self, index)
    }
    #[inline]
    pub unsafe fn extension_count(&self) -> ::std::os::raw::c_int {
        google_protobuf_FileDescriptor_extension_count(self)
    }
    #[inline]
    pub unsafe fn extension(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_FileDescriptor_extension(self, index)
    }
    #[inline]
    pub unsafe fn options(&self) -> *const google_protobuf_FileOptions {
        google_protobuf_FileDescriptor_options(self)
    }
    #[inline]
    pub unsafe fn syntax(&self) -> google_protobuf_FileDescriptor_Syntax {
        google_protobuf_FileDescriptor_syntax(self)
    }
    #[inline]
    pub unsafe fn SyntaxName(
        syntax: google_protobuf_FileDescriptor_Syntax,
    ) -> *const ::std::os::raw::c_char {
        google_protobuf_FileDescriptor_SyntaxName(syntax)
    }
    #[inline]
    pub unsafe fn FindMessageTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor {
        google_protobuf_FileDescriptor_FindMessageTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn FindEnumTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_FileDescriptor_FindEnumTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn FindEnumValueByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_FileDescriptor_FindEnumValueByName(self, name)
    }
    #[inline]
    pub unsafe fn FindServiceByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_ServiceDescriptor {
        google_protobuf_FileDescriptor_FindServiceByName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_FileDescriptor_FindExtensionByName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByLowercaseName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_FileDescriptor_FindExtensionByLowercaseName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByCamelcaseName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_FileDescriptor_FindExtensionByCamelcaseName(self, name)
    }
    #[inline]
    pub unsafe fn CopyTo(&self, proto: *mut google_protobuf_FileDescriptorProto) {
        google_protobuf_FileDescriptor_CopyTo(self, proto)
    }
    #[inline]
    pub unsafe fn CopySourceCodeInfoTo(&self, proto: *mut google_protobuf_FileDescriptorProto) {
        google_protobuf_FileDescriptor_CopySourceCodeInfoTo(self, proto)
    }
    #[inline]
    pub unsafe fn CopyJsonNameTo(&self, proto: *mut google_protobuf_FileDescriptorProto) {
        google_protobuf_FileDescriptor_CopyJsonNameTo(self, proto)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_FileDescriptor_DebugString(self)
    }
    #[inline]
    pub unsafe fn DebugStringWithOptions(
        &self,
        options: *const google_protobuf_DebugStringOptions,
    ) -> std_string {
        google_protobuf_FileDescriptor_DebugStringWithOptions(self, options)
    }
    #[inline]
    pub unsafe fn is_placeholder(&self) -> bool {
        google_protobuf_FileDescriptor_is_placeholder(self)
    }
    #[inline]
    pub unsafe fn GetSourceLocation(
        &self,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_FileDescriptor_GetSourceLocation(self, out_location)
    }
    #[inline]
    pub unsafe fn GetSourceLocation1(
        &self,
        path: *const std_vector,
        out_location: *mut google_protobuf_SourceLocation,
    ) -> bool {
        google_protobuf_FileDescriptor_GetSourceLocation1(self, path, out_location)
    }
}
#[repr(C)]
pub struct google_protobuf_DescriptorPool {
    pub mutex_: *mut google_protobuf_internal_WrappedMutex,
    pub fallback_database_: *mut google_protobuf_DescriptorDatabase,
    pub default_error_collector_: *mut google_protobuf_DescriptorPool_ErrorCollector,
    pub underlay_: *const google_protobuf_DescriptorPool,
    pub tables_: std_unique_ptr,
    pub enforce_dependencies_: bool,
    pub lazily_build_dependencies_: bool,
    pub allow_unknown_: bool,
    pub enforce_weak_: bool,
    pub disallow_enforce_utf8_: bool,
    pub unused_import_track_files_: std_set,
}
#[repr(C)]
pub struct google_protobuf_DescriptorPool_ErrorCollector__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_DescriptorPool_ErrorCollector {
    pub vtable_: *const google_protobuf_DescriptorPool_ErrorCollector__bindgen_vtable,
}
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_NAME:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 0;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_NUMBER:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 1;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_TYPE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 2;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_EXTENDEE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 3;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_DEFAULT_VALUE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 4;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_INPUT_TYPE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 5;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_OUTPUT_TYPE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 6;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_OPTION_NAME:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 7;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_OPTION_VALUE:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 8;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_IMPORT:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 9;
pub const google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation_OTHER:
    google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = 10;
pub type google_protobuf_DescriptorPool_ErrorCollector_ErrorLocation = u32;
#[test]
fn bindgen_test_layout_google_protobuf_DescriptorPool_ErrorCollector() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_DescriptorPool_ErrorCollector>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(google_protobuf_DescriptorPool_ErrorCollector)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_DescriptorPool_ErrorCollector>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(google_protobuf_DescriptorPool_ErrorCollector)
        )
    );
}
pub const google_protobuf_DescriptorPool_PlaceholderType_PLACEHOLDER_MESSAGE:
    google_protobuf_DescriptorPool_PlaceholderType = 0;
pub const google_protobuf_DescriptorPool_PlaceholderType_PLACEHOLDER_ENUM:
    google_protobuf_DescriptorPool_PlaceholderType = 1;
pub const google_protobuf_DescriptorPool_PlaceholderType_PLACEHOLDER_EXTENDABLE_MESSAGE:
    google_protobuf_DescriptorPool_PlaceholderType = 2;
pub type google_protobuf_DescriptorPool_PlaceholderType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_DescriptorPool_Tables {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_google_protobuf_DescriptorPool() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_DescriptorPool>(),
        72usize,
        concat!("Size of: ", stringify!(google_protobuf_DescriptorPool))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_DescriptorPool>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_DescriptorPool))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).mutex_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(mutex_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).fallback_database_
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(fallback_database_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).default_error_collector_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(default_error_collector_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).underlay_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(underlay_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).tables_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(tables_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).enforce_dependencies_
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(enforce_dependencies_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).lazily_build_dependencies_
                as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(lazily_build_dependencies_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).allow_unknown_ as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(allow_unknown_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).enforce_weak_ as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(enforce_weak_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).disallow_enforce_utf8_
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(disallow_enforce_utf8_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_DescriptorPool>())).unused_import_track_files_
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_DescriptorPool),
            "::",
            stringify!(unused_import_track_files_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool14generated_poolEv"]
    pub fn google_protobuf_DescriptorPool_generated_pool() -> *const google_protobuf_DescriptorPool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool14FindFileByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindFileByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool24FindFileContainingSymbolERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindFileContainingSymbol(
        this: *const google_protobuf_DescriptorPool,
        symbol_name: *const std_string,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool21FindMessageTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindMessageTypeByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool15FindFieldByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindFieldByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool19FindExtensionByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindExtensionByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool15FindOneofByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindOneofByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_OneofDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool18FindEnumTypeByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindEnumTypeByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool19FindEnumValueByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindEnumValueByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool17FindServiceByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindServiceByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_ServiceDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool16FindMethodByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindMethodByName(
        this: *const google_protobuf_DescriptorPool,
        name: *const std_string,
    ) -> *const google_protobuf_MethodDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool21FindExtensionByNumberEPKNS0_10DescriptorEi"]
    pub fn google_protobuf_DescriptorPool_FindExtensionByNumber(
        this: *const google_protobuf_DescriptorPool,
        extendee: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool28FindExtensionByPrintableNameEPKNS0_10DescriptorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_FindExtensionByPrintableName(
        this: *const google_protobuf_DescriptorPool,
        extendee: *const google_protobuf_Descriptor,
        printable_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool17FindAllExtensionsEPKNS0_10DescriptorEPNSt3__16vectorIPKNS0_15FieldDescriptorENS5_9allocatorIS9_EEEE"]
    pub fn google_protobuf_DescriptorPool_FindAllExtensions(
        this: *const google_protobuf_DescriptorPool,
        extendee: *const google_protobuf_Descriptor,
        out: *mut std_vector,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool9BuildFileERKNS0_19FileDescriptorProtoE"]
    pub fn google_protobuf_DescriptorPool_BuildFile(
        this: *mut google_protobuf_DescriptorPool,
        proto: *const google_protobuf_FileDescriptorProto,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool25BuildFileCollectingErrorsERKNS0_19FileDescriptorProtoEPNS1_14ErrorCollectorE"]
    pub fn google_protobuf_DescriptorPool_BuildFileCollectingErrors(
        this: *mut google_protobuf_DescriptorPool,
        proto: *const google_protobuf_FileDescriptorProto,
        error_collector: *mut google_protobuf_DescriptorPool_ErrorCollector,
    ) -> *const google_protobuf_FileDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool24InternalAddGeneratedFileEPKvi"]
    pub fn google_protobuf_DescriptorPool_InternalAddGeneratedFile(
        encoded_file_descriptor: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool23internal_generated_poolEv"]
    pub fn google_protobuf_DescriptorPool_internal_generated_pool(
    ) -> *mut google_protobuf_DescriptorPool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool31InternalDontEnforceDependenciesEv"]
    pub fn google_protobuf_DescriptorPool_InternalDontEnforceDependencies(
        this: *mut google_protobuf_DescriptorPool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf14DescriptorPool20InternalIsFileLoadedERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_InternalIsFileLoaded(
        this: *const google_protobuf_DescriptorPool,
        filename: *const std_string,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool24AddUnusedImportTrackFileERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_DescriptorPool_AddUnusedImportTrackFile(
        this: *mut google_protobuf_DescriptorPool,
        file_name: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool27ClearUnusedImportTrackFilesEv"]
    pub fn google_protobuf_DescriptorPool_ClearUnusedImportTrackFiles(
        this: *mut google_protobuf_DescriptorPool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPoolC1Ev"]
    pub fn google_protobuf_DescriptorPool_DescriptorPool(this: *mut google_protobuf_DescriptorPool);
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPoolC1EPNS0_18DescriptorDatabaseEPNS1_14ErrorCollectorE"]
    pub fn google_protobuf_DescriptorPool_DescriptorPool1(
        this: *mut google_protobuf_DescriptorPool,
        fallback_database: *mut google_protobuf_DescriptorDatabase,
        error_collector: *mut google_protobuf_DescriptorPool_ErrorCollector,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPoolC1EPKS1_"]
    pub fn google_protobuf_DescriptorPool_DescriptorPool2(
        this: *mut google_protobuf_DescriptorPool,
        underlay: *const google_protobuf_DescriptorPool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPoolD1Ev"]
    pub fn google_protobuf_DescriptorPool_DescriptorPool_destructor(
        this: *mut google_protobuf_DescriptorPool,
    );
}
impl google_protobuf_DescriptorPool {
    #[inline]
    pub unsafe fn generated_pool() -> *const google_protobuf_DescriptorPool {
        google_protobuf_DescriptorPool_generated_pool()
    }
    #[inline]
    pub unsafe fn FindFileByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_DescriptorPool_FindFileByName(self, name)
    }
    #[inline]
    pub unsafe fn FindFileContainingSymbol(
        &self,
        symbol_name: *const std_string,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_DescriptorPool_FindFileContainingSymbol(self, symbol_name)
    }
    #[inline]
    pub unsafe fn FindMessageTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_Descriptor {
        google_protobuf_DescriptorPool_FindMessageTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn FindFieldByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_DescriptorPool_FindFieldByName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_DescriptorPool_FindExtensionByName(self, name)
    }
    #[inline]
    pub unsafe fn FindOneofByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_OneofDescriptor {
        google_protobuf_DescriptorPool_FindOneofByName(self, name)
    }
    #[inline]
    pub unsafe fn FindEnumTypeByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumDescriptor {
        google_protobuf_DescriptorPool_FindEnumTypeByName(self, name)
    }
    #[inline]
    pub unsafe fn FindEnumValueByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_DescriptorPool_FindEnumValueByName(self, name)
    }
    #[inline]
    pub unsafe fn FindServiceByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_ServiceDescriptor {
        google_protobuf_DescriptorPool_FindServiceByName(self, name)
    }
    #[inline]
    pub unsafe fn FindMethodByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_MethodDescriptor {
        google_protobuf_DescriptorPool_FindMethodByName(self, name)
    }
    #[inline]
    pub unsafe fn FindExtensionByNumber(
        &self,
        extendee: *const google_protobuf_Descriptor,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_DescriptorPool_FindExtensionByNumber(self, extendee, number)
    }
    #[inline]
    pub unsafe fn FindExtensionByPrintableName(
        &self,
        extendee: *const google_protobuf_Descriptor,
        printable_name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_DescriptorPool_FindExtensionByPrintableName(self, extendee, printable_name)
    }
    #[inline]
    pub unsafe fn FindAllExtensions(
        &self,
        extendee: *const google_protobuf_Descriptor,
        out: *mut std_vector,
    ) {
        google_protobuf_DescriptorPool_FindAllExtensions(self, extendee, out)
    }
    #[inline]
    pub unsafe fn BuildFile(
        &mut self,
        proto: *const google_protobuf_FileDescriptorProto,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_DescriptorPool_BuildFile(self, proto)
    }
    #[inline]
    pub unsafe fn BuildFileCollectingErrors(
        &mut self,
        proto: *const google_protobuf_FileDescriptorProto,
        error_collector: *mut google_protobuf_DescriptorPool_ErrorCollector,
    ) -> *const google_protobuf_FileDescriptor {
        google_protobuf_DescriptorPool_BuildFileCollectingErrors(self, proto, error_collector)
    }
    #[inline]
    pub unsafe fn InternalAddGeneratedFile(
        encoded_file_descriptor: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) {
        google_protobuf_DescriptorPool_InternalAddGeneratedFile(encoded_file_descriptor, size)
    }
    #[inline]
    pub unsafe fn internal_generated_pool() -> *mut google_protobuf_DescriptorPool {
        google_protobuf_DescriptorPool_internal_generated_pool()
    }
    #[inline]
    pub unsafe fn InternalDontEnforceDependencies(&mut self) {
        google_protobuf_DescriptorPool_InternalDontEnforceDependencies(self)
    }
    #[inline]
    pub unsafe fn InternalIsFileLoaded(&self, filename: *const std_string) -> bool {
        google_protobuf_DescriptorPool_InternalIsFileLoaded(self, filename)
    }
    #[inline]
    pub unsafe fn AddUnusedImportTrackFile(&mut self, file_name: *const std_string) {
        google_protobuf_DescriptorPool_AddUnusedImportTrackFile(self, file_name)
    }
    #[inline]
    pub unsafe fn ClearUnusedImportTrackFiles(&mut self) {
        google_protobuf_DescriptorPool_ClearUnusedImportTrackFiles(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_DescriptorPool_DescriptorPool(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        fallback_database: *mut google_protobuf_DescriptorDatabase,
        error_collector: *mut google_protobuf_DescriptorPool_ErrorCollector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_DescriptorPool_DescriptorPool1(
            &mut __bindgen_tmp,
            fallback_database,
            error_collector,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(underlay: *const google_protobuf_DescriptorPool) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        google_protobuf_DescriptorPool_DescriptorPool2(&mut __bindgen_tmp, underlay);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        google_protobuf_DescriptorPool_DescriptorPool_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14DescriptorPool14ErrorCollectorD1Ev"]
    pub fn google_protobuf_DescriptorPool_ErrorCollector_ErrorCollector_destructor(
        this: *mut google_protobuf_DescriptorPool_ErrorCollector,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Metadata {
    pub descriptor: *const google_protobuf_Descriptor,
    pub reflection: *const google_protobuf_Reflection,
}
#[test]
fn bindgen_test_layout_google_protobuf_Metadata() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Metadata>(),
        16usize,
        concat!("Size of: ", stringify!(google_protobuf_Metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_Metadata))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Metadata>())).descriptor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Metadata),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Metadata>())).reflection as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Metadata),
            "::",
            stringify!(reflection)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_Message {
    pub _base: google_protobuf_MessageLite,
}
#[test]
fn bindgen_test_layout_google_protobuf_Message() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Message>(),
        8usize,
        concat!("Size of: ", stringify!(google_protobuf_Message))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Message>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_Message))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message16CheckInitializedEv"]
    pub fn google_protobuf_Message_CheckInitialized(this: *const google_protobuf_Message);
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message24FindInitializationErrorsEPNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE"]
    pub fn google_protobuf_Message_FindInitializationErrors(
        this: *const google_protobuf_Message,
        errors: *mut std_vector,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message11DebugStringEv"]
    pub fn google_protobuf_Message_DebugString(this: *const google_protobuf_Message) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message16ShortDebugStringEv"]
    pub fn google_protobuf_Message_ShortDebugString(
        this: *const google_protobuf_Message,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message15Utf8DebugStringEv"]
    pub fn google_protobuf_Message_Utf8DebugString(
        this: *const google_protobuf_Message,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message16PrintDebugStringEv"]
    pub fn google_protobuf_Message_PrintDebugString(this: *const google_protobuf_Message);
}
impl google_protobuf_Message {
    #[inline]
    pub unsafe fn CheckInitialized(&self) {
        google_protobuf_Message_CheckInitialized(self)
    }
    #[inline]
    pub unsafe fn FindInitializationErrors(&self, errors: *mut std_vector) {
        google_protobuf_Message_FindInitializationErrors(self, errors)
    }
    #[inline]
    pub unsafe fn DebugString(&self) -> std_string {
        google_protobuf_Message_DebugString(self)
    }
    #[inline]
    pub unsafe fn ShortDebugString(&self) -> std_string {
        google_protobuf_Message_ShortDebugString(self)
    }
    #[inline]
    pub unsafe fn Utf8DebugString(&self) -> std_string {
        google_protobuf_Message_Utf8DebugString(self)
    }
    #[inline]
    pub unsafe fn PrintDebugString(&self) {
        google_protobuf_Message_PrintDebugString(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message8CopyFromERKS1_"]
    pub fn google_protobuf_Message_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message9MergeFromERKS1_"]
    pub fn google_protobuf_Message_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message25InitializationErrorStringEv"]
    pub fn google_protobuf_Message_InitializationErrorString(
        this: *mut ::std::os::raw::c_void,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message20DiscardUnknownFieldsEv"]
    pub fn google_protobuf_Message_DiscardUnknownFields(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message13SpaceUsedLongEv"]
    pub fn google_protobuf_Message_SpaceUsedLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message11GetTypeNameEv"]
    pub fn google_protobuf_Message_GetTypeName(this: *mut ::std::os::raw::c_void) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message5ClearEv"]
    pub fn google_protobuf_Message_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message13IsInitializedEv"]
    pub fn google_protobuf_Message_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message21CheckTypeAndMergeFromERKNS0_11MessageLiteE"]
    pub fn google_protobuf_Message_CheckTypeAndMergeFrom(
        this: *mut ::std::os::raw::c_void,
        other: *const google_protobuf_MessageLite,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf7Message27MergePartialFromCodedStreamEPNS0_2io16CodedInputStreamE"]
    pub fn google_protobuf_Message_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message12ByteSizeLongEv"]
    pub fn google_protobuf_Message_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf7Message24SerializeWithCachedSizesEPNS0_2io17CodedOutputStreamE"]
    pub fn google_protobuf_Message_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct google_protobuf_Reflection {
    pub descriptor_: *const google_protobuf_Descriptor,
    pub schema_: google_protobuf_internal_ReflectionSchema,
    pub descriptor_pool_: *const google_protobuf_DescriptorPool,
    pub message_factory_: *mut google_protobuf_MessageFactory,
    pub last_non_weak_field_index_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_google_protobuf_Reflection() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_Reflection>(),
        80usize,
        concat!("Size of: ", stringify!(google_protobuf_Reflection))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_Reflection>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_Reflection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Reflection>())).descriptor_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Reflection),
            "::",
            stringify!(descriptor_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Reflection>())).schema_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Reflection),
            "::",
            stringify!(schema_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Reflection>())).descriptor_pool_ as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Reflection),
            "::",
            stringify!(descriptor_pool_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Reflection>())).message_factory_ as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Reflection),
            "::",
            stringify!(message_factory_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<google_protobuf_Reflection>())).last_non_weak_field_index_
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(google_protobuf_Reflection),
            "::",
            stringify!(last_non_weak_field_index_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16GetUnknownFieldsERKNS0_7MessageE"]
    pub fn google_protobuf_Reflection_GetUnknownFields(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
    ) -> *const google_protobuf_UnknownFieldSet;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection20MutableUnknownFieldsEPNS0_7MessageE"]
    pub fn google_protobuf_Reflection_MutableUnknownFields(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
    ) -> *mut google_protobuf_UnknownFieldSet;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection13SpaceUsedLongERKNS0_7MessageE"]
    pub fn google_protobuf_Reflection_SpaceUsedLong(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8HasFieldERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_HasField(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9FieldSizeERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_FieldSize(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10ClearFieldEPNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_ClearField(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8HasOneofERKNS0_7MessageEPKNS0_15OneofDescriptorE"]
    pub fn google_protobuf_Reflection_HasOneof(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10ClearOneofEPNS0_7MessageEPKNS0_15OneofDescriptorE"]
    pub fn google_protobuf_Reflection_ClearOneof(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection23GetOneofFieldDescriptorERKNS0_7MessageEPKNS0_15OneofDescriptorE"]
    pub fn google_protobuf_Reflection_GetOneofFieldDescriptor(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10RemoveLastEPNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_RemoveLast(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection11ReleaseLastEPNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_ReleaseLast(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> *mut google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection4SwapEPNS0_7MessageES3_"]
    pub fn google_protobuf_Reflection_Swap(
        this: *const google_protobuf_Reflection,
        message1: *mut google_protobuf_Message,
        message2: *mut google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10SwapFieldsEPNS0_7MessageES3_RKNSt3__16vectorIPKNS0_15FieldDescriptorENS4_9allocatorIS8_EEEE"]
    pub fn google_protobuf_Reflection_SwapFields(
        this: *const google_protobuf_Reflection,
        message1: *mut google_protobuf_Message,
        message2: *mut google_protobuf_Message,
        fields: *const std_vector,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection12SwapElementsEPNS0_7MessageEPKNS0_15FieldDescriptorEii"]
    pub fn google_protobuf_Reflection_SwapElements(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10ListFieldsERKNS0_7MessageEPNSt3__16vectorIPKNS0_15FieldDescriptorENS5_9allocatorIS9_EEEE"]
    pub fn google_protobuf_Reflection_ListFields(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        output: *mut std_vector,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8GetInt32ERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetInt32(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8GetInt64ERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetInt64(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9GetUInt32ERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetUInt32(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9GetUInt64ERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetUInt64(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8GetFloatERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetFloat(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9GetDoubleERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetDouble(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7GetBoolERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetBool(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9GetStringERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetString(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7GetEnumERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetEnum(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection12GetEnumValueERKNS0_7MessageEPKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_GetEnumValue(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10GetMessageERKNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE"]
    pub fn google_protobuf_Reflection_GetMessage(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *const google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection18GetStringReferenceERKNS0_7MessageEPKNS0_15FieldDescriptorEPNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_GetStringReference(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        scratch: *mut std_string,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8SetInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_SetInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8SetInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEx"]
    pub fn google_protobuf_Reflection_SetInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9SetUInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEj"]
    pub fn google_protobuf_Reflection_SetUInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9SetUInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEy"]
    pub fn google_protobuf_Reflection_SetUInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8SetFloatEPNS0_7MessageEPKNS0_15FieldDescriptorEf"]
    pub fn google_protobuf_Reflection_SetFloat(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9SetDoubleEPNS0_7MessageEPKNS0_15FieldDescriptorEd"]
    pub fn google_protobuf_Reflection_SetDouble(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7SetBoolEPNS0_7MessageEPKNS0_15FieldDescriptorEb"]
    pub fn google_protobuf_Reflection_SetBool(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9SetStringEPNS0_7MessageEPKNS0_15FieldDescriptorERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_SetString(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7SetEnumEPNS0_7MessageEPKNS0_15FieldDescriptorEPKNS0_19EnumValueDescriptorE"]
    pub fn google_protobuf_Reflection_SetEnum(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const google_protobuf_EnumValueDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection12SetEnumValueEPNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_SetEnumValue(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection14MutableMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE"]
    pub fn google_protobuf_Reflection_MutableMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection19SetAllocatedMessageEPNS0_7MessageES3_PKNS0_15FieldDescriptorE"]
    pub fn google_protobuf_Reflection_SetAllocatedMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        sub_message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection14ReleaseMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE"]
    pub fn google_protobuf_Reflection_ReleaseMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16GetRepeatedInt32ERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedInt32(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_int32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16GetRepeatedInt64ERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedInt64(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_int64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17GetRepeatedUInt32ERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedUInt32(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17GetRepeatedUInt64ERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedUInt64(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16GetRepeatedFloatERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedFloat(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17GetRepeatedDoubleERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedDouble(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection15GetRepeatedBoolERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedBool(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17GetRepeatedStringERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedString(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection15GetRepeatedEnumERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedEnum(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection20GetRepeatedEnumValueERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedEnumValue(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection18GetRepeatedMessageERKNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_GetRepeatedMessage(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection26GetRepeatedStringReferenceERKNS0_7MessageEPKNS0_15FieldDescriptorEiPNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_GetRepeatedStringReference(
        this: *const google_protobuf_Reflection,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        scratch: *mut std_string,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16SetRepeatedInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEii"]
    pub fn google_protobuf_Reflection_SetRepeatedInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_int32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16SetRepeatedInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEix"]
    pub fn google_protobuf_Reflection_SetRepeatedInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_int64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17SetRepeatedUInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEij"]
    pub fn google_protobuf_Reflection_SetRepeatedUInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17SetRepeatedUInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEiy"]
    pub fn google_protobuf_Reflection_SetRepeatedUInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection16SetRepeatedFloatEPNS0_7MessageEPKNS0_15FieldDescriptorEif"]
    pub fn google_protobuf_Reflection_SetRepeatedFloat(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17SetRepeatedDoubleEPNS0_7MessageEPKNS0_15FieldDescriptorEid"]
    pub fn google_protobuf_Reflection_SetRepeatedDouble(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection15SetRepeatedBoolEPNS0_7MessageEPKNS0_15FieldDescriptorEib"]
    pub fn google_protobuf_Reflection_SetRepeatedBool(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17SetRepeatedStringEPNS0_7MessageEPKNS0_15FieldDescriptorEiRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_SetRepeatedString(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection15SetRepeatedEnumEPNS0_7MessageEPKNS0_15FieldDescriptorEiPKNS0_19EnumValueDescriptorE"]
    pub fn google_protobuf_Reflection_SetRepeatedEnum(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: *const google_protobuf_EnumValueDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection20SetRepeatedEnumValueEPNS0_7MessageEPKNS0_15FieldDescriptorEii"]
    pub fn google_protobuf_Reflection_SetRepeatedEnumValue(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection22MutableRepeatedMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_MutableRepeatedMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *mut google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8AddInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_AddInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8AddInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEx"]
    pub fn google_protobuf_Reflection_AddInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9AddUInt32EPNS0_7MessageEPKNS0_15FieldDescriptorEj"]
    pub fn google_protobuf_Reflection_AddUInt32(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9AddUInt64EPNS0_7MessageEPKNS0_15FieldDescriptorEy"]
    pub fn google_protobuf_Reflection_AddUInt64(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection8AddFloatEPNS0_7MessageEPKNS0_15FieldDescriptorEf"]
    pub fn google_protobuf_Reflection_AddFloat(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9AddDoubleEPNS0_7MessageEPKNS0_15FieldDescriptorEd"]
    pub fn google_protobuf_Reflection_AddDouble(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7AddBoolEPNS0_7MessageEPKNS0_15FieldDescriptorEb"]
    pub fn google_protobuf_Reflection_AddBool(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection9AddStringEPNS0_7MessageEPKNS0_15FieldDescriptorERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_AddString(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection7AddEnumEPNS0_7MessageEPKNS0_15FieldDescriptorEPKNS0_19EnumValueDescriptorE"]
    pub fn google_protobuf_Reflection_AddEnum(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const google_protobuf_EnumValueDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection12AddEnumValueEPNS0_7MessageEPKNS0_15FieldDescriptorEi"]
    pub fn google_protobuf_Reflection_AddEnumValue(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection10AddMessageEPNS0_7MessageEPKNS0_15FieldDescriptorEPNS0_14MessageFactoryE"]
    pub fn google_protobuf_Reflection_AddMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection19AddAllocatedMessageEPNS0_7MessageEPKNS0_15FieldDescriptorES3_"]
    pub fn google_protobuf_Reflection_AddAllocatedMessage(
        this: *const google_protobuf_Reflection,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        new_entry: *mut google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection24FindKnownExtensionByNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn google_protobuf_Reflection_FindKnownExtensionByName(
        this: *const google_protobuf_Reflection,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection26FindKnownExtensionByNumberEi"]
    pub fn google_protobuf_Reflection_FindKnownExtensionByNumber(
        this: *const google_protobuf_Reflection,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection25SupportsUnknownEnumValuesEv"]
    pub fn google_protobuf_Reflection_SupportsUnknownEnumValues(
        this: *const google_protobuf_Reflection,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK6google8protobuf10Reflection17GetMessageFactoryEv"]
    pub fn google_protobuf_Reflection_GetMessageFactory(
        this: *const google_protobuf_Reflection,
    ) -> *mut google_protobuf_MessageFactory;
}
impl google_protobuf_Reflection {
    #[inline]
    pub unsafe fn GetUnknownFields(
        &self,
        message: *const google_protobuf_Message,
    ) -> *const google_protobuf_UnknownFieldSet {
        google_protobuf_Reflection_GetUnknownFields(self, message)
    }
    #[inline]
    pub unsafe fn MutableUnknownFields(
        &self,
        message: *mut google_protobuf_Message,
    ) -> *mut google_protobuf_UnknownFieldSet {
        google_protobuf_Reflection_MutableUnknownFields(self, message)
    }
    #[inline]
    pub unsafe fn SpaceUsedLong(&self, message: *const google_protobuf_Message) -> usize {
        google_protobuf_Reflection_SpaceUsedLong(self, message)
    }
    #[inline]
    pub unsafe fn HasField(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> bool {
        google_protobuf_Reflection_HasField(self, message, field)
    }
    #[inline]
    pub unsafe fn FieldSize(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int {
        google_protobuf_Reflection_FieldSize(self, message, field)
    }
    #[inline]
    pub unsafe fn ClearField(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) {
        google_protobuf_Reflection_ClearField(self, message, field)
    }
    #[inline]
    pub unsafe fn HasOneof(
        &self,
        message: *const google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    ) -> bool {
        google_protobuf_Reflection_HasOneof(self, message, oneof_descriptor)
    }
    #[inline]
    pub unsafe fn ClearOneof(
        &self,
        message: *mut google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    ) {
        google_protobuf_Reflection_ClearOneof(self, message, oneof_descriptor)
    }
    #[inline]
    pub unsafe fn GetOneofFieldDescriptor(
        &self,
        message: *const google_protobuf_Message,
        oneof_descriptor: *const google_protobuf_OneofDescriptor,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Reflection_GetOneofFieldDescriptor(self, message, oneof_descriptor)
    }
    #[inline]
    pub unsafe fn RemoveLast(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) {
        google_protobuf_Reflection_RemoveLast(self, message, field)
    }
    #[inline]
    pub unsafe fn ReleaseLast(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> *mut google_protobuf_Message {
        google_protobuf_Reflection_ReleaseLast(self, message, field)
    }
    #[inline]
    pub unsafe fn Swap(
        &self,
        message1: *mut google_protobuf_Message,
        message2: *mut google_protobuf_Message,
    ) {
        google_protobuf_Reflection_Swap(self, message1, message2)
    }
    #[inline]
    pub unsafe fn SwapFields(
        &self,
        message1: *mut google_protobuf_Message,
        message2: *mut google_protobuf_Message,
        fields: *const std_vector,
    ) {
        google_protobuf_Reflection_SwapFields(self, message1, message2, fields)
    }
    #[inline]
    pub unsafe fn SwapElements(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    ) {
        google_protobuf_Reflection_SwapElements(self, message, field, index1, index2)
    }
    #[inline]
    pub unsafe fn ListFields(
        &self,
        message: *const google_protobuf_Message,
        output: *mut std_vector,
    ) {
        google_protobuf_Reflection_ListFields(self, message, output)
    }
    #[inline]
    pub unsafe fn GetInt32(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int32 {
        google_protobuf_Reflection_GetInt32(self, message, field)
    }
    #[inline]
    pub unsafe fn GetInt64(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_int64 {
        google_protobuf_Reflection_GetInt64(self, message, field)
    }
    #[inline]
    pub unsafe fn GetUInt32(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint32 {
        google_protobuf_Reflection_GetUInt32(self, message, field)
    }
    #[inline]
    pub unsafe fn GetUInt64(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> google_protobuf_uint64 {
        google_protobuf_Reflection_GetUInt64(self, message, field)
    }
    #[inline]
    pub unsafe fn GetFloat(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> f32 {
        google_protobuf_Reflection_GetFloat(self, message, field)
    }
    #[inline]
    pub unsafe fn GetDouble(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> f64 {
        google_protobuf_Reflection_GetDouble(self, message, field)
    }
    #[inline]
    pub unsafe fn GetBool(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> bool {
        google_protobuf_Reflection_GetBool(self, message, field)
    }
    #[inline]
    pub unsafe fn GetString(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> std_string {
        google_protobuf_Reflection_GetString(self, message, field)
    }
    #[inline]
    pub unsafe fn GetEnum(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_Reflection_GetEnum(self, message, field)
    }
    #[inline]
    pub unsafe fn GetEnumValue(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) -> ::std::os::raw::c_int {
        google_protobuf_Reflection_GetEnumValue(self, message, field)
    }
    #[inline]
    pub unsafe fn GetMessage(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *const google_protobuf_Message {
        google_protobuf_Reflection_GetMessage(self, message, field, factory)
    }
    #[inline]
    pub unsafe fn GetStringReference(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        scratch: *mut std_string,
    ) -> *const std_string {
        google_protobuf_Reflection_GetStringReference(self, message, field, scratch)
    }
    #[inline]
    pub unsafe fn SetInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int32,
    ) {
        google_protobuf_Reflection_SetInt32(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int64,
    ) {
        google_protobuf_Reflection_SetInt64(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetUInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint32,
    ) {
        google_protobuf_Reflection_SetUInt32(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetUInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint64,
    ) {
        google_protobuf_Reflection_SetUInt64(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetFloat(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f32,
    ) {
        google_protobuf_Reflection_SetFloat(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetDouble(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f64,
    ) {
        google_protobuf_Reflection_SetDouble(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetBool(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: bool,
    ) {
        google_protobuf_Reflection_SetBool(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetString(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const std_string,
    ) {
        google_protobuf_Reflection_SetString(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetEnum(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const google_protobuf_EnumValueDescriptor,
    ) {
        google_protobuf_Reflection_SetEnum(self, message, field, value)
    }
    #[inline]
    pub unsafe fn SetEnumValue(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: ::std::os::raw::c_int,
    ) {
        google_protobuf_Reflection_SetEnumValue(self, message, field, value)
    }
    #[inline]
    pub unsafe fn MutableMessage(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message {
        google_protobuf_Reflection_MutableMessage(self, message, field, factory)
    }
    #[inline]
    pub unsafe fn SetAllocatedMessage(
        &self,
        message: *mut google_protobuf_Message,
        sub_message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
    ) {
        google_protobuf_Reflection_SetAllocatedMessage(self, message, sub_message, field)
    }
    #[inline]
    pub unsafe fn ReleaseMessage(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message {
        google_protobuf_Reflection_ReleaseMessage(self, message, field, factory)
    }
    #[inline]
    pub unsafe fn GetRepeatedInt32(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_int32 {
        google_protobuf_Reflection_GetRepeatedInt32(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedInt64(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_int64 {
        google_protobuf_Reflection_GetRepeatedInt64(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedUInt32(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_uint32 {
        google_protobuf_Reflection_GetRepeatedUInt32(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedUInt64(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> google_protobuf_uint64 {
        google_protobuf_Reflection_GetRepeatedUInt64(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedFloat(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> f32 {
        google_protobuf_Reflection_GetRepeatedFloat(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedDouble(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> f64 {
        google_protobuf_Reflection_GetRepeatedDouble(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedBool(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> bool {
        google_protobuf_Reflection_GetRepeatedBool(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedString(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> std_string {
        google_protobuf_Reflection_GetRepeatedString(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedEnum(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_EnumValueDescriptor {
        google_protobuf_Reflection_GetRepeatedEnum(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedEnumValue(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        google_protobuf_Reflection_GetRepeatedEnumValue(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedMessage(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *const google_protobuf_Message {
        google_protobuf_Reflection_GetRepeatedMessage(self, message, field, index)
    }
    #[inline]
    pub unsafe fn GetRepeatedStringReference(
        &self,
        message: *const google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        scratch: *mut std_string,
    ) -> *const std_string {
        google_protobuf_Reflection_GetRepeatedStringReference(self, message, field, index, scratch)
    }
    #[inline]
    pub unsafe fn SetRepeatedInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_int32,
    ) {
        google_protobuf_Reflection_SetRepeatedInt32(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_int64,
    ) {
        google_protobuf_Reflection_SetRepeatedInt64(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedUInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_uint32,
    ) {
        google_protobuf_Reflection_SetRepeatedUInt32(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedUInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: google_protobuf_uint64,
    ) {
        google_protobuf_Reflection_SetRepeatedUInt64(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedFloat(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: f32,
    ) {
        google_protobuf_Reflection_SetRepeatedFloat(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedDouble(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: f64,
    ) {
        google_protobuf_Reflection_SetRepeatedDouble(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedBool(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: bool,
    ) {
        google_protobuf_Reflection_SetRepeatedBool(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedString(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: *const std_string,
    ) {
        google_protobuf_Reflection_SetRepeatedString(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedEnum(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: *const google_protobuf_EnumValueDescriptor,
    ) {
        google_protobuf_Reflection_SetRepeatedEnum(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn SetRepeatedEnumValue(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) {
        google_protobuf_Reflection_SetRepeatedEnumValue(self, message, field, index, value)
    }
    #[inline]
    pub unsafe fn MutableRepeatedMessage(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        index: ::std::os::raw::c_int,
    ) -> *mut google_protobuf_Message {
        google_protobuf_Reflection_MutableRepeatedMessage(self, message, field, index)
    }
    #[inline]
    pub unsafe fn AddInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int32,
    ) {
        google_protobuf_Reflection_AddInt32(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_int64,
    ) {
        google_protobuf_Reflection_AddInt64(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddUInt32(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint32,
    ) {
        google_protobuf_Reflection_AddUInt32(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddUInt64(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: google_protobuf_uint64,
    ) {
        google_protobuf_Reflection_AddUInt64(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddFloat(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f32,
    ) {
        google_protobuf_Reflection_AddFloat(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddDouble(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: f64,
    ) {
        google_protobuf_Reflection_AddDouble(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddBool(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: bool,
    ) {
        google_protobuf_Reflection_AddBool(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddString(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const std_string,
    ) {
        google_protobuf_Reflection_AddString(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddEnum(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: *const google_protobuf_EnumValueDescriptor,
    ) {
        google_protobuf_Reflection_AddEnum(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddEnumValue(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        value: ::std::os::raw::c_int,
    ) {
        google_protobuf_Reflection_AddEnumValue(self, message, field, value)
    }
    #[inline]
    pub unsafe fn AddMessage(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        factory: *mut google_protobuf_MessageFactory,
    ) -> *mut google_protobuf_Message {
        google_protobuf_Reflection_AddMessage(self, message, field, factory)
    }
    #[inline]
    pub unsafe fn AddAllocatedMessage(
        &self,
        message: *mut google_protobuf_Message,
        field: *const google_protobuf_FieldDescriptor,
        new_entry: *mut google_protobuf_Message,
    ) {
        google_protobuf_Reflection_AddAllocatedMessage(self, message, field, new_entry)
    }
    #[inline]
    pub unsafe fn FindKnownExtensionByName(
        &self,
        name: *const std_string,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Reflection_FindKnownExtensionByName(self, name)
    }
    #[inline]
    pub unsafe fn FindKnownExtensionByNumber(
        &self,
        number: ::std::os::raw::c_int,
    ) -> *const google_protobuf_FieldDescriptor {
        google_protobuf_Reflection_FindKnownExtensionByNumber(self, number)
    }
    #[inline]
    pub unsafe fn SupportsUnknownEnumValues(&self) -> bool {
        google_protobuf_Reflection_SupportsUnknownEnumValues(self)
    }
    #[inline]
    pub unsafe fn GetMessageFactory(&self) -> *mut google_protobuf_MessageFactory {
        google_protobuf_Reflection_GetMessageFactory(self)
    }
}
#[repr(C)]
pub struct google_protobuf_MessageFactory__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct google_protobuf_MessageFactory {
    pub vtable_: *const google_protobuf_MessageFactory__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_google_protobuf_MessageFactory() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_MessageFactory>(),
        8usize,
        concat!("Size of: ", stringify!(google_protobuf_MessageFactory))
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_MessageFactory>(),
        8usize,
        concat!("Alignment of ", stringify!(google_protobuf_MessageFactory))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14MessageFactory17generated_factoryEv"]
    pub fn google_protobuf_MessageFactory_generated_factory() -> *mut google_protobuf_MessageFactory;
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14MessageFactory29InternalRegisterGeneratedFileEPKNS0_8internal15DescriptorTableE"]
    pub fn google_protobuf_MessageFactory_InternalRegisterGeneratedFile(
        table: *const google_protobuf_internal_DescriptorTable,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14MessageFactory32InternalRegisterGeneratedMessageEPKNS0_10DescriptorEPKNS0_7MessageE"]
    pub fn google_protobuf_MessageFactory_InternalRegisterGeneratedMessage(
        descriptor: *const google_protobuf_Descriptor,
        prototype: *const google_protobuf_Message,
    );
}
impl google_protobuf_MessageFactory {
    #[inline]
    pub unsafe fn generated_factory() -> *mut google_protobuf_MessageFactory {
        google_protobuf_MessageFactory_generated_factory()
    }
    #[inline]
    pub unsafe fn InternalRegisterGeneratedFile(
        table: *const google_protobuf_internal_DescriptorTable,
    ) {
        google_protobuf_MessageFactory_InternalRegisterGeneratedFile(table)
    }
    #[inline]
    pub unsafe fn InternalRegisterGeneratedMessage(
        descriptor: *const google_protobuf_Descriptor,
        prototype: *const google_protobuf_Message,
    ) {
        google_protobuf_MessageFactory_InternalRegisterGeneratedMessage(descriptor, prototype)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN6google8protobuf14MessageFactoryD1Ev"]
    pub fn google_protobuf_MessageFactory_MessageFactory_destructor(
        this: *mut google_protobuf_MessageFactory,
    );
}
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_SPACE_CENTER:
    krpc_schema_Procedure_GameScene = 0;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_FLIGHT:
    krpc_schema_Procedure_GameScene = 1;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_TRACKING_STATION:
    krpc_schema_Procedure_GameScene = 2;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_EDITOR_VAB:
    krpc_schema_Procedure_GameScene = 3;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_EDITOR_SPH:
    krpc_schema_Procedure_GameScene = 4;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_MISSION_BUILDER:
    krpc_schema_Procedure_GameScene = 5;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_Procedure_GameScene_INT_MIN_SENTINEL_DO_NOT_USE_ : krpc_schema_Procedure_GameScene = -2147483648 ;
pub const krpc_schema_Procedure_GameScene_Procedure_GameScene_Procedure_GameScene_INT_MAX_SENTINEL_DO_NOT_USE_ : krpc_schema_Procedure_GameScene = 2147483647 ;
pub type krpc_schema_Procedure_GameScene = i32;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_NONE: krpc_schema_Type_TypeCode = 0;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_DOUBLE: krpc_schema_Type_TypeCode = 1;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_FLOAT: krpc_schema_Type_TypeCode = 2;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_SINT32: krpc_schema_Type_TypeCode = 3;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_SINT64: krpc_schema_Type_TypeCode = 4;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_UINT32: krpc_schema_Type_TypeCode = 5;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_UINT64: krpc_schema_Type_TypeCode = 6;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_BOOL: krpc_schema_Type_TypeCode = 7;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_STRING: krpc_schema_Type_TypeCode = 8;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_BYTES: krpc_schema_Type_TypeCode = 9;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_CLASS: krpc_schema_Type_TypeCode = 100;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_ENUMERATION: krpc_schema_Type_TypeCode = 101;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_EVENT: krpc_schema_Type_TypeCode = 200;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_PROCEDURE_CALL: krpc_schema_Type_TypeCode = 201;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_STREAM: krpc_schema_Type_TypeCode = 202;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_STATUS: krpc_schema_Type_TypeCode = 203;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_SERVICES: krpc_schema_Type_TypeCode = 204;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_TUPLE: krpc_schema_Type_TypeCode = 300;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_LIST: krpc_schema_Type_TypeCode = 301;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_SET: krpc_schema_Type_TypeCode = 302;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_DICTIONARY: krpc_schema_Type_TypeCode = 303;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_Type_TypeCode_INT_MIN_SENTINEL_DO_NOT_USE_:
    krpc_schema_Type_TypeCode = -2147483648;
pub const krpc_schema_Type_TypeCode_Type_TypeCode_Type_TypeCode_INT_MAX_SENTINEL_DO_NOT_USE_:
    krpc_schema_Type_TypeCode = 2147483647;
pub type krpc_schema_Type_TypeCode = i32;
#[repr(C)]
pub struct krpc_schema_Request {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub calls_: google_protobuf_RepeatedPtrField,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Request_kCallsFieldNumber: krpc_schema_Request__bindgen_ty_1 = 1;
pub type krpc_schema_Request__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Request__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Request_kIndexInFileMessages: ::std::os::raw::c_int = 2;
#[test]
fn bindgen_test_layout_krpc_schema_Request() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Request>(),
        48usize,
        concat!("Size of: ", stringify!(krpc_schema_Request))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Request>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Request>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Request),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Request>())).calls_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Request),
            "::",
            stringify!(calls_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Request>()))._cached_size_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Request),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request16default_instanceEv"]
    pub fn krpc_schema_Request_default_instance() -> *const krpc_schema_Request;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Request_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request8CopyFromERKS1_"]
    pub fn krpc_schema_Request_CopyFrom1(
        this: *mut krpc_schema_Request,
        from: *const krpc_schema_Request,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request9MergeFromERKS1_"]
    pub fn krpc_schema_Request_MergeFrom1(
        this: *mut krpc_schema_Request,
        from: *const krpc_schema_Request,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request10calls_sizeEv"]
    pub fn krpc_schema_Request_calls_size(
        this: *const krpc_schema_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request11clear_callsEv"]
    pub fn krpc_schema_Request_clear_calls(this: *mut krpc_schema_Request);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request13mutable_callsEi"]
    pub fn krpc_schema_Request_mutable_calls(
        this: *mut krpc_schema_Request,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request13mutable_callsEv"]
    pub fn krpc_schema_Request_mutable_calls1(
        this: *mut krpc_schema_Request,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request5callsEi"]
    pub fn krpc_schema_Request_calls(
        this: *const krpc_schema_Request,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request9add_callsEv"]
    pub fn krpc_schema_Request_add_calls(
        this: *mut krpc_schema_Request,
    ) -> *mut krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request5callsEv"]
    pub fn krpc_schema_Request_calls1(
        this: *const krpc_schema_Request,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7RequestC1Ev"]
    pub fn krpc_schema_Request_Request(this: *mut krpc_schema_Request);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7RequestC1ERKS1_"]
    pub fn krpc_schema_Request_Request1(
        this: *mut krpc_schema_Request,
        from: *const krpc_schema_Request,
    );
}
impl krpc_schema_Request {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Request {
        krpc_schema_Request_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Request_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Request) {
        krpc_schema_Request_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Request) {
        krpc_schema_Request_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn calls_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Request_calls_size(self)
    }
    #[inline]
    pub unsafe fn clear_calls(&mut self) {
        krpc_schema_Request_clear_calls(self)
    }
    #[inline]
    pub unsafe fn mutable_calls(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_ProcedureCall {
        krpc_schema_Request_mutable_calls(self, index)
    }
    #[inline]
    pub unsafe fn mutable_calls1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Request_mutable_calls1(self)
    }
    #[inline]
    pub unsafe fn calls(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_ProcedureCall {
        krpc_schema_Request_calls(self, index)
    }
    #[inline]
    pub unsafe fn add_calls(&mut self) -> *mut krpc_schema_ProcedureCall {
        krpc_schema_Request_add_calls(self)
    }
    #[inline]
    pub unsafe fn calls1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Request_calls1(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Request_Request(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Request) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Request_Request1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7RequestD1Ev"]
    pub fn krpc_schema_Request_Request_destructor(this: *mut krpc_schema_Request);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Request_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Request_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request5ClearEv"]
    pub fn krpc_schema_Request_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request13IsInitializedEv"]
    pub fn krpc_schema_Request_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request12ByteSizeLongEv"]
    pub fn krpc_schema_Request_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Request27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Request_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Request_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Request_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Request11GetMetadataEv"]
    pub fn krpc_schema_Request_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_ProcedureCall {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub arguments_: google_protobuf_RepeatedPtrField,
    pub service_: google_protobuf_internal_ArenaStringPtr,
    pub procedure_: google_protobuf_internal_ArenaStringPtr,
    pub service_id_: google_protobuf_uint32,
    pub procedure_id_: google_protobuf_uint32,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_ProcedureCall_kArgumentsFieldNumber: krpc_schema_ProcedureCall__bindgen_ty_1 =
    3;
pub const krpc_schema_ProcedureCall_kServiceFieldNumber: krpc_schema_ProcedureCall__bindgen_ty_1 =
    1;
pub const krpc_schema_ProcedureCall_kProcedureFieldNumber: krpc_schema_ProcedureCall__bindgen_ty_1 =
    2;
pub const krpc_schema_ProcedureCall_kServiceIdFieldNumber: krpc_schema_ProcedureCall__bindgen_ty_1 =
    4;
pub const krpc_schema_ProcedureCall_kProcedureIdFieldNumber:
    krpc_schema_ProcedureCall__bindgen_ty_1 = 5;
pub type krpc_schema_ProcedureCall__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_ProcedureCall__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_ProcedureCall_kIndexInFileMessages: ::std::os::raw::c_int = 3;
#[test]
fn bindgen_test_layout_krpc_schema_ProcedureCall() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_ProcedureCall>(),
        72usize,
        concat!("Size of: ", stringify!(krpc_schema_ProcedureCall))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_ProcedureCall>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_ProcedureCall))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>())).arguments_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(arguments_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>())).service_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(service_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>())).procedure_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(procedure_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>())).service_id_ as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(service_id_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>())).procedure_id_ as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(procedure_id_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_ProcedureCall>()))._cached_size_ as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_ProcedureCall),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall16default_instanceEv"]
    pub fn krpc_schema_ProcedureCall_default_instance() -> *const krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_ProcedureCall_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall8CopyFromERKS1_"]
    pub fn krpc_schema_ProcedureCall_CopyFrom1(
        this: *mut krpc_schema_ProcedureCall,
        from: *const krpc_schema_ProcedureCall,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall9MergeFromERKS1_"]
    pub fn krpc_schema_ProcedureCall_MergeFrom1(
        this: *mut krpc_schema_ProcedureCall,
        from: *const krpc_schema_ProcedureCall,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall14arguments_sizeEv"]
    pub fn krpc_schema_ProcedureCall_arguments_size(
        this: *const krpc_schema_ProcedureCall,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall15clear_argumentsEv"]
    pub fn krpc_schema_ProcedureCall_clear_arguments(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall17mutable_argumentsEi"]
    pub fn krpc_schema_ProcedureCall_mutable_arguments(
        this: *mut krpc_schema_ProcedureCall,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Argument;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall17mutable_argumentsEv"]
    pub fn krpc_schema_ProcedureCall_mutable_arguments1(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall9argumentsEi"]
    pub fn krpc_schema_ProcedureCall_arguments(
        this: *const krpc_schema_ProcedureCall,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Argument;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13add_argumentsEv"]
    pub fn krpc_schema_ProcedureCall_add_arguments(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut krpc_schema_Argument;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall9argumentsEv"]
    pub fn krpc_schema_ProcedureCall_arguments1(
        this: *const krpc_schema_ProcedureCall,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13clear_serviceEv"]
    pub fn krpc_schema_ProcedureCall_clear_service(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall7serviceEv"]
    pub fn krpc_schema_ProcedureCall_service(
        this: *const krpc_schema_ProcedureCall,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall11set_serviceERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_service(
        this: *mut krpc_schema_ProcedureCall,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall11set_serviceEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_service1(
        this: *mut krpc_schema_ProcedureCall,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall11set_serviceEPKc"]
    pub fn krpc_schema_ProcedureCall_set_service2(
        this: *mut krpc_schema_ProcedureCall,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall11set_serviceEPKcm"]
    pub fn krpc_schema_ProcedureCall_set_service3(
        this: *mut krpc_schema_ProcedureCall,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall15mutable_serviceEv"]
    pub fn krpc_schema_ProcedureCall_mutable_service(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall15release_serviceEv"]
    pub fn krpc_schema_ProcedureCall_release_service(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall21set_allocated_serviceEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_allocated_service(
        this: *mut krpc_schema_ProcedureCall,
        service: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall15clear_procedureEv"]
    pub fn krpc_schema_ProcedureCall_clear_procedure(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall9procedureEv"]
    pub fn krpc_schema_ProcedureCall_procedure(
        this: *const krpc_schema_ProcedureCall,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13set_procedureERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_procedure(
        this: *mut krpc_schema_ProcedureCall,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13set_procedureEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_procedure1(
        this: *mut krpc_schema_ProcedureCall,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13set_procedureEPKc"]
    pub fn krpc_schema_ProcedureCall_set_procedure2(
        this: *mut krpc_schema_ProcedureCall,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall13set_procedureEPKcm"]
    pub fn krpc_schema_ProcedureCall_set_procedure3(
        this: *mut krpc_schema_ProcedureCall,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall17mutable_procedureEv"]
    pub fn krpc_schema_ProcedureCall_mutable_procedure(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall17release_procedureEv"]
    pub fn krpc_schema_ProcedureCall_release_procedure(
        this: *mut krpc_schema_ProcedureCall,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall23set_allocated_procedureEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_ProcedureCall_set_allocated_procedure(
        this: *mut krpc_schema_ProcedureCall,
        procedure: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall16clear_service_idEv"]
    pub fn krpc_schema_ProcedureCall_clear_service_id(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall10service_idEv"]
    pub fn krpc_schema_ProcedureCall_service_id(
        this: *const krpc_schema_ProcedureCall,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall14set_service_idEj"]
    pub fn krpc_schema_ProcedureCall_set_service_id(
        this: *mut krpc_schema_ProcedureCall,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall18clear_procedure_idEv"]
    pub fn krpc_schema_ProcedureCall_clear_procedure_id(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall12procedure_idEv"]
    pub fn krpc_schema_ProcedureCall_procedure_id(
        this: *const krpc_schema_ProcedureCall,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall16set_procedure_idEj"]
    pub fn krpc_schema_ProcedureCall_set_procedure_id(
        this: *mut krpc_schema_ProcedureCall,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCallC1Ev"]
    pub fn krpc_schema_ProcedureCall_ProcedureCall(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCallC1ERKS1_"]
    pub fn krpc_schema_ProcedureCall_ProcedureCall1(
        this: *mut krpc_schema_ProcedureCall,
        from: *const krpc_schema_ProcedureCall,
    );
}
impl krpc_schema_ProcedureCall {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_ProcedureCall {
        krpc_schema_ProcedureCall_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_ProcedureCall_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_ProcedureCall) {
        krpc_schema_ProcedureCall_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_ProcedureCall) {
        krpc_schema_ProcedureCall_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn arguments_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_ProcedureCall_arguments_size(self)
    }
    #[inline]
    pub unsafe fn clear_arguments(&mut self) {
        krpc_schema_ProcedureCall_clear_arguments(self)
    }
    #[inline]
    pub unsafe fn mutable_arguments(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Argument {
        krpc_schema_ProcedureCall_mutable_arguments(self, index)
    }
    #[inline]
    pub unsafe fn mutable_arguments1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_ProcedureCall_mutable_arguments1(self)
    }
    #[inline]
    pub unsafe fn arguments(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Argument {
        krpc_schema_ProcedureCall_arguments(self, index)
    }
    #[inline]
    pub unsafe fn add_arguments(&mut self) -> *mut krpc_schema_Argument {
        krpc_schema_ProcedureCall_add_arguments(self)
    }
    #[inline]
    pub unsafe fn arguments1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_ProcedureCall_arguments1(self)
    }
    #[inline]
    pub unsafe fn clear_service(&mut self) {
        krpc_schema_ProcedureCall_clear_service(self)
    }
    #[inline]
    pub unsafe fn service(&self) -> *const std_string {
        krpc_schema_ProcedureCall_service(self)
    }
    #[inline]
    pub unsafe fn set_service(&mut self, value: *const std_string) {
        krpc_schema_ProcedureCall_set_service(self, value)
    }
    #[inline]
    pub unsafe fn set_service1(&mut self, value: *mut std_string) {
        krpc_schema_ProcedureCall_set_service1(self, value)
    }
    #[inline]
    pub unsafe fn set_service2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_ProcedureCall_set_service2(self, value)
    }
    #[inline]
    pub unsafe fn set_service3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_ProcedureCall_set_service3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_service(&mut self) -> *mut std_string {
        krpc_schema_ProcedureCall_mutable_service(self)
    }
    #[inline]
    pub unsafe fn release_service(&mut self) -> *mut std_string {
        krpc_schema_ProcedureCall_release_service(self)
    }
    #[inline]
    pub unsafe fn set_allocated_service(&mut self, service: *mut std_string) {
        krpc_schema_ProcedureCall_set_allocated_service(self, service)
    }
    #[inline]
    pub unsafe fn clear_procedure(&mut self) {
        krpc_schema_ProcedureCall_clear_procedure(self)
    }
    #[inline]
    pub unsafe fn procedure(&self) -> *const std_string {
        krpc_schema_ProcedureCall_procedure(self)
    }
    #[inline]
    pub unsafe fn set_procedure(&mut self, value: *const std_string) {
        krpc_schema_ProcedureCall_set_procedure(self, value)
    }
    #[inline]
    pub unsafe fn set_procedure1(&mut self, value: *mut std_string) {
        krpc_schema_ProcedureCall_set_procedure1(self, value)
    }
    #[inline]
    pub unsafe fn set_procedure2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_ProcedureCall_set_procedure2(self, value)
    }
    #[inline]
    pub unsafe fn set_procedure3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_ProcedureCall_set_procedure3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_procedure(&mut self) -> *mut std_string {
        krpc_schema_ProcedureCall_mutable_procedure(self)
    }
    #[inline]
    pub unsafe fn release_procedure(&mut self) -> *mut std_string {
        krpc_schema_ProcedureCall_release_procedure(self)
    }
    #[inline]
    pub unsafe fn set_allocated_procedure(&mut self, procedure: *mut std_string) {
        krpc_schema_ProcedureCall_set_allocated_procedure(self, procedure)
    }
    #[inline]
    pub unsafe fn clear_service_id(&mut self) {
        krpc_schema_ProcedureCall_clear_service_id(self)
    }
    #[inline]
    pub unsafe fn service_id(&self) -> google_protobuf_uint32 {
        krpc_schema_ProcedureCall_service_id(self)
    }
    #[inline]
    pub unsafe fn set_service_id(&mut self, value: google_protobuf_uint32) {
        krpc_schema_ProcedureCall_set_service_id(self, value)
    }
    #[inline]
    pub unsafe fn clear_procedure_id(&mut self) {
        krpc_schema_ProcedureCall_clear_procedure_id(self)
    }
    #[inline]
    pub unsafe fn procedure_id(&self) -> google_protobuf_uint32 {
        krpc_schema_ProcedureCall_procedure_id(self)
    }
    #[inline]
    pub unsafe fn set_procedure_id(&mut self, value: google_protobuf_uint32) {
        krpc_schema_ProcedureCall_set_procedure_id(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_ProcedureCall_ProcedureCall(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_ProcedureCall) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_ProcedureCall_ProcedureCall1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCallD1Ev"]
    pub fn krpc_schema_ProcedureCall_ProcedureCall_destructor(this: *mut krpc_schema_ProcedureCall);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_ProcedureCall_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_ProcedureCall_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall5ClearEv"]
    pub fn krpc_schema_ProcedureCall_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall13IsInitializedEv"]
    pub fn krpc_schema_ProcedureCall_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall12ByteSizeLongEv"]
    pub fn krpc_schema_ProcedureCall_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema13ProcedureCall27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_ProcedureCall_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_ProcedureCall_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_ProcedureCall_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema13ProcedureCall11GetMetadataEv"]
    pub fn krpc_schema_ProcedureCall_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Argument {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub value_: google_protobuf_internal_ArenaStringPtr,
    pub position_: google_protobuf_uint32,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Argument_kValueFieldNumber: krpc_schema_Argument__bindgen_ty_1 = 2;
pub const krpc_schema_Argument_kPositionFieldNumber: krpc_schema_Argument__bindgen_ty_1 = 1;
pub type krpc_schema_Argument__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Argument__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Argument_kIndexInFileMessages: ::std::os::raw::c_int = 4;
#[test]
fn bindgen_test_layout_krpc_schema_Argument() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Argument>(),
        32usize,
        concat!("Size of: ", stringify!(krpc_schema_Argument))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Argument>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Argument))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Argument>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Argument),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Argument>())).value_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Argument),
            "::",
            stringify!(value_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Argument>())).position_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Argument),
            "::",
            stringify!(position_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Argument>()))._cached_size_ as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Argument),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument16default_instanceEv"]
    pub fn krpc_schema_Argument_default_instance() -> *const krpc_schema_Argument;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Argument_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument8CopyFromERKS1_"]
    pub fn krpc_schema_Argument_CopyFrom1(
        this: *mut krpc_schema_Argument,
        from: *const krpc_schema_Argument,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9MergeFromERKS1_"]
    pub fn krpc_schema_Argument_MergeFrom1(
        this: *mut krpc_schema_Argument,
        from: *const krpc_schema_Argument,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument11clear_valueEv"]
    pub fn krpc_schema_Argument_clear_value(this: *mut krpc_schema_Argument);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument5valueEv"]
    pub fn krpc_schema_Argument_value(this: *const krpc_schema_Argument) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9set_valueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Argument_set_value(
        this: *mut krpc_schema_Argument,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9set_valueEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Argument_set_value1(this: *mut krpc_schema_Argument, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9set_valueEPKc"]
    pub fn krpc_schema_Argument_set_value2(
        this: *mut krpc_schema_Argument,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9set_valueEPKvm"]
    pub fn krpc_schema_Argument_set_value3(
        this: *mut krpc_schema_Argument,
        value: *const ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument13mutable_valueEv"]
    pub fn krpc_schema_Argument_mutable_value(this: *mut krpc_schema_Argument) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument13release_valueEv"]
    pub fn krpc_schema_Argument_release_value(this: *mut krpc_schema_Argument) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument19set_allocated_valueEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Argument_set_allocated_value(
        this: *mut krpc_schema_Argument,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument14clear_positionEv"]
    pub fn krpc_schema_Argument_clear_position(this: *mut krpc_schema_Argument);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument8positionEv"]
    pub fn krpc_schema_Argument_position(
        this: *const krpc_schema_Argument,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument12set_positionEj"]
    pub fn krpc_schema_Argument_set_position(
        this: *mut krpc_schema_Argument,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ArgumentC1Ev"]
    pub fn krpc_schema_Argument_Argument(this: *mut krpc_schema_Argument);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ArgumentC1ERKS1_"]
    pub fn krpc_schema_Argument_Argument1(
        this: *mut krpc_schema_Argument,
        from: *const krpc_schema_Argument,
    );
}
impl krpc_schema_Argument {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Argument {
        krpc_schema_Argument_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Argument_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Argument) {
        krpc_schema_Argument_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Argument) {
        krpc_schema_Argument_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_value(&mut self) {
        krpc_schema_Argument_clear_value(self)
    }
    #[inline]
    pub unsafe fn value(&self) -> *const std_string {
        krpc_schema_Argument_value(self)
    }
    #[inline]
    pub unsafe fn set_value(&mut self, value: *const std_string) {
        krpc_schema_Argument_set_value(self, value)
    }
    #[inline]
    pub unsafe fn set_value1(&mut self, value: *mut std_string) {
        krpc_schema_Argument_set_value1(self, value)
    }
    #[inline]
    pub unsafe fn set_value2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Argument_set_value2(self, value)
    }
    #[inline]
    pub unsafe fn set_value3(&mut self, value: *const ::std::os::raw::c_void, size: usize) {
        krpc_schema_Argument_set_value3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_value(&mut self) -> *mut std_string {
        krpc_schema_Argument_mutable_value(self)
    }
    #[inline]
    pub unsafe fn release_value(&mut self) -> *mut std_string {
        krpc_schema_Argument_release_value(self)
    }
    #[inline]
    pub unsafe fn set_allocated_value(&mut self, value: *mut std_string) {
        krpc_schema_Argument_set_allocated_value(self, value)
    }
    #[inline]
    pub unsafe fn clear_position(&mut self) {
        krpc_schema_Argument_clear_position(self)
    }
    #[inline]
    pub unsafe fn position(&self) -> google_protobuf_uint32 {
        krpc_schema_Argument_position(self)
    }
    #[inline]
    pub unsafe fn set_position(&mut self, value: google_protobuf_uint32) {
        krpc_schema_Argument_set_position(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Argument_Argument(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Argument) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Argument_Argument1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ArgumentD1Ev"]
    pub fn krpc_schema_Argument_Argument_destructor(this: *mut krpc_schema_Argument);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Argument_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Argument_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument5ClearEv"]
    pub fn krpc_schema_Argument_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument13IsInitializedEv"]
    pub fn krpc_schema_Argument_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument12ByteSizeLongEv"]
    pub fn krpc_schema_Argument_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Argument27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Argument_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Argument_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Argument_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Argument11GetMetadataEv"]
    pub fn krpc_schema_Argument_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Services {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub services_: google_protobuf_RepeatedPtrField,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Services_kServicesFieldNumber: krpc_schema_Services__bindgen_ty_1 = 1;
pub type krpc_schema_Services__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Services__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Services_kIndexInFileMessages: ::std::os::raw::c_int = 10;
#[test]
fn bindgen_test_layout_krpc_schema_Services() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Services>(),
        48usize,
        concat!("Size of: ", stringify!(krpc_schema_Services))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Services>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Services))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Services>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Services),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Services>())).services_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Services),
            "::",
            stringify!(services_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Services>()))._cached_size_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Services),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services16default_instanceEv"]
    pub fn krpc_schema_Services_default_instance() -> *const krpc_schema_Services;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Services_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services8CopyFromERKS1_"]
    pub fn krpc_schema_Services_CopyFrom1(
        this: *mut krpc_schema_Services,
        from: *const krpc_schema_Services,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services9MergeFromERKS1_"]
    pub fn krpc_schema_Services_MergeFrom1(
        this: *mut krpc_schema_Services,
        from: *const krpc_schema_Services,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services13services_sizeEv"]
    pub fn krpc_schema_Services_services_size(
        this: *const krpc_schema_Services,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services14clear_servicesEv"]
    pub fn krpc_schema_Services_clear_services(this: *mut krpc_schema_Services);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services16mutable_servicesEi"]
    pub fn krpc_schema_Services_mutable_services(
        this: *mut krpc_schema_Services,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Service;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services16mutable_servicesEv"]
    pub fn krpc_schema_Services_mutable_services1(
        this: *mut krpc_schema_Services,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services8servicesEi"]
    pub fn krpc_schema_Services_services(
        this: *const krpc_schema_Services,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Service;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services12add_servicesEv"]
    pub fn krpc_schema_Services_add_services(
        this: *mut krpc_schema_Services,
    ) -> *mut krpc_schema_Service;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services8servicesEv"]
    pub fn krpc_schema_Services_services1(
        this: *const krpc_schema_Services,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ServicesC1Ev"]
    pub fn krpc_schema_Services_Services(this: *mut krpc_schema_Services);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ServicesC1ERKS1_"]
    pub fn krpc_schema_Services_Services1(
        this: *mut krpc_schema_Services,
        from: *const krpc_schema_Services,
    );
}
impl krpc_schema_Services {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Services {
        krpc_schema_Services_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Services_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Services) {
        krpc_schema_Services_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Services) {
        krpc_schema_Services_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn services_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Services_services_size(self)
    }
    #[inline]
    pub unsafe fn clear_services(&mut self) {
        krpc_schema_Services_clear_services(self)
    }
    #[inline]
    pub unsafe fn mutable_services(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Service {
        krpc_schema_Services_mutable_services(self, index)
    }
    #[inline]
    pub unsafe fn mutable_services1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Services_mutable_services1(self)
    }
    #[inline]
    pub unsafe fn services(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Service {
        krpc_schema_Services_services(self, index)
    }
    #[inline]
    pub unsafe fn add_services(&mut self) -> *mut krpc_schema_Service {
        krpc_schema_Services_add_services(self)
    }
    #[inline]
    pub unsafe fn services1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Services_services1(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Services_Services(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Services) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Services_Services1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8ServicesD1Ev"]
    pub fn krpc_schema_Services_Services_destructor(this: *mut krpc_schema_Services);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Services_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Services_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services5ClearEv"]
    pub fn krpc_schema_Services_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services13IsInitializedEv"]
    pub fn krpc_schema_Services_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services12ByteSizeLongEv"]
    pub fn krpc_schema_Services_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema8Services27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Services_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Services_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Services_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema8Services11GetMetadataEv"]
    pub fn krpc_schema_Services_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Service {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub procedures_: google_protobuf_RepeatedPtrField,
    pub classes_: google_protobuf_RepeatedPtrField,
    pub enumerations_: google_protobuf_RepeatedPtrField,
    pub exceptions_: google_protobuf_RepeatedPtrField,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Service_kProceduresFieldNumber: krpc_schema_Service__bindgen_ty_1 = 2;
pub const krpc_schema_Service_kClassesFieldNumber: krpc_schema_Service__bindgen_ty_1 = 3;
pub const krpc_schema_Service_kEnumerationsFieldNumber: krpc_schema_Service__bindgen_ty_1 = 4;
pub const krpc_schema_Service_kExceptionsFieldNumber: krpc_schema_Service__bindgen_ty_1 = 5;
pub const krpc_schema_Service_kNameFieldNumber: krpc_schema_Service__bindgen_ty_1 = 1;
pub const krpc_schema_Service_kDocumentationFieldNumber: krpc_schema_Service__bindgen_ty_1 = 6;
pub type krpc_schema_Service__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Service__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Service_kIndexInFileMessages: ::std::os::raw::c_int = 11;
#[test]
fn bindgen_test_layout_krpc_schema_Service() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Service>(),
        136usize,
        concat!("Size of: ", stringify!(krpc_schema_Service))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Service>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Service))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Service>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Service>())).procedures_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(procedures_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Service>())).classes_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(classes_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Service>())).enumerations_ as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(enumerations_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Service>())).exceptions_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(exceptions_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Service>())).name_ as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Service>())).documentation_ as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Service>()))._cached_size_ as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Service),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service16default_instanceEv"]
    pub fn krpc_schema_Service_default_instance() -> *const krpc_schema_Service;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Service_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8CopyFromERKS1_"]
    pub fn krpc_schema_Service_CopyFrom1(
        this: *mut krpc_schema_Service,
        from: *const krpc_schema_Service,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service9MergeFromERKS1_"]
    pub fn krpc_schema_Service_MergeFrom1(
        this: *mut krpc_schema_Service,
        from: *const krpc_schema_Service,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service15procedures_sizeEv"]
    pub fn krpc_schema_Service_procedures_size(
        this: *const krpc_schema_Service,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service16clear_proceduresEv"]
    pub fn krpc_schema_Service_clear_procedures(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18mutable_proceduresEi"]
    pub fn krpc_schema_Service_mutable_procedures(
        this: *mut krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Procedure;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18mutable_proceduresEv"]
    pub fn krpc_schema_Service_mutable_procedures1(
        this: *mut krpc_schema_Service,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service10proceduresEi"]
    pub fn krpc_schema_Service_procedures(
        this: *const krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Procedure;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service14add_proceduresEv"]
    pub fn krpc_schema_Service_add_procedures(
        this: *mut krpc_schema_Service,
    ) -> *mut krpc_schema_Procedure;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service10proceduresEv"]
    pub fn krpc_schema_Service_procedures1(
        this: *const krpc_schema_Service,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service12classes_sizeEv"]
    pub fn krpc_schema_Service_classes_size(
        this: *const krpc_schema_Service,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service13clear_classesEv"]
    pub fn krpc_schema_Service_clear_classes(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service15mutable_classesEi"]
    pub fn krpc_schema_Service_mutable_classes(
        this: *mut krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Class;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service15mutable_classesEv"]
    pub fn krpc_schema_Service_mutable_classes1(
        this: *mut krpc_schema_Service,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service7classesEi"]
    pub fn krpc_schema_Service_classes(
        this: *const krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Class;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service11add_classesEv"]
    pub fn krpc_schema_Service_add_classes(
        this: *mut krpc_schema_Service,
    ) -> *mut krpc_schema_Class;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service7classesEv"]
    pub fn krpc_schema_Service_classes1(
        this: *const krpc_schema_Service,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service17enumerations_sizeEv"]
    pub fn krpc_schema_Service_enumerations_size(
        this: *const krpc_schema_Service,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18clear_enumerationsEv"]
    pub fn krpc_schema_Service_clear_enumerations(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service20mutable_enumerationsEi"]
    pub fn krpc_schema_Service_mutable_enumerations(
        this: *mut krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Enumeration;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service20mutable_enumerationsEv"]
    pub fn krpc_schema_Service_mutable_enumerations1(
        this: *mut krpc_schema_Service,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service12enumerationsEi"]
    pub fn krpc_schema_Service_enumerations(
        this: *const krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Enumeration;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service16add_enumerationsEv"]
    pub fn krpc_schema_Service_add_enumerations(
        this: *mut krpc_schema_Service,
    ) -> *mut krpc_schema_Enumeration;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service12enumerationsEv"]
    pub fn krpc_schema_Service_enumerations1(
        this: *const krpc_schema_Service,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service15exceptions_sizeEv"]
    pub fn krpc_schema_Service_exceptions_size(
        this: *const krpc_schema_Service,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service16clear_exceptionsEv"]
    pub fn krpc_schema_Service_clear_exceptions(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18mutable_exceptionsEi"]
    pub fn krpc_schema_Service_mutable_exceptions(
        this: *mut krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Exception;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18mutable_exceptionsEv"]
    pub fn krpc_schema_Service_mutable_exceptions1(
        this: *mut krpc_schema_Service,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service10exceptionsEi"]
    pub fn krpc_schema_Service_exceptions(
        this: *const krpc_schema_Service,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Exception;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service14add_exceptionsEv"]
    pub fn krpc_schema_Service_add_exceptions(
        this: *mut krpc_schema_Service,
    ) -> *mut krpc_schema_Exception;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service10exceptionsEv"]
    pub fn krpc_schema_Service_exceptions1(
        this: *const krpc_schema_Service,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service10clear_nameEv"]
    pub fn krpc_schema_Service_clear_name(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service4nameEv"]
    pub fn krpc_schema_Service_name(this: *const krpc_schema_Service) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_name(this: *mut krpc_schema_Service, value: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_name1(this: *mut krpc_schema_Service, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8set_nameEPKc"]
    pub fn krpc_schema_Service_set_name2(
        this: *mut krpc_schema_Service,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8set_nameEPKcm"]
    pub fn krpc_schema_Service_set_name3(
        this: *mut krpc_schema_Service,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service12mutable_nameEv"]
    pub fn krpc_schema_Service_mutable_name(this: *mut krpc_schema_Service) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service12release_nameEv"]
    pub fn krpc_schema_Service_release_name(this: *mut krpc_schema_Service) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_allocated_name(
        this: *mut krpc_schema_Service,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service19clear_documentationEv"]
    pub fn krpc_schema_Service_clear_documentation(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service13documentationEv"]
    pub fn krpc_schema_Service_documentation(this: *const krpc_schema_Service)
        -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_documentation(
        this: *mut krpc_schema_Service,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_documentation1(
        this: *mut krpc_schema_Service,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service17set_documentationEPKc"]
    pub fn krpc_schema_Service_set_documentation2(
        this: *mut krpc_schema_Service,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service17set_documentationEPKcm"]
    pub fn krpc_schema_Service_set_documentation3(
        this: *mut krpc_schema_Service,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service21mutable_documentationEv"]
    pub fn krpc_schema_Service_mutable_documentation(
        this: *mut krpc_schema_Service,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service21release_documentationEv"]
    pub fn krpc_schema_Service_release_documentation(
        this: *mut krpc_schema_Service,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Service_set_allocated_documentation(
        this: *mut krpc_schema_Service,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7ServiceC1Ev"]
    pub fn krpc_schema_Service_Service(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7ServiceC1ERKS1_"]
    pub fn krpc_schema_Service_Service1(
        this: *mut krpc_schema_Service,
        from: *const krpc_schema_Service,
    );
}
impl krpc_schema_Service {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Service {
        krpc_schema_Service_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Service_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Service) {
        krpc_schema_Service_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Service) {
        krpc_schema_Service_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn procedures_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Service_procedures_size(self)
    }
    #[inline]
    pub unsafe fn clear_procedures(&mut self) {
        krpc_schema_Service_clear_procedures(self)
    }
    #[inline]
    pub unsafe fn mutable_procedures(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Procedure {
        krpc_schema_Service_mutable_procedures(self, index)
    }
    #[inline]
    pub unsafe fn mutable_procedures1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Service_mutable_procedures1(self)
    }
    #[inline]
    pub unsafe fn procedures(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Procedure {
        krpc_schema_Service_procedures(self, index)
    }
    #[inline]
    pub unsafe fn add_procedures(&mut self) -> *mut krpc_schema_Procedure {
        krpc_schema_Service_add_procedures(self)
    }
    #[inline]
    pub unsafe fn procedures1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Service_procedures1(self)
    }
    #[inline]
    pub unsafe fn classes_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Service_classes_size(self)
    }
    #[inline]
    pub unsafe fn clear_classes(&mut self) {
        krpc_schema_Service_clear_classes(self)
    }
    #[inline]
    pub unsafe fn mutable_classes(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Class {
        krpc_schema_Service_mutable_classes(self, index)
    }
    #[inline]
    pub unsafe fn mutable_classes1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Service_mutable_classes1(self)
    }
    #[inline]
    pub unsafe fn classes(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Class {
        krpc_schema_Service_classes(self, index)
    }
    #[inline]
    pub unsafe fn add_classes(&mut self) -> *mut krpc_schema_Class {
        krpc_schema_Service_add_classes(self)
    }
    #[inline]
    pub unsafe fn classes1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Service_classes1(self)
    }
    #[inline]
    pub unsafe fn enumerations_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Service_enumerations_size(self)
    }
    #[inline]
    pub unsafe fn clear_enumerations(&mut self) {
        krpc_schema_Service_clear_enumerations(self)
    }
    #[inline]
    pub unsafe fn mutable_enumerations(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Enumeration {
        krpc_schema_Service_mutable_enumerations(self, index)
    }
    #[inline]
    pub unsafe fn mutable_enumerations1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Service_mutable_enumerations1(self)
    }
    #[inline]
    pub unsafe fn enumerations(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Enumeration {
        krpc_schema_Service_enumerations(self, index)
    }
    #[inline]
    pub unsafe fn add_enumerations(&mut self) -> *mut krpc_schema_Enumeration {
        krpc_schema_Service_add_enumerations(self)
    }
    #[inline]
    pub unsafe fn enumerations1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Service_enumerations1(self)
    }
    #[inline]
    pub unsafe fn exceptions_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Service_exceptions_size(self)
    }
    #[inline]
    pub unsafe fn clear_exceptions(&mut self) {
        krpc_schema_Service_clear_exceptions(self)
    }
    #[inline]
    pub unsafe fn mutable_exceptions(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Exception {
        krpc_schema_Service_mutable_exceptions(self, index)
    }
    #[inline]
    pub unsafe fn mutable_exceptions1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Service_mutable_exceptions1(self)
    }
    #[inline]
    pub unsafe fn exceptions(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Exception {
        krpc_schema_Service_exceptions(self, index)
    }
    #[inline]
    pub unsafe fn add_exceptions(&mut self) -> *mut krpc_schema_Exception {
        krpc_schema_Service_add_exceptions(self)
    }
    #[inline]
    pub unsafe fn exceptions1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Service_exceptions1(self)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Service_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Service_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Service_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Service_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Service_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Service_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Service_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Service_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Service_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_Service_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_Service_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_Service_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_Service_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Service_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Service_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_Service_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_Service_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_Service_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Service_Service(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Service) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Service_Service1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7ServiceD1Ev"]
    pub fn krpc_schema_Service_Service_destructor(this: *mut krpc_schema_Service);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Service_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Service_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service5ClearEv"]
    pub fn krpc_schema_Service_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service13IsInitializedEv"]
    pub fn krpc_schema_Service_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service12ByteSizeLongEv"]
    pub fn krpc_schema_Service_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema7Service27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Service_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Service_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Service_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema7Service11GetMetadataEv"]
    pub fn krpc_schema_Service_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Procedure {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub parameters_: google_protobuf_RepeatedPtrField,
    pub game_scenes_: google_protobuf_RepeatedField,
    pub _game_scenes_cached_byte_size_: std_atomic,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub return_type_: *mut krpc_schema_Type,
    pub return_is_nullable_: bool,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Procedure_kParametersFieldNumber: krpc_schema_Procedure__bindgen_ty_1 = 2;
pub const krpc_schema_Procedure_kGameScenesFieldNumber: krpc_schema_Procedure__bindgen_ty_1 = 6;
pub const krpc_schema_Procedure_kNameFieldNumber: krpc_schema_Procedure__bindgen_ty_1 = 1;
pub const krpc_schema_Procedure_kDocumentationFieldNumber: krpc_schema_Procedure__bindgen_ty_1 = 5;
pub const krpc_schema_Procedure_kReturnTypeFieldNumber: krpc_schema_Procedure__bindgen_ty_1 = 3;
pub const krpc_schema_Procedure_kReturnIsNullableFieldNumber: krpc_schema_Procedure__bindgen_ty_1 =
    4;
pub type krpc_schema_Procedure__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Procedure__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Procedure_kIndexInFileMessages: ::std::os::raw::c_int = 12;
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure12SPACE_CENTERE"]
    pub static krpc_schema_Procedure_SPACE_CENTER: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure6FLIGHTE"]
    pub static krpc_schema_Procedure_FLIGHT: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure16TRACKING_STATIONE"]
    pub static krpc_schema_Procedure_TRACKING_STATION: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure10EDITOR_VABE"]
    pub static krpc_schema_Procedure_EDITOR_VAB: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure10EDITOR_SPHE"]
    pub static krpc_schema_Procedure_EDITOR_SPH: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure15MISSION_BUILDERE"]
    pub static krpc_schema_Procedure_MISSION_BUILDER: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure13GameScene_MINE"]
    pub static krpc_schema_Procedure_GameScene_MIN: krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure13GameScene_MAXE"]
    pub static krpc_schema_Procedure_GameScene_MAX: krpc_schema_Procedure_GameScene;
}
pub const krpc_schema_Procedure_GameScene_ARRAYSIZE: ::std::os::raw::c_int = 6;
#[test]
fn bindgen_test_layout_krpc_schema_Procedure() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Procedure>(),
        96usize,
        concat!("Size of: ", stringify!(krpc_schema_Procedure))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Procedure>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Procedure))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>())).parameters_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(parameters_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>())).game_scenes_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(game_scenes_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>()))._game_scenes_cached_byte_size_
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(_game_scenes_cached_byte_size_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Procedure>())).name_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>())).documentation_ as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>())).return_type_ as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(return_type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>())).return_is_nullable_ as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(return_is_nullable_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Procedure>()))._cached_size_ as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Procedure),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure16default_instanceEv"]
    pub fn krpc_schema_Procedure_default_instance() -> *const krpc_schema_Procedure;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Procedure_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8CopyFromERKS1_"]
    pub fn krpc_schema_Procedure_CopyFrom1(
        this: *mut krpc_schema_Procedure,
        from: *const krpc_schema_Procedure,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure9MergeFromERKS1_"]
    pub fn krpc_schema_Procedure_MergeFrom1(
        this: *mut krpc_schema_Procedure,
        from: *const krpc_schema_Procedure,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure15parameters_sizeEv"]
    pub fn krpc_schema_Procedure_parameters_size(
        this: *const krpc_schema_Procedure,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure16clear_parametersEv"]
    pub fn krpc_schema_Procedure_clear_parameters(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure18mutable_parametersEi"]
    pub fn krpc_schema_Procedure_mutable_parameters(
        this: *mut krpc_schema_Procedure,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Parameter;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure18mutable_parametersEv"]
    pub fn krpc_schema_Procedure_mutable_parameters1(
        this: *mut krpc_schema_Procedure,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure10parametersEi"]
    pub fn krpc_schema_Procedure_parameters(
        this: *const krpc_schema_Procedure,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Parameter;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure14add_parametersEv"]
    pub fn krpc_schema_Procedure_add_parameters(
        this: *mut krpc_schema_Procedure,
    ) -> *mut krpc_schema_Parameter;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure10parametersEv"]
    pub fn krpc_schema_Procedure_parameters1(
        this: *const krpc_schema_Procedure,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure16game_scenes_sizeEv"]
    pub fn krpc_schema_Procedure_game_scenes_size(
        this: *const krpc_schema_Procedure,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17clear_game_scenesEv"]
    pub fn krpc_schema_Procedure_clear_game_scenes(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure11game_scenesEi"]
    pub fn krpc_schema_Procedure_game_scenes(
        this: *const krpc_schema_Procedure,
        index: ::std::os::raw::c_int,
    ) -> krpc_schema_Procedure_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure15set_game_scenesEiNS0_19Procedure_GameSceneE"]
    pub fn krpc_schema_Procedure_set_game_scenes(
        this: *mut krpc_schema_Procedure,
        index: ::std::os::raw::c_int,
        value: krpc_schema_Procedure_GameScene,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure15add_game_scenesENS0_19Procedure_GameSceneE"]
    pub fn krpc_schema_Procedure_add_game_scenes(
        this: *mut krpc_schema_Procedure,
        value: krpc_schema_Procedure_GameScene,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure11game_scenesEv"]
    pub fn krpc_schema_Procedure_game_scenes1(
        this: *const krpc_schema_Procedure,
    ) -> *const google_protobuf_RepeatedField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure19mutable_game_scenesEv"]
    pub fn krpc_schema_Procedure_mutable_game_scenes(
        this: *mut krpc_schema_Procedure,
    ) -> *mut google_protobuf_RepeatedField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure10clear_nameEv"]
    pub fn krpc_schema_Procedure_clear_name(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure4nameEv"]
    pub fn krpc_schema_Procedure_name(this: *const krpc_schema_Procedure) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_name(
        this: *mut krpc_schema_Procedure,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_name1(
        this: *mut krpc_schema_Procedure,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8set_nameEPKc"]
    pub fn krpc_schema_Procedure_set_name2(
        this: *mut krpc_schema_Procedure,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8set_nameEPKcm"]
    pub fn krpc_schema_Procedure_set_name3(
        this: *mut krpc_schema_Procedure,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure12mutable_nameEv"]
    pub fn krpc_schema_Procedure_mutable_name(this: *mut krpc_schema_Procedure) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure12release_nameEv"]
    pub fn krpc_schema_Procedure_release_name(this: *mut krpc_schema_Procedure) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_allocated_name(
        this: *mut krpc_schema_Procedure,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure19clear_documentationEv"]
    pub fn krpc_schema_Procedure_clear_documentation(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure13documentationEv"]
    pub fn krpc_schema_Procedure_documentation(
        this: *const krpc_schema_Procedure,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_documentation(
        this: *mut krpc_schema_Procedure,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_documentation1(
        this: *mut krpc_schema_Procedure,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17set_documentationEPKc"]
    pub fn krpc_schema_Procedure_set_documentation2(
        this: *mut krpc_schema_Procedure,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17set_documentationEPKcm"]
    pub fn krpc_schema_Procedure_set_documentation3(
        this: *mut krpc_schema_Procedure,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure21mutable_documentationEv"]
    pub fn krpc_schema_Procedure_mutable_documentation(
        this: *mut krpc_schema_Procedure,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure21release_documentationEv"]
    pub fn krpc_schema_Procedure_release_documentation(
        this: *mut krpc_schema_Procedure,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Procedure_set_allocated_documentation(
        this: *mut krpc_schema_Procedure,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure15has_return_typeEv"]
    pub fn krpc_schema_Procedure_has_return_type(this: *const krpc_schema_Procedure) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure17clear_return_typeEv"]
    pub fn krpc_schema_Procedure_clear_return_type(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure11return_typeEv"]
    pub fn krpc_schema_Procedure_return_type(
        this: *const krpc_schema_Procedure,
    ) -> *const krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure19release_return_typeEv"]
    pub fn krpc_schema_Procedure_release_return_type(
        this: *mut krpc_schema_Procedure,
    ) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure19mutable_return_typeEv"]
    pub fn krpc_schema_Procedure_mutable_return_type(
        this: *mut krpc_schema_Procedure,
    ) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure25set_allocated_return_typeEPNS0_4TypeE"]
    pub fn krpc_schema_Procedure_set_allocated_return_type(
        this: *mut krpc_schema_Procedure,
        return_type: *mut krpc_schema_Type,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure24clear_return_is_nullableEv"]
    pub fn krpc_schema_Procedure_clear_return_is_nullable(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure18return_is_nullableEv"]
    pub fn krpc_schema_Procedure_return_is_nullable(this: *const krpc_schema_Procedure) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure22set_return_is_nullableEb"]
    pub fn krpc_schema_Procedure_set_return_is_nullable(
        this: *mut krpc_schema_Procedure,
        value: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ProcedureC1Ev"]
    pub fn krpc_schema_Procedure_Procedure(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ProcedureC1ERKS1_"]
    pub fn krpc_schema_Procedure_Procedure1(
        this: *mut krpc_schema_Procedure,
        from: *const krpc_schema_Procedure,
    );
}
impl krpc_schema_Procedure {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Procedure {
        krpc_schema_Procedure_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Procedure_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Procedure) {
        krpc_schema_Procedure_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Procedure) {
        krpc_schema_Procedure_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn parameters_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Procedure_parameters_size(self)
    }
    #[inline]
    pub unsafe fn clear_parameters(&mut self) {
        krpc_schema_Procedure_clear_parameters(self)
    }
    #[inline]
    pub unsafe fn mutable_parameters(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Parameter {
        krpc_schema_Procedure_mutable_parameters(self, index)
    }
    #[inline]
    pub unsafe fn mutable_parameters1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Procedure_mutable_parameters1(self)
    }
    #[inline]
    pub unsafe fn parameters(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Parameter {
        krpc_schema_Procedure_parameters(self, index)
    }
    #[inline]
    pub unsafe fn add_parameters(&mut self) -> *mut krpc_schema_Parameter {
        krpc_schema_Procedure_add_parameters(self)
    }
    #[inline]
    pub unsafe fn parameters1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Procedure_parameters1(self)
    }
    #[inline]
    pub unsafe fn game_scenes_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Procedure_game_scenes_size(self)
    }
    #[inline]
    pub unsafe fn clear_game_scenes(&mut self) {
        krpc_schema_Procedure_clear_game_scenes(self)
    }
    #[inline]
    pub unsafe fn game_scenes(
        &self,
        index: ::std::os::raw::c_int,
    ) -> krpc_schema_Procedure_GameScene {
        krpc_schema_Procedure_game_scenes(self, index)
    }
    #[inline]
    pub unsafe fn set_game_scenes(
        &mut self,
        index: ::std::os::raw::c_int,
        value: krpc_schema_Procedure_GameScene,
    ) {
        krpc_schema_Procedure_set_game_scenes(self, index, value)
    }
    #[inline]
    pub unsafe fn add_game_scenes(&mut self, value: krpc_schema_Procedure_GameScene) {
        krpc_schema_Procedure_add_game_scenes(self, value)
    }
    #[inline]
    pub unsafe fn game_scenes1(&self) -> *const google_protobuf_RepeatedField {
        krpc_schema_Procedure_game_scenes1(self)
    }
    #[inline]
    pub unsafe fn mutable_game_scenes(&mut self) -> *mut google_protobuf_RepeatedField {
        krpc_schema_Procedure_mutable_game_scenes(self)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Procedure_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Procedure_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Procedure_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Procedure_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Procedure_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Procedure_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Procedure_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Procedure_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Procedure_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_Procedure_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_Procedure_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_Procedure_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_Procedure_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Procedure_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Procedure_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_Procedure_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_Procedure_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_Procedure_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn has_return_type(&self) -> bool {
        krpc_schema_Procedure_has_return_type(self)
    }
    #[inline]
    pub unsafe fn clear_return_type(&mut self) {
        krpc_schema_Procedure_clear_return_type(self)
    }
    #[inline]
    pub unsafe fn return_type(&self) -> *const krpc_schema_Type {
        krpc_schema_Procedure_return_type(self)
    }
    #[inline]
    pub unsafe fn release_return_type(&mut self) -> *mut krpc_schema_Type {
        krpc_schema_Procedure_release_return_type(self)
    }
    #[inline]
    pub unsafe fn mutable_return_type(&mut self) -> *mut krpc_schema_Type {
        krpc_schema_Procedure_mutable_return_type(self)
    }
    #[inline]
    pub unsafe fn set_allocated_return_type(&mut self, return_type: *mut krpc_schema_Type) {
        krpc_schema_Procedure_set_allocated_return_type(self, return_type)
    }
    #[inline]
    pub unsafe fn clear_return_is_nullable(&mut self) {
        krpc_schema_Procedure_clear_return_is_nullable(self)
    }
    #[inline]
    pub unsafe fn return_is_nullable(&self) -> bool {
        krpc_schema_Procedure_return_is_nullable(self)
    }
    #[inline]
    pub unsafe fn set_return_is_nullable(&mut self, value: bool) {
        krpc_schema_Procedure_set_return_is_nullable(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Procedure_Procedure(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Procedure) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Procedure_Procedure1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ProcedureD1Ev"]
    pub fn krpc_schema_Procedure_Procedure_destructor(this: *mut krpc_schema_Procedure);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Procedure_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Procedure_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure5ClearEv"]
    pub fn krpc_schema_Procedure_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure13IsInitializedEv"]
    pub fn krpc_schema_Procedure_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure12ByteSizeLongEv"]
    pub fn krpc_schema_Procedure_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Procedure27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Procedure_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Procedure_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Procedure_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Procedure11GetMetadataEv"]
    pub fn krpc_schema_Procedure_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Parameter {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub default_value_: google_protobuf_internal_ArenaStringPtr,
    pub type_: *mut krpc_schema_Type,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Parameter_kNameFieldNumber: krpc_schema_Parameter__bindgen_ty_1 = 1;
pub const krpc_schema_Parameter_kDefaultValueFieldNumber: krpc_schema_Parameter__bindgen_ty_1 = 3;
pub const krpc_schema_Parameter_kTypeFieldNumber: krpc_schema_Parameter__bindgen_ty_1 = 2;
pub type krpc_schema_Parameter__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Parameter__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Parameter_kIndexInFileMessages: ::std::os::raw::c_int = 13;
#[test]
fn bindgen_test_layout_krpc_schema_Parameter() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Parameter>(),
        48usize,
        concat!("Size of: ", stringify!(krpc_schema_Parameter))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Parameter>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Parameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Parameter>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Parameter),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Parameter>())).name_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Parameter),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Parameter>())).default_value_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Parameter),
            "::",
            stringify!(default_value_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Parameter>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Parameter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Parameter>()))._cached_size_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Parameter),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter16default_instanceEv"]
    pub fn krpc_schema_Parameter_default_instance() -> *const krpc_schema_Parameter;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Parameter_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8CopyFromERKS1_"]
    pub fn krpc_schema_Parameter_CopyFrom1(
        this: *mut krpc_schema_Parameter,
        from: *const krpc_schema_Parameter,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter9MergeFromERKS1_"]
    pub fn krpc_schema_Parameter_MergeFrom1(
        this: *mut krpc_schema_Parameter,
        from: *const krpc_schema_Parameter,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter10clear_nameEv"]
    pub fn krpc_schema_Parameter_clear_name(this: *mut krpc_schema_Parameter);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter4nameEv"]
    pub fn krpc_schema_Parameter_name(this: *const krpc_schema_Parameter) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_name(
        this: *mut krpc_schema_Parameter,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_name1(
        this: *mut krpc_schema_Parameter,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8set_nameEPKc"]
    pub fn krpc_schema_Parameter_set_name2(
        this: *mut krpc_schema_Parameter,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8set_nameEPKcm"]
    pub fn krpc_schema_Parameter_set_name3(
        this: *mut krpc_schema_Parameter,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter12mutable_nameEv"]
    pub fn krpc_schema_Parameter_mutable_name(this: *mut krpc_schema_Parameter) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter12release_nameEv"]
    pub fn krpc_schema_Parameter_release_name(this: *mut krpc_schema_Parameter) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_allocated_name(
        this: *mut krpc_schema_Parameter,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter19clear_default_valueEv"]
    pub fn krpc_schema_Parameter_clear_default_value(this: *mut krpc_schema_Parameter);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter13default_valueEv"]
    pub fn krpc_schema_Parameter_default_value(
        this: *const krpc_schema_Parameter,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter17set_default_valueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_default_value(
        this: *mut krpc_schema_Parameter,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter17set_default_valueEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_default_value1(
        this: *mut krpc_schema_Parameter,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter17set_default_valueEPKc"]
    pub fn krpc_schema_Parameter_set_default_value2(
        this: *mut krpc_schema_Parameter,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter17set_default_valueEPKvm"]
    pub fn krpc_schema_Parameter_set_default_value3(
        this: *mut krpc_schema_Parameter,
        value: *const ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter21mutable_default_valueEv"]
    pub fn krpc_schema_Parameter_mutable_default_value(
        this: *mut krpc_schema_Parameter,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter21release_default_valueEv"]
    pub fn krpc_schema_Parameter_release_default_value(
        this: *mut krpc_schema_Parameter,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter27set_allocated_default_valueEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Parameter_set_allocated_default_value(
        this: *mut krpc_schema_Parameter,
        default_value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter8has_typeEv"]
    pub fn krpc_schema_Parameter_has_type(this: *const krpc_schema_Parameter) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter10clear_typeEv"]
    pub fn krpc_schema_Parameter_clear_type(this: *mut krpc_schema_Parameter);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter4typeEv"]
    pub fn krpc_schema_Parameter_type(
        this: *const krpc_schema_Parameter,
    ) -> *const krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter12release_typeEv"]
    pub fn krpc_schema_Parameter_release_type(
        this: *mut krpc_schema_Parameter,
    ) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter12mutable_typeEv"]
    pub fn krpc_schema_Parameter_mutable_type(
        this: *mut krpc_schema_Parameter,
    ) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter18set_allocated_typeEPNS0_4TypeE"]
    pub fn krpc_schema_Parameter_set_allocated_type(
        this: *mut krpc_schema_Parameter,
        type_: *mut krpc_schema_Type,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ParameterC1Ev"]
    pub fn krpc_schema_Parameter_Parameter(this: *mut krpc_schema_Parameter);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ParameterC1ERKS1_"]
    pub fn krpc_schema_Parameter_Parameter1(
        this: *mut krpc_schema_Parameter,
        from: *const krpc_schema_Parameter,
    );
}
impl krpc_schema_Parameter {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Parameter {
        krpc_schema_Parameter_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Parameter_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Parameter) {
        krpc_schema_Parameter_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Parameter) {
        krpc_schema_Parameter_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Parameter_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Parameter_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Parameter_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Parameter_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Parameter_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Parameter_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Parameter_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Parameter_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Parameter_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_default_value(&mut self) {
        krpc_schema_Parameter_clear_default_value(self)
    }
    #[inline]
    pub unsafe fn default_value(&self) -> *const std_string {
        krpc_schema_Parameter_default_value(self)
    }
    #[inline]
    pub unsafe fn set_default_value(&mut self, value: *const std_string) {
        krpc_schema_Parameter_set_default_value(self, value)
    }
    #[inline]
    pub unsafe fn set_default_value1(&mut self, value: *mut std_string) {
        krpc_schema_Parameter_set_default_value1(self, value)
    }
    #[inline]
    pub unsafe fn set_default_value2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Parameter_set_default_value2(self, value)
    }
    #[inline]
    pub unsafe fn set_default_value3(&mut self, value: *const ::std::os::raw::c_void, size: usize) {
        krpc_schema_Parameter_set_default_value3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_default_value(&mut self) -> *mut std_string {
        krpc_schema_Parameter_mutable_default_value(self)
    }
    #[inline]
    pub unsafe fn release_default_value(&mut self) -> *mut std_string {
        krpc_schema_Parameter_release_default_value(self)
    }
    #[inline]
    pub unsafe fn set_allocated_default_value(&mut self, default_value: *mut std_string) {
        krpc_schema_Parameter_set_allocated_default_value(self, default_value)
    }
    #[inline]
    pub unsafe fn has_type(&self) -> bool {
        krpc_schema_Parameter_has_type(self)
    }
    #[inline]
    pub unsafe fn clear_type(&mut self) {
        krpc_schema_Parameter_clear_type(self)
    }
    #[inline]
    pub unsafe fn type_(&self) -> *const krpc_schema_Type {
        krpc_schema_Parameter_type(self)
    }
    #[inline]
    pub unsafe fn release_type(&mut self) -> *mut krpc_schema_Type {
        krpc_schema_Parameter_release_type(self)
    }
    #[inline]
    pub unsafe fn mutable_type(&mut self) -> *mut krpc_schema_Type {
        krpc_schema_Parameter_mutable_type(self)
    }
    #[inline]
    pub unsafe fn set_allocated_type(&mut self, type_: *mut krpc_schema_Type) {
        krpc_schema_Parameter_set_allocated_type(self, type_)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Parameter_Parameter(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Parameter) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Parameter_Parameter1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ParameterD1Ev"]
    pub fn krpc_schema_Parameter_Parameter_destructor(this: *mut krpc_schema_Parameter);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Parameter_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Parameter_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter5ClearEv"]
    pub fn krpc_schema_Parameter_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter13IsInitializedEv"]
    pub fn krpc_schema_Parameter_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter12ByteSizeLongEv"]
    pub fn krpc_schema_Parameter_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Parameter27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Parameter_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Parameter_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Parameter_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Parameter11GetMetadataEv"]
    pub fn krpc_schema_Parameter_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Class {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Class_kNameFieldNumber: krpc_schema_Class__bindgen_ty_1 = 1;
pub const krpc_schema_Class_kDocumentationFieldNumber: krpc_schema_Class__bindgen_ty_1 = 2;
pub type krpc_schema_Class__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Class__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Class_kIndexInFileMessages: ::std::os::raw::c_int = 14;
#[test]
fn bindgen_test_layout_krpc_schema_Class() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Class>(),
        40usize,
        concat!("Size of: ", stringify!(krpc_schema_Class))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Class>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Class))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Class>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Class),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Class>())).name_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Class),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Class>())).documentation_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Class),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Class>()))._cached_size_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Class),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class16default_instanceEv"]
    pub fn krpc_schema_Class_default_instance() -> *const krpc_schema_Class;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Class_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8CopyFromERKS1_"]
    pub fn krpc_schema_Class_CopyFrom1(
        this: *mut krpc_schema_Class,
        from: *const krpc_schema_Class,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class9MergeFromERKS1_"]
    pub fn krpc_schema_Class_MergeFrom1(
        this: *mut krpc_schema_Class,
        from: *const krpc_schema_Class,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class10clear_nameEv"]
    pub fn krpc_schema_Class_clear_name(this: *mut krpc_schema_Class);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class4nameEv"]
    pub fn krpc_schema_Class_name(this: *const krpc_schema_Class) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_name(this: *mut krpc_schema_Class, value: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_name1(this: *mut krpc_schema_Class, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8set_nameEPKc"]
    pub fn krpc_schema_Class_set_name2(
        this: *mut krpc_schema_Class,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8set_nameEPKcm"]
    pub fn krpc_schema_Class_set_name3(
        this: *mut krpc_schema_Class,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class12mutable_nameEv"]
    pub fn krpc_schema_Class_mutable_name(this: *mut krpc_schema_Class) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class12release_nameEv"]
    pub fn krpc_schema_Class_release_name(this: *mut krpc_schema_Class) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_allocated_name(
        this: *mut krpc_schema_Class,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class19clear_documentationEv"]
    pub fn krpc_schema_Class_clear_documentation(this: *mut krpc_schema_Class);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class13documentationEv"]
    pub fn krpc_schema_Class_documentation(this: *const krpc_schema_Class) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_documentation(
        this: *mut krpc_schema_Class,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_documentation1(
        this: *mut krpc_schema_Class,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class17set_documentationEPKc"]
    pub fn krpc_schema_Class_set_documentation2(
        this: *mut krpc_schema_Class,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class17set_documentationEPKcm"]
    pub fn krpc_schema_Class_set_documentation3(
        this: *mut krpc_schema_Class,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class21mutable_documentationEv"]
    pub fn krpc_schema_Class_mutable_documentation(this: *mut krpc_schema_Class)
        -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class21release_documentationEv"]
    pub fn krpc_schema_Class_release_documentation(this: *mut krpc_schema_Class)
        -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Class_set_allocated_documentation(
        this: *mut krpc_schema_Class,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5ClassC1Ev"]
    pub fn krpc_schema_Class_Class(this: *mut krpc_schema_Class);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5ClassC1ERKS1_"]
    pub fn krpc_schema_Class_Class1(this: *mut krpc_schema_Class, from: *const krpc_schema_Class);
}
impl krpc_schema_Class {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Class {
        krpc_schema_Class_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Class_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Class) {
        krpc_schema_Class_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Class) {
        krpc_schema_Class_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Class_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Class_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Class_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Class_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Class_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Class_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Class_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Class_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Class_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_Class_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_Class_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_Class_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_Class_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Class_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Class_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_Class_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_Class_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_Class_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Class_Class(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Class) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Class_Class1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5ClassD1Ev"]
    pub fn krpc_schema_Class_Class_destructor(this: *mut krpc_schema_Class);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Class_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Class_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class5ClearEv"]
    pub fn krpc_schema_Class_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class13IsInitializedEv"]
    pub fn krpc_schema_Class_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class12ByteSizeLongEv"]
    pub fn krpc_schema_Class_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Class27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Class_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Class_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Class_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Class11GetMetadataEv"]
    pub fn krpc_schema_Class_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Enumeration {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub values_: google_protobuf_RepeatedPtrField,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Enumeration_kValuesFieldNumber: krpc_schema_Enumeration__bindgen_ty_1 = 2;
pub const krpc_schema_Enumeration_kNameFieldNumber: krpc_schema_Enumeration__bindgen_ty_1 = 1;
pub const krpc_schema_Enumeration_kDocumentationFieldNumber: krpc_schema_Enumeration__bindgen_ty_1 =
    3;
pub type krpc_schema_Enumeration__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Enumeration__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Enumeration_kIndexInFileMessages: ::std::os::raw::c_int = 15;
#[test]
fn bindgen_test_layout_krpc_schema_Enumeration() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Enumeration>(),
        64usize,
        concat!("Size of: ", stringify!(krpc_schema_Enumeration))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Enumeration>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Enumeration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Enumeration>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Enumeration),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Enumeration>())).values_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Enumeration),
            "::",
            stringify!(values_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Enumeration>())).name_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Enumeration),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Enumeration>())).documentation_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Enumeration),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Enumeration>()))._cached_size_ as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Enumeration),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration16default_instanceEv"]
    pub fn krpc_schema_Enumeration_default_instance() -> *const krpc_schema_Enumeration;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Enumeration_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8CopyFromERKS1_"]
    pub fn krpc_schema_Enumeration_CopyFrom1(
        this: *mut krpc_schema_Enumeration,
        from: *const krpc_schema_Enumeration,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration9MergeFromERKS1_"]
    pub fn krpc_schema_Enumeration_MergeFrom1(
        this: *mut krpc_schema_Enumeration,
        from: *const krpc_schema_Enumeration,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration11values_sizeEv"]
    pub fn krpc_schema_Enumeration_values_size(
        this: *const krpc_schema_Enumeration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration12clear_valuesEv"]
    pub fn krpc_schema_Enumeration_clear_values(this: *mut krpc_schema_Enumeration);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration14mutable_valuesEi"]
    pub fn krpc_schema_Enumeration_mutable_values(
        this: *mut krpc_schema_Enumeration,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_EnumerationValue;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration14mutable_valuesEv"]
    pub fn krpc_schema_Enumeration_mutable_values1(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration6valuesEi"]
    pub fn krpc_schema_Enumeration_values(
        this: *const krpc_schema_Enumeration,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_EnumerationValue;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration10add_valuesEv"]
    pub fn krpc_schema_Enumeration_add_values(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut krpc_schema_EnumerationValue;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration6valuesEv"]
    pub fn krpc_schema_Enumeration_values1(
        this: *const krpc_schema_Enumeration,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration10clear_nameEv"]
    pub fn krpc_schema_Enumeration_clear_name(this: *mut krpc_schema_Enumeration);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration4nameEv"]
    pub fn krpc_schema_Enumeration_name(this: *const krpc_schema_Enumeration) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_name(
        this: *mut krpc_schema_Enumeration,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_name1(
        this: *mut krpc_schema_Enumeration,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8set_nameEPKc"]
    pub fn krpc_schema_Enumeration_set_name2(
        this: *mut krpc_schema_Enumeration,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8set_nameEPKcm"]
    pub fn krpc_schema_Enumeration_set_name3(
        this: *mut krpc_schema_Enumeration,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration12mutable_nameEv"]
    pub fn krpc_schema_Enumeration_mutable_name(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration12release_nameEv"]
    pub fn krpc_schema_Enumeration_release_name(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_allocated_name(
        this: *mut krpc_schema_Enumeration,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration19clear_documentationEv"]
    pub fn krpc_schema_Enumeration_clear_documentation(this: *mut krpc_schema_Enumeration);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration13documentationEv"]
    pub fn krpc_schema_Enumeration_documentation(
        this: *const krpc_schema_Enumeration,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_documentation(
        this: *mut krpc_schema_Enumeration,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_documentation1(
        this: *mut krpc_schema_Enumeration,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration17set_documentationEPKc"]
    pub fn krpc_schema_Enumeration_set_documentation2(
        this: *mut krpc_schema_Enumeration,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration17set_documentationEPKcm"]
    pub fn krpc_schema_Enumeration_set_documentation3(
        this: *mut krpc_schema_Enumeration,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration21mutable_documentationEv"]
    pub fn krpc_schema_Enumeration_mutable_documentation(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration21release_documentationEv"]
    pub fn krpc_schema_Enumeration_release_documentation(
        this: *mut krpc_schema_Enumeration,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Enumeration_set_allocated_documentation(
        this: *mut krpc_schema_Enumeration,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11EnumerationC1Ev"]
    pub fn krpc_schema_Enumeration_Enumeration(this: *mut krpc_schema_Enumeration);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11EnumerationC1ERKS1_"]
    pub fn krpc_schema_Enumeration_Enumeration1(
        this: *mut krpc_schema_Enumeration,
        from: *const krpc_schema_Enumeration,
    );
}
impl krpc_schema_Enumeration {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Enumeration {
        krpc_schema_Enumeration_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Enumeration_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Enumeration) {
        krpc_schema_Enumeration_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Enumeration) {
        krpc_schema_Enumeration_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn values_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Enumeration_values_size(self)
    }
    #[inline]
    pub unsafe fn clear_values(&mut self) {
        krpc_schema_Enumeration_clear_values(self)
    }
    #[inline]
    pub unsafe fn mutable_values(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_EnumerationValue {
        krpc_schema_Enumeration_mutable_values(self, index)
    }
    #[inline]
    pub unsafe fn mutable_values1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Enumeration_mutable_values1(self)
    }
    #[inline]
    pub unsafe fn values(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_EnumerationValue {
        krpc_schema_Enumeration_values(self, index)
    }
    #[inline]
    pub unsafe fn add_values(&mut self) -> *mut krpc_schema_EnumerationValue {
        krpc_schema_Enumeration_add_values(self)
    }
    #[inline]
    pub unsafe fn values1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Enumeration_values1(self)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Enumeration_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Enumeration_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Enumeration_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Enumeration_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Enumeration_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Enumeration_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Enumeration_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Enumeration_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Enumeration_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_Enumeration_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_Enumeration_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_Enumeration_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_Enumeration_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Enumeration_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Enumeration_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_Enumeration_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_Enumeration_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_Enumeration_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Enumeration_Enumeration(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Enumeration) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Enumeration_Enumeration1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11EnumerationD1Ev"]
    pub fn krpc_schema_Enumeration_Enumeration_destructor(this: *mut krpc_schema_Enumeration);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Enumeration_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Enumeration_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration5ClearEv"]
    pub fn krpc_schema_Enumeration_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration13IsInitializedEv"]
    pub fn krpc_schema_Enumeration_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration12ByteSizeLongEv"]
    pub fn krpc_schema_Enumeration_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema11Enumeration27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Enumeration_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Enumeration_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Enumeration_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema11Enumeration11GetMetadataEv"]
    pub fn krpc_schema_Enumeration_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_EnumerationValue {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub value_: google_protobuf_int32,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_EnumerationValue_kNameFieldNumber:
    krpc_schema_EnumerationValue__bindgen_ty_1 = 1;
pub const krpc_schema_EnumerationValue_kDocumentationFieldNumber:
    krpc_schema_EnumerationValue__bindgen_ty_1 = 3;
pub const krpc_schema_EnumerationValue_kValueFieldNumber:
    krpc_schema_EnumerationValue__bindgen_ty_1 = 2;
pub type krpc_schema_EnumerationValue__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_EnumerationValue__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_EnumerationValue_kIndexInFileMessages: ::std::os::raw::c_int = 16;
#[test]
fn bindgen_test_layout_krpc_schema_EnumerationValue() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_EnumerationValue>(),
        40usize,
        concat!("Size of: ", stringify!(krpc_schema_EnumerationValue))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_EnumerationValue>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_EnumerationValue))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_EnumerationValue>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_EnumerationValue),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_EnumerationValue>())).name_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_EnumerationValue),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_EnumerationValue>())).documentation_ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_EnumerationValue),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_EnumerationValue>())).value_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_EnumerationValue),
            "::",
            stringify!(value_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_EnumerationValue>()))._cached_size_ as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_EnumerationValue),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue16default_instanceEv"]
    pub fn krpc_schema_EnumerationValue_default_instance() -> *const krpc_schema_EnumerationValue;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_EnumerationValue_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8CopyFromERKS1_"]
    pub fn krpc_schema_EnumerationValue_CopyFrom1(
        this: *mut krpc_schema_EnumerationValue,
        from: *const krpc_schema_EnumerationValue,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue9MergeFromERKS1_"]
    pub fn krpc_schema_EnumerationValue_MergeFrom1(
        this: *mut krpc_schema_EnumerationValue,
        from: *const krpc_schema_EnumerationValue,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue10clear_nameEv"]
    pub fn krpc_schema_EnumerationValue_clear_name(this: *mut krpc_schema_EnumerationValue);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue4nameEv"]
    pub fn krpc_schema_EnumerationValue_name(
        this: *const krpc_schema_EnumerationValue,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_name(
        this: *mut krpc_schema_EnumerationValue,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_name1(
        this: *mut krpc_schema_EnumerationValue,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8set_nameEPKc"]
    pub fn krpc_schema_EnumerationValue_set_name2(
        this: *mut krpc_schema_EnumerationValue,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8set_nameEPKcm"]
    pub fn krpc_schema_EnumerationValue_set_name3(
        this: *mut krpc_schema_EnumerationValue,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue12mutable_nameEv"]
    pub fn krpc_schema_EnumerationValue_mutable_name(
        this: *mut krpc_schema_EnumerationValue,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue12release_nameEv"]
    pub fn krpc_schema_EnumerationValue_release_name(
        this: *mut krpc_schema_EnumerationValue,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_allocated_name(
        this: *mut krpc_schema_EnumerationValue,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue19clear_documentationEv"]
    pub fn krpc_schema_EnumerationValue_clear_documentation(
        this: *mut krpc_schema_EnumerationValue,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue13documentationEv"]
    pub fn krpc_schema_EnumerationValue_documentation(
        this: *const krpc_schema_EnumerationValue,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_documentation(
        this: *mut krpc_schema_EnumerationValue,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_documentation1(
        this: *mut krpc_schema_EnumerationValue,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue17set_documentationEPKc"]
    pub fn krpc_schema_EnumerationValue_set_documentation2(
        this: *mut krpc_schema_EnumerationValue,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue17set_documentationEPKcm"]
    pub fn krpc_schema_EnumerationValue_set_documentation3(
        this: *mut krpc_schema_EnumerationValue,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue21mutable_documentationEv"]
    pub fn krpc_schema_EnumerationValue_mutable_documentation(
        this: *mut krpc_schema_EnumerationValue,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue21release_documentationEv"]
    pub fn krpc_schema_EnumerationValue_release_documentation(
        this: *mut krpc_schema_EnumerationValue,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_EnumerationValue_set_allocated_documentation(
        this: *mut krpc_schema_EnumerationValue,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue11clear_valueEv"]
    pub fn krpc_schema_EnumerationValue_clear_value(this: *mut krpc_schema_EnumerationValue);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue5valueEv"]
    pub fn krpc_schema_EnumerationValue_value(
        this: *const krpc_schema_EnumerationValue,
    ) -> google_protobuf_int32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue9set_valueEi"]
    pub fn krpc_schema_EnumerationValue_set_value(
        this: *mut krpc_schema_EnumerationValue,
        value: google_protobuf_int32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValueC1Ev"]
    pub fn krpc_schema_EnumerationValue_EnumerationValue(this: *mut krpc_schema_EnumerationValue);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValueC1ERKS1_"]
    pub fn krpc_schema_EnumerationValue_EnumerationValue1(
        this: *mut krpc_schema_EnumerationValue,
        from: *const krpc_schema_EnumerationValue,
    );
}
impl krpc_schema_EnumerationValue {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_EnumerationValue {
        krpc_schema_EnumerationValue_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_EnumerationValue_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_EnumerationValue) {
        krpc_schema_EnumerationValue_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_EnumerationValue) {
        krpc_schema_EnumerationValue_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_EnumerationValue_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_EnumerationValue_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_EnumerationValue_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_EnumerationValue_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_EnumerationValue_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_EnumerationValue_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_EnumerationValue_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_EnumerationValue_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_EnumerationValue_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_EnumerationValue_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_EnumerationValue_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_EnumerationValue_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_EnumerationValue_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_EnumerationValue_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_EnumerationValue_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_EnumerationValue_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_EnumerationValue_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_EnumerationValue_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn clear_value(&mut self) {
        krpc_schema_EnumerationValue_clear_value(self)
    }
    #[inline]
    pub unsafe fn value(&self) -> google_protobuf_int32 {
        krpc_schema_EnumerationValue_value(self)
    }
    #[inline]
    pub unsafe fn set_value(&mut self, value: google_protobuf_int32) {
        krpc_schema_EnumerationValue_set_value(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_EnumerationValue_EnumerationValue(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_EnumerationValue) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_EnumerationValue_EnumerationValue1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValueD1Ev"]
    pub fn krpc_schema_EnumerationValue_EnumerationValue_destructor(
        this: *mut krpc_schema_EnumerationValue,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_EnumerationValue_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_EnumerationValue_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue5ClearEv"]
    pub fn krpc_schema_EnumerationValue_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue13IsInitializedEv"]
    pub fn krpc_schema_EnumerationValue_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue12ByteSizeLongEv"]
    pub fn krpc_schema_EnumerationValue_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema16EnumerationValue27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_EnumerationValue_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_EnumerationValue_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_EnumerationValue_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema16EnumerationValue11GetMetadataEv"]
    pub fn krpc_schema_EnumerationValue_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Exception {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub documentation_: google_protobuf_internal_ArenaStringPtr,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Exception_kNameFieldNumber: krpc_schema_Exception__bindgen_ty_1 = 1;
pub const krpc_schema_Exception_kDocumentationFieldNumber: krpc_schema_Exception__bindgen_ty_1 = 2;
pub type krpc_schema_Exception__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Exception__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Exception_kIndexInFileMessages: ::std::os::raw::c_int = 17;
#[test]
fn bindgen_test_layout_krpc_schema_Exception() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Exception>(),
        40usize,
        concat!("Size of: ", stringify!(krpc_schema_Exception))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Exception>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Exception))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Exception>()))._internal_metadata_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Exception),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Exception>())).name_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Exception),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Exception>())).documentation_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Exception),
            "::",
            stringify!(documentation_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Exception>()))._cached_size_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Exception),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception16default_instanceEv"]
    pub fn krpc_schema_Exception_default_instance() -> *const krpc_schema_Exception;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Exception_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8CopyFromERKS1_"]
    pub fn krpc_schema_Exception_CopyFrom1(
        this: *mut krpc_schema_Exception,
        from: *const krpc_schema_Exception,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception9MergeFromERKS1_"]
    pub fn krpc_schema_Exception_MergeFrom1(
        this: *mut krpc_schema_Exception,
        from: *const krpc_schema_Exception,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception10clear_nameEv"]
    pub fn krpc_schema_Exception_clear_name(this: *mut krpc_schema_Exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception4nameEv"]
    pub fn krpc_schema_Exception_name(this: *const krpc_schema_Exception) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_name(
        this: *mut krpc_schema_Exception,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_name1(
        this: *mut krpc_schema_Exception,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8set_nameEPKc"]
    pub fn krpc_schema_Exception_set_name2(
        this: *mut krpc_schema_Exception,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8set_nameEPKcm"]
    pub fn krpc_schema_Exception_set_name3(
        this: *mut krpc_schema_Exception,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception12mutable_nameEv"]
    pub fn krpc_schema_Exception_mutable_name(this: *mut krpc_schema_Exception) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception12release_nameEv"]
    pub fn krpc_schema_Exception_release_name(this: *mut krpc_schema_Exception) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_allocated_name(
        this: *mut krpc_schema_Exception,
        name: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception19clear_documentationEv"]
    pub fn krpc_schema_Exception_clear_documentation(this: *mut krpc_schema_Exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception13documentationEv"]
    pub fn krpc_schema_Exception_documentation(
        this: *const krpc_schema_Exception,
    ) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception17set_documentationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_documentation(
        this: *mut krpc_schema_Exception,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception17set_documentationEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_documentation1(
        this: *mut krpc_schema_Exception,
        value: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception17set_documentationEPKc"]
    pub fn krpc_schema_Exception_set_documentation2(
        this: *mut krpc_schema_Exception,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception17set_documentationEPKcm"]
    pub fn krpc_schema_Exception_set_documentation3(
        this: *mut krpc_schema_Exception,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception21mutable_documentationEv"]
    pub fn krpc_schema_Exception_mutable_documentation(
        this: *mut krpc_schema_Exception,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception21release_documentationEv"]
    pub fn krpc_schema_Exception_release_documentation(
        this: *mut krpc_schema_Exception,
    ) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception27set_allocated_documentationEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Exception_set_allocated_documentation(
        this: *mut krpc_schema_Exception,
        documentation: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ExceptionC1Ev"]
    pub fn krpc_schema_Exception_Exception(this: *mut krpc_schema_Exception);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ExceptionC1ERKS1_"]
    pub fn krpc_schema_Exception_Exception1(
        this: *mut krpc_schema_Exception,
        from: *const krpc_schema_Exception,
    );
}
impl krpc_schema_Exception {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Exception {
        krpc_schema_Exception_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Exception_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Exception) {
        krpc_schema_Exception_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Exception) {
        krpc_schema_Exception_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Exception_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Exception_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Exception_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Exception_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Exception_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Exception_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Exception_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Exception_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Exception_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_documentation(&mut self) {
        krpc_schema_Exception_clear_documentation(self)
    }
    #[inline]
    pub unsafe fn documentation(&self) -> *const std_string {
        krpc_schema_Exception_documentation(self)
    }
    #[inline]
    pub unsafe fn set_documentation(&mut self, value: *const std_string) {
        krpc_schema_Exception_set_documentation(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation1(&mut self, value: *mut std_string) {
        krpc_schema_Exception_set_documentation1(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Exception_set_documentation2(self, value)
    }
    #[inline]
    pub unsafe fn set_documentation3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Exception_set_documentation3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_documentation(&mut self) -> *mut std_string {
        krpc_schema_Exception_mutable_documentation(self)
    }
    #[inline]
    pub unsafe fn release_documentation(&mut self) -> *mut std_string {
        krpc_schema_Exception_release_documentation(self)
    }
    #[inline]
    pub unsafe fn set_allocated_documentation(&mut self, documentation: *mut std_string) {
        krpc_schema_Exception_set_allocated_documentation(self, documentation)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Exception_Exception(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Exception) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Exception_Exception1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9ExceptionD1Ev"]
    pub fn krpc_schema_Exception_Exception_destructor(this: *mut krpc_schema_Exception);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Exception_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Exception_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception5ClearEv"]
    pub fn krpc_schema_Exception_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception13IsInitializedEv"]
    pub fn krpc_schema_Exception_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception12ByteSizeLongEv"]
    pub fn krpc_schema_Exception_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema9Exception27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Exception_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Exception_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Exception_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema9Exception11GetMetadataEv"]
    pub fn krpc_schema_Exception_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Type {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub types_: google_protobuf_RepeatedPtrField,
    pub service_: google_protobuf_internal_ArenaStringPtr,
    pub name_: google_protobuf_internal_ArenaStringPtr,
    pub code_: ::std::os::raw::c_int,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Type_kTypesFieldNumber: krpc_schema_Type__bindgen_ty_1 = 4;
pub const krpc_schema_Type_kServiceFieldNumber: krpc_schema_Type__bindgen_ty_1 = 2;
pub const krpc_schema_Type_kNameFieldNumber: krpc_schema_Type__bindgen_ty_1 = 3;
pub const krpc_schema_Type_kCodeFieldNumber: krpc_schema_Type__bindgen_ty_1 = 1;
pub type krpc_schema_Type__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Type__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Type_kIndexInFileMessages: ::std::os::raw::c_int = 18;
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type4NONEE"]
    pub static krpc_schema_Type_NONE: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6DOUBLEE"]
    pub static krpc_schema_Type_DOUBLE: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5FLOATE"]
    pub static krpc_schema_Type_FLOAT: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6SINT32E"]
    pub static krpc_schema_Type_SINT32: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6SINT64E"]
    pub static krpc_schema_Type_SINT64: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6UINT32E"]
    pub static krpc_schema_Type_UINT32: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6UINT64E"]
    pub static krpc_schema_Type_UINT64: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type4BOOLE"]
    pub static krpc_schema_Type_BOOL: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6STRINGE"]
    pub static krpc_schema_Type_STRING: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5BYTESE"]
    pub static krpc_schema_Type_BYTES: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5CLASSE"]
    pub static krpc_schema_Type_CLASS: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11ENUMERATIONE"]
    pub static krpc_schema_Type_ENUMERATION: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5EVENTE"]
    pub static krpc_schema_Type_EVENT: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type14PROCEDURE_CALLE"]
    pub static krpc_schema_Type_PROCEDURE_CALL: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6STREAME"]
    pub static krpc_schema_Type_STREAM: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type6STATUSE"]
    pub static krpc_schema_Type_STATUS: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8SERVICESE"]
    pub static krpc_schema_Type_SERVICES: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5TUPLEE"]
    pub static krpc_schema_Type_TUPLE: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type4LISTE"]
    pub static krpc_schema_Type_LIST: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type3SETE"]
    pub static krpc_schema_Type_SET: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type10DICTIONARYE"]
    pub static krpc_schema_Type_DICTIONARY: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type12TypeCode_MINE"]
    pub static krpc_schema_Type_TypeCode_MIN: krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type12TypeCode_MAXE"]
    pub static krpc_schema_Type_TypeCode_MAX: krpc_schema_Type_TypeCode;
}
pub const krpc_schema_Type_TypeCode_ARRAYSIZE: ::std::os::raw::c_int = 304;
#[test]
fn bindgen_test_layout_krpc_schema_Type() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Type>(),
        64usize,
        concat!("Size of: ", stringify!(krpc_schema_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Type>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Type))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Type>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Type>())).types_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(types_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Type>())).service_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(service_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Type>())).name_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(name_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Type>())).code_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(code_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Type>()))._cached_size_ as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Type),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type16default_instanceEv"]
    pub fn krpc_schema_Type_default_instance() -> *const krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Type_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8CopyFromERKS1_"]
    pub fn krpc_schema_Type_CopyFrom1(this: *mut krpc_schema_Type, from: *const krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type9MergeFromERKS1_"]
    pub fn krpc_schema_Type_MergeFrom1(this: *mut krpc_schema_Type, from: *const krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type10types_sizeEv"]
    pub fn krpc_schema_Type_types_size(this: *const krpc_schema_Type) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11clear_typesEv"]
    pub fn krpc_schema_Type_clear_types(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type13mutable_typesEi"]
    pub fn krpc_schema_Type_mutable_types(
        this: *mut krpc_schema_Type,
        index: ::std::os::raw::c_int,
    ) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type13mutable_typesEv"]
    pub fn krpc_schema_Type_mutable_types1(
        this: *mut krpc_schema_Type,
    ) -> *mut google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type5typesEi"]
    pub fn krpc_schema_Type_types(
        this: *const krpc_schema_Type,
        index: ::std::os::raw::c_int,
    ) -> *const krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type9add_typesEv"]
    pub fn krpc_schema_Type_add_types(this: *mut krpc_schema_Type) -> *mut krpc_schema_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type5typesEv"]
    pub fn krpc_schema_Type_types1(
        this: *const krpc_schema_Type,
    ) -> *const google_protobuf_RepeatedPtrField;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type13clear_serviceEv"]
    pub fn krpc_schema_Type_clear_service(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type7serviceEv"]
    pub fn krpc_schema_Type_service(this: *const krpc_schema_Type) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11set_serviceERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_service(this: *mut krpc_schema_Type, value: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11set_serviceEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_service1(this: *mut krpc_schema_Type, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11set_serviceEPKc"]
    pub fn krpc_schema_Type_set_service2(
        this: *mut krpc_schema_Type,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type11set_serviceEPKcm"]
    pub fn krpc_schema_Type_set_service3(
        this: *mut krpc_schema_Type,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type15mutable_serviceEv"]
    pub fn krpc_schema_Type_mutable_service(this: *mut krpc_schema_Type) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type15release_serviceEv"]
    pub fn krpc_schema_Type_release_service(this: *mut krpc_schema_Type) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type21set_allocated_serviceEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_allocated_service(
        this: *mut krpc_schema_Type,
        service: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type10clear_nameEv"]
    pub fn krpc_schema_Type_clear_name(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type4nameEv"]
    pub fn krpc_schema_Type_name(this: *const krpc_schema_Type) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8set_nameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_name(this: *mut krpc_schema_Type, value: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8set_nameEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_name1(this: *mut krpc_schema_Type, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8set_nameEPKc"]
    pub fn krpc_schema_Type_set_name2(
        this: *mut krpc_schema_Type,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8set_nameEPKcm"]
    pub fn krpc_schema_Type_set_name3(
        this: *mut krpc_schema_Type,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type12mutable_nameEv"]
    pub fn krpc_schema_Type_mutable_name(this: *mut krpc_schema_Type) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type12release_nameEv"]
    pub fn krpc_schema_Type_release_name(this: *mut krpc_schema_Type) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type18set_allocated_nameEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Type_set_allocated_name(this: *mut krpc_schema_Type, name: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type10clear_codeEv"]
    pub fn krpc_schema_Type_clear_code(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type4codeEv"]
    pub fn krpc_schema_Type_code(this: *const krpc_schema_Type) -> krpc_schema_Type_TypeCode;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8set_codeENS0_13Type_TypeCodeE"]
    pub fn krpc_schema_Type_set_code(this: *mut krpc_schema_Type, value: krpc_schema_Type_TypeCode);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4TypeC1Ev"]
    pub fn krpc_schema_Type_Type(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4TypeC1ERKS1_"]
    pub fn krpc_schema_Type_Type1(this: *mut krpc_schema_Type, from: *const krpc_schema_Type);
}
impl krpc_schema_Type {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Type {
        krpc_schema_Type_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Type_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Type) {
        krpc_schema_Type_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Type) {
        krpc_schema_Type_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn types_size(&self) -> ::std::os::raw::c_int {
        krpc_schema_Type_types_size(self)
    }
    #[inline]
    pub unsafe fn clear_types(&mut self) {
        krpc_schema_Type_clear_types(self)
    }
    #[inline]
    pub unsafe fn mutable_types(&mut self, index: ::std::os::raw::c_int) -> *mut krpc_schema_Type {
        krpc_schema_Type_mutable_types(self, index)
    }
    #[inline]
    pub unsafe fn mutable_types1(&mut self) -> *mut google_protobuf_RepeatedPtrField {
        krpc_schema_Type_mutable_types1(self)
    }
    #[inline]
    pub unsafe fn types(&self, index: ::std::os::raw::c_int) -> *const krpc_schema_Type {
        krpc_schema_Type_types(self, index)
    }
    #[inline]
    pub unsafe fn add_types(&mut self) -> *mut krpc_schema_Type {
        krpc_schema_Type_add_types(self)
    }
    #[inline]
    pub unsafe fn types1(&self) -> *const google_protobuf_RepeatedPtrField {
        krpc_schema_Type_types1(self)
    }
    #[inline]
    pub unsafe fn clear_service(&mut self) {
        krpc_schema_Type_clear_service(self)
    }
    #[inline]
    pub unsafe fn service(&self) -> *const std_string {
        krpc_schema_Type_service(self)
    }
    #[inline]
    pub unsafe fn set_service(&mut self, value: *const std_string) {
        krpc_schema_Type_set_service(self, value)
    }
    #[inline]
    pub unsafe fn set_service1(&mut self, value: *mut std_string) {
        krpc_schema_Type_set_service1(self, value)
    }
    #[inline]
    pub unsafe fn set_service2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Type_set_service2(self, value)
    }
    #[inline]
    pub unsafe fn set_service3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Type_set_service3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_service(&mut self) -> *mut std_string {
        krpc_schema_Type_mutable_service(self)
    }
    #[inline]
    pub unsafe fn release_service(&mut self) -> *mut std_string {
        krpc_schema_Type_release_service(self)
    }
    #[inline]
    pub unsafe fn set_allocated_service(&mut self, service: *mut std_string) {
        krpc_schema_Type_set_allocated_service(self, service)
    }
    #[inline]
    pub unsafe fn clear_name(&mut self) {
        krpc_schema_Type_clear_name(self)
    }
    #[inline]
    pub unsafe fn name(&self) -> *const std_string {
        krpc_schema_Type_name(self)
    }
    #[inline]
    pub unsafe fn set_name(&mut self, value: *const std_string) {
        krpc_schema_Type_set_name(self, value)
    }
    #[inline]
    pub unsafe fn set_name1(&mut self, value: *mut std_string) {
        krpc_schema_Type_set_name1(self, value)
    }
    #[inline]
    pub unsafe fn set_name2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Type_set_name2(self, value)
    }
    #[inline]
    pub unsafe fn set_name3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Type_set_name3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_name(&mut self) -> *mut std_string {
        krpc_schema_Type_mutable_name(self)
    }
    #[inline]
    pub unsafe fn release_name(&mut self) -> *mut std_string {
        krpc_schema_Type_release_name(self)
    }
    #[inline]
    pub unsafe fn set_allocated_name(&mut self, name: *mut std_string) {
        krpc_schema_Type_set_allocated_name(self, name)
    }
    #[inline]
    pub unsafe fn clear_code(&mut self) {
        krpc_schema_Type_clear_code(self)
    }
    #[inline]
    pub unsafe fn code(&self) -> krpc_schema_Type_TypeCode {
        krpc_schema_Type_code(self)
    }
    #[inline]
    pub unsafe fn set_code(&mut self, value: krpc_schema_Type_TypeCode) {
        krpc_schema_Type_set_code(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Type_Type(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Type) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Type_Type1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4TypeD1Ev"]
    pub fn krpc_schema_Type_Type_destructor(this: *mut krpc_schema_Type);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Type_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Type_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type5ClearEv"]
    pub fn krpc_schema_Type_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type13IsInitializedEv"]
    pub fn krpc_schema_Type_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type12ByteSizeLongEv"]
    pub fn krpc_schema_Type_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema4Type27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Type_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Type_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Type_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema4Type11GetMetadataEv"]
    pub fn krpc_schema_Type_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Stream {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub id_: google_protobuf_uint64,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Stream_kIdFieldNumber: krpc_schema_Stream__bindgen_ty_1 = 1;
pub type krpc_schema_Stream__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Stream__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Stream_kIndexInFileMessages: ::std::os::raw::c_int = 24;
#[test]
fn bindgen_test_layout_krpc_schema_Stream() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Stream>(),
        32usize,
        concat!("Size of: ", stringify!(krpc_schema_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Stream>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Stream))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Stream>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Stream),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Stream>())).id_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Stream),
            "::",
            stringify!(id_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Stream>()))._cached_size_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Stream),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream16default_instanceEv"]
    pub fn krpc_schema_Stream_default_instance() -> *const krpc_schema_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Stream_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream8CopyFromERKS1_"]
    pub fn krpc_schema_Stream_CopyFrom1(
        this: *mut krpc_schema_Stream,
        from: *const krpc_schema_Stream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream9MergeFromERKS1_"]
    pub fn krpc_schema_Stream_MergeFrom1(
        this: *mut krpc_schema_Stream,
        from: *const krpc_schema_Stream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream8clear_idEv"]
    pub fn krpc_schema_Stream_clear_id(this: *mut krpc_schema_Stream);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream2idEv"]
    pub fn krpc_schema_Stream_id(this: *const krpc_schema_Stream) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream6set_idEy"]
    pub fn krpc_schema_Stream_set_id(this: *mut krpc_schema_Stream, value: google_protobuf_uint64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StreamC1Ev"]
    pub fn krpc_schema_Stream_Stream(this: *mut krpc_schema_Stream);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StreamC1ERKS1_"]
    pub fn krpc_schema_Stream_Stream1(
        this: *mut krpc_schema_Stream,
        from: *const krpc_schema_Stream,
    );
}
impl krpc_schema_Stream {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Stream {
        krpc_schema_Stream_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Stream_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Stream) {
        krpc_schema_Stream_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Stream) {
        krpc_schema_Stream_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_id(&mut self) {
        krpc_schema_Stream_clear_id(self)
    }
    #[inline]
    pub unsafe fn id(&self) -> google_protobuf_uint64 {
        krpc_schema_Stream_id(self)
    }
    #[inline]
    pub unsafe fn set_id(&mut self, value: google_protobuf_uint64) {
        krpc_schema_Stream_set_id(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Stream_Stream(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Stream) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Stream_Stream1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StreamD1Ev"]
    pub fn krpc_schema_Stream_Stream_destructor(this: *mut krpc_schema_Stream);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Stream_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Stream_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream5ClearEv"]
    pub fn krpc_schema_Stream_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream13IsInitializedEv"]
    pub fn krpc_schema_Stream_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream12ByteSizeLongEv"]
    pub fn krpc_schema_Stream_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Stream27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Stream_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Stream_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Stream_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Stream11GetMetadataEv"]
    pub fn krpc_schema_Stream_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Event {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub stream_: *mut krpc_schema_Stream,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Event_kStreamFieldNumber: krpc_schema_Event__bindgen_ty_1 = 1;
pub type krpc_schema_Event__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Event__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Event_kIndexInFileMessages: ::std::os::raw::c_int = 25;
#[test]
fn bindgen_test_layout_krpc_schema_Event() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Event>(),
        32usize,
        concat!("Size of: ", stringify!(krpc_schema_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Event>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Event),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Event>())).stream_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Event),
            "::",
            stringify!(stream_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Event>()))._cached_size_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Event),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event16default_instanceEv"]
    pub fn krpc_schema_Event_default_instance() -> *const krpc_schema_Event;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Event_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event8CopyFromERKS1_"]
    pub fn krpc_schema_Event_CopyFrom1(
        this: *mut krpc_schema_Event,
        from: *const krpc_schema_Event,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event9MergeFromERKS1_"]
    pub fn krpc_schema_Event_MergeFrom1(
        this: *mut krpc_schema_Event,
        from: *const krpc_schema_Event,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event10has_streamEv"]
    pub fn krpc_schema_Event_has_stream(this: *const krpc_schema_Event) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event12clear_streamEv"]
    pub fn krpc_schema_Event_clear_stream(this: *mut krpc_schema_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event6streamEv"]
    pub fn krpc_schema_Event_stream(this: *const krpc_schema_Event) -> *const krpc_schema_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event14release_streamEv"]
    pub fn krpc_schema_Event_release_stream(
        this: *mut krpc_schema_Event,
    ) -> *mut krpc_schema_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event14mutable_streamEv"]
    pub fn krpc_schema_Event_mutable_stream(
        this: *mut krpc_schema_Event,
    ) -> *mut krpc_schema_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event20set_allocated_streamEPNS0_6StreamE"]
    pub fn krpc_schema_Event_set_allocated_stream(
        this: *mut krpc_schema_Event,
        stream: *mut krpc_schema_Stream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5EventC1Ev"]
    pub fn krpc_schema_Event_Event(this: *mut krpc_schema_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5EventC1ERKS1_"]
    pub fn krpc_schema_Event_Event1(this: *mut krpc_schema_Event, from: *const krpc_schema_Event);
}
impl krpc_schema_Event {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Event {
        krpc_schema_Event_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Event_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Event) {
        krpc_schema_Event_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Event) {
        krpc_schema_Event_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn has_stream(&self) -> bool {
        krpc_schema_Event_has_stream(self)
    }
    #[inline]
    pub unsafe fn clear_stream(&mut self) {
        krpc_schema_Event_clear_stream(self)
    }
    #[inline]
    pub unsafe fn stream(&self) -> *const krpc_schema_Stream {
        krpc_schema_Event_stream(self)
    }
    #[inline]
    pub unsafe fn release_stream(&mut self) -> *mut krpc_schema_Stream {
        krpc_schema_Event_release_stream(self)
    }
    #[inline]
    pub unsafe fn mutable_stream(&mut self) -> *mut krpc_schema_Stream {
        krpc_schema_Event_mutable_stream(self)
    }
    #[inline]
    pub unsafe fn set_allocated_stream(&mut self, stream: *mut krpc_schema_Stream) {
        krpc_schema_Event_set_allocated_stream(self, stream)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Event_Event(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Event) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Event_Event1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5EventD1Ev"]
    pub fn krpc_schema_Event_Event_destructor(this: *mut krpc_schema_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Event_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Event_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event5ClearEv"]
    pub fn krpc_schema_Event_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event13IsInitializedEv"]
    pub fn krpc_schema_Event_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event12ByteSizeLongEv"]
    pub fn krpc_schema_Event_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema5Event27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Event_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Event_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Event_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema5Event11GetMetadataEv"]
    pub fn krpc_schema_Event_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
pub struct krpc_schema_Status {
    pub _base: google_protobuf_Message,
    pub _internal_metadata_: google_protobuf_internal_InternalMetadataWithArena,
    pub version_: google_protobuf_internal_ArenaStringPtr,
    pub bytes_read_: google_protobuf_uint64,
    pub bytes_written_: google_protobuf_uint64,
    pub bytes_read_rate_: f32,
    pub bytes_written_rate_: f32,
    pub rpcs_executed_: google_protobuf_uint64,
    pub rpc_rate_: f32,
    pub max_time_per_update_: google_protobuf_uint32,
    pub one_rpc_per_update_: bool,
    pub adaptive_rate_control_: bool,
    pub blocking_recv_: bool,
    pub recv_timeout_: google_protobuf_uint32,
    pub time_per_rpc_update_: f32,
    pub poll_time_per_rpc_update_: f32,
    pub exec_time_per_rpc_update_: f32,
    pub stream_rpcs_: google_protobuf_uint32,
    pub stream_rpcs_executed_: google_protobuf_uint64,
    pub stream_rpc_rate_: f32,
    pub time_per_stream_update_: f32,
    pub _cached_size_: google_protobuf_internal_CachedSize,
}
pub const krpc_schema_Status_kVersionFieldNumber: krpc_schema_Status__bindgen_ty_1 = 1;
pub const krpc_schema_Status_kBytesReadFieldNumber: krpc_schema_Status__bindgen_ty_1 = 2;
pub const krpc_schema_Status_kBytesWrittenFieldNumber: krpc_schema_Status__bindgen_ty_1 = 3;
pub const krpc_schema_Status_kBytesReadRateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 4;
pub const krpc_schema_Status_kBytesWrittenRateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 5;
pub const krpc_schema_Status_kRpcsExecutedFieldNumber: krpc_schema_Status__bindgen_ty_1 = 6;
pub const krpc_schema_Status_kRpcRateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 7;
pub const krpc_schema_Status_kMaxTimePerUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 9;
pub const krpc_schema_Status_kOneRpcPerUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 8;
pub const krpc_schema_Status_kAdaptiveRateControlFieldNumber: krpc_schema_Status__bindgen_ty_1 = 10;
pub const krpc_schema_Status_kBlockingRecvFieldNumber: krpc_schema_Status__bindgen_ty_1 = 11;
pub const krpc_schema_Status_kRecvTimeoutFieldNumber: krpc_schema_Status__bindgen_ty_1 = 12;
pub const krpc_schema_Status_kTimePerRpcUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 13;
pub const krpc_schema_Status_kPollTimePerRpcUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 =
    14;
pub const krpc_schema_Status_kExecTimePerRpcUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 =
    15;
pub const krpc_schema_Status_kStreamRpcsFieldNumber: krpc_schema_Status__bindgen_ty_1 = 16;
pub const krpc_schema_Status_kStreamRpcsExecutedFieldNumber: krpc_schema_Status__bindgen_ty_1 = 17;
pub const krpc_schema_Status_kStreamRpcRateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 18;
pub const krpc_schema_Status_kTimePerStreamUpdateFieldNumber: krpc_schema_Status__bindgen_ty_1 = 19;
pub type krpc_schema_Status__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_schema_Status__Internal {
    _unused: [u8; 0],
}
pub const krpc_schema_Status_kIndexInFileMessages: ::std::os::raw::c_int = 26;
#[test]
fn bindgen_test_layout_krpc_schema_Status() {
    assert_eq!(
        ::std::mem::size_of::<krpc_schema_Status>(),
        112usize,
        concat!("Size of: ", stringify!(krpc_schema_Status))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_schema_Status>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_schema_Status))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>()))._internal_metadata_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(_internal_metadata_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Status>())).version_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(version_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Status>())).bytes_read_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(bytes_read_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).bytes_written_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(bytes_written_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).bytes_read_rate_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(bytes_read_rate_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).bytes_written_rate_ as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(bytes_written_rate_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).rpcs_executed_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(rpcs_executed_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Status>())).rpc_rate_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(rpc_rate_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).max_time_per_update_ as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(max_time_per_update_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).one_rpc_per_update_ as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(one_rpc_per_update_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).adaptive_rate_control_ as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(adaptive_rate_control_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).blocking_recv_ as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(blocking_recv_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).recv_timeout_ as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(recv_timeout_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).time_per_rpc_update_ as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(time_per_rpc_update_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).poll_time_per_rpc_update_ as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(poll_time_per_rpc_update_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).exec_time_per_rpc_update_ as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(exec_time_per_rpc_update_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_schema_Status>())).stream_rpcs_ as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(stream_rpcs_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).stream_rpcs_executed_ as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(stream_rpcs_executed_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).stream_rpc_rate_ as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(stream_rpc_rate_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>())).time_per_stream_update_ as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(time_per_stream_update_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_schema_Status>()))._cached_size_ as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_schema_Status),
            "::",
            stringify!(_cached_size_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status16default_instanceEv"]
    pub fn krpc_schema_Status_default_instance() -> *const krpc_schema_Status;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status21InitAsDefaultInstanceEv"]
    pub fn krpc_schema_Status_InitAsDefaultInstance();
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status8CopyFromERKS1_"]
    pub fn krpc_schema_Status_CopyFrom1(
        this: *mut krpc_schema_Status,
        from: *const krpc_schema_Status,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status9MergeFromERKS1_"]
    pub fn krpc_schema_Status_MergeFrom1(
        this: *mut krpc_schema_Status,
        from: *const krpc_schema_Status,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status13clear_versionEv"]
    pub fn krpc_schema_Status_clear_version(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status7versionEv"]
    pub fn krpc_schema_Status_version(this: *const krpc_schema_Status) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status11set_versionERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Status_set_version(this: *mut krpc_schema_Status, value: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status11set_versionEONSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Status_set_version1(this: *mut krpc_schema_Status, value: *mut std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status11set_versionEPKc"]
    pub fn krpc_schema_Status_set_version2(
        this: *mut krpc_schema_Status,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status11set_versionEPKcm"]
    pub fn krpc_schema_Status_set_version3(
        this: *mut krpc_schema_Status,
        value: *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status15mutable_versionEv"]
    pub fn krpc_schema_Status_mutable_version(this: *mut krpc_schema_Status) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status15release_versionEv"]
    pub fn krpc_schema_Status_release_version(this: *mut krpc_schema_Status) -> *mut std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status21set_allocated_versionEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn krpc_schema_Status_set_allocated_version(
        this: *mut krpc_schema_Status,
        version: *mut std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status16clear_bytes_readEv"]
    pub fn krpc_schema_Status_clear_bytes_read(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status10bytes_readEv"]
    pub fn krpc_schema_Status_bytes_read(this: *const krpc_schema_Status)
        -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status14set_bytes_readEy"]
    pub fn krpc_schema_Status_set_bytes_read(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status19clear_bytes_writtenEv"]
    pub fn krpc_schema_Status_clear_bytes_written(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status13bytes_writtenEv"]
    pub fn krpc_schema_Status_bytes_written(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status17set_bytes_writtenEy"]
    pub fn krpc_schema_Status_set_bytes_written(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status21clear_bytes_read_rateEv"]
    pub fn krpc_schema_Status_clear_bytes_read_rate(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status15bytes_read_rateEv"]
    pub fn krpc_schema_Status_bytes_read_rate(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status19set_bytes_read_rateEf"]
    pub fn krpc_schema_Status_set_bytes_read_rate(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status24clear_bytes_written_rateEv"]
    pub fn krpc_schema_Status_clear_bytes_written_rate(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status18bytes_written_rateEv"]
    pub fn krpc_schema_Status_bytes_written_rate(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status22set_bytes_written_rateEf"]
    pub fn krpc_schema_Status_set_bytes_written_rate(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status19clear_rpcs_executedEv"]
    pub fn krpc_schema_Status_clear_rpcs_executed(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status13rpcs_executedEv"]
    pub fn krpc_schema_Status_rpcs_executed(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status17set_rpcs_executedEy"]
    pub fn krpc_schema_Status_set_rpcs_executed(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status14clear_rpc_rateEv"]
    pub fn krpc_schema_Status_clear_rpc_rate(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status8rpc_rateEv"]
    pub fn krpc_schema_Status_rpc_rate(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status12set_rpc_rateEf"]
    pub fn krpc_schema_Status_set_rpc_rate(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status25clear_max_time_per_updateEv"]
    pub fn krpc_schema_Status_clear_max_time_per_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status19max_time_per_updateEv"]
    pub fn krpc_schema_Status_max_time_per_update(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status23set_max_time_per_updateEj"]
    pub fn krpc_schema_Status_set_max_time_per_update(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status24clear_one_rpc_per_updateEv"]
    pub fn krpc_schema_Status_clear_one_rpc_per_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status18one_rpc_per_updateEv"]
    pub fn krpc_schema_Status_one_rpc_per_update(this: *const krpc_schema_Status) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status22set_one_rpc_per_updateEb"]
    pub fn krpc_schema_Status_set_one_rpc_per_update(this: *mut krpc_schema_Status, value: bool);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status27clear_adaptive_rate_controlEv"]
    pub fn krpc_schema_Status_clear_adaptive_rate_control(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status21adaptive_rate_controlEv"]
    pub fn krpc_schema_Status_adaptive_rate_control(this: *const krpc_schema_Status) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status25set_adaptive_rate_controlEb"]
    pub fn krpc_schema_Status_set_adaptive_rate_control(this: *mut krpc_schema_Status, value: bool);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status19clear_blocking_recvEv"]
    pub fn krpc_schema_Status_clear_blocking_recv(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status13blocking_recvEv"]
    pub fn krpc_schema_Status_blocking_recv(this: *const krpc_schema_Status) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status17set_blocking_recvEb"]
    pub fn krpc_schema_Status_set_blocking_recv(this: *mut krpc_schema_Status, value: bool);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status18clear_recv_timeoutEv"]
    pub fn krpc_schema_Status_clear_recv_timeout(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status12recv_timeoutEv"]
    pub fn krpc_schema_Status_recv_timeout(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status16set_recv_timeoutEj"]
    pub fn krpc_schema_Status_set_recv_timeout(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status25clear_time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_clear_time_per_rpc_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status19time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_time_per_rpc_update(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status23set_time_per_rpc_updateEf"]
    pub fn krpc_schema_Status_set_time_per_rpc_update(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status30clear_poll_time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_clear_poll_time_per_rpc_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status24poll_time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_poll_time_per_rpc_update(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status28set_poll_time_per_rpc_updateEf"]
    pub fn krpc_schema_Status_set_poll_time_per_rpc_update(
        this: *mut krpc_schema_Status,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status30clear_exec_time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_clear_exec_time_per_rpc_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status24exec_time_per_rpc_updateEv"]
    pub fn krpc_schema_Status_exec_time_per_rpc_update(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status28set_exec_time_per_rpc_updateEf"]
    pub fn krpc_schema_Status_set_exec_time_per_rpc_update(
        this: *mut krpc_schema_Status,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status17clear_stream_rpcsEv"]
    pub fn krpc_schema_Status_clear_stream_rpcs(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status11stream_rpcsEv"]
    pub fn krpc_schema_Status_stream_rpcs(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status15set_stream_rpcsEj"]
    pub fn krpc_schema_Status_set_stream_rpcs(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status26clear_stream_rpcs_executedEv"]
    pub fn krpc_schema_Status_clear_stream_rpcs_executed(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status20stream_rpcs_executedEv"]
    pub fn krpc_schema_Status_stream_rpcs_executed(
        this: *const krpc_schema_Status,
    ) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status24set_stream_rpcs_executedEy"]
    pub fn krpc_schema_Status_set_stream_rpcs_executed(
        this: *mut krpc_schema_Status,
        value: google_protobuf_uint64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status21clear_stream_rpc_rateEv"]
    pub fn krpc_schema_Status_clear_stream_rpc_rate(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status15stream_rpc_rateEv"]
    pub fn krpc_schema_Status_stream_rpc_rate(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status19set_stream_rpc_rateEf"]
    pub fn krpc_schema_Status_set_stream_rpc_rate(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status28clear_time_per_stream_updateEv"]
    pub fn krpc_schema_Status_clear_time_per_stream_update(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status22time_per_stream_updateEv"]
    pub fn krpc_schema_Status_time_per_stream_update(this: *const krpc_schema_Status) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status26set_time_per_stream_updateEf"]
    pub fn krpc_schema_Status_set_time_per_stream_update(this: *mut krpc_schema_Status, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StatusC1Ev"]
    pub fn krpc_schema_Status_Status(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StatusC1ERKS1_"]
    pub fn krpc_schema_Status_Status1(
        this: *mut krpc_schema_Status,
        from: *const krpc_schema_Status,
    );
}
impl krpc_schema_Status {
    #[inline]
    pub unsafe fn default_instance() -> *const krpc_schema_Status {
        krpc_schema_Status_default_instance()
    }
    #[inline]
    pub unsafe fn InitAsDefaultInstance() {
        krpc_schema_Status_InitAsDefaultInstance()
    }
    #[inline]
    pub unsafe fn CopyFrom(&mut self, from: *const krpc_schema_Status) {
        krpc_schema_Status_CopyFrom1(self, from)
    }
    #[inline]
    pub unsafe fn MergeFrom(&mut self, from: *const krpc_schema_Status) {
        krpc_schema_Status_MergeFrom1(self, from)
    }
    #[inline]
    pub unsafe fn clear_version(&mut self) {
        krpc_schema_Status_clear_version(self)
    }
    #[inline]
    pub unsafe fn version(&self) -> *const std_string {
        krpc_schema_Status_version(self)
    }
    #[inline]
    pub unsafe fn set_version(&mut self, value: *const std_string) {
        krpc_schema_Status_set_version(self, value)
    }
    #[inline]
    pub unsafe fn set_version1(&mut self, value: *mut std_string) {
        krpc_schema_Status_set_version1(self, value)
    }
    #[inline]
    pub unsafe fn set_version2(&mut self, value: *const ::std::os::raw::c_char) {
        krpc_schema_Status_set_version2(self, value)
    }
    #[inline]
    pub unsafe fn set_version3(&mut self, value: *const ::std::os::raw::c_char, size: usize) {
        krpc_schema_Status_set_version3(self, value, size)
    }
    #[inline]
    pub unsafe fn mutable_version(&mut self) -> *mut std_string {
        krpc_schema_Status_mutable_version(self)
    }
    #[inline]
    pub unsafe fn release_version(&mut self) -> *mut std_string {
        krpc_schema_Status_release_version(self)
    }
    #[inline]
    pub unsafe fn set_allocated_version(&mut self, version: *mut std_string) {
        krpc_schema_Status_set_allocated_version(self, version)
    }
    #[inline]
    pub unsafe fn clear_bytes_read(&mut self) {
        krpc_schema_Status_clear_bytes_read(self)
    }
    #[inline]
    pub unsafe fn bytes_read(&self) -> google_protobuf_uint64 {
        krpc_schema_Status_bytes_read(self)
    }
    #[inline]
    pub unsafe fn set_bytes_read(&mut self, value: google_protobuf_uint64) {
        krpc_schema_Status_set_bytes_read(self, value)
    }
    #[inline]
    pub unsafe fn clear_bytes_written(&mut self) {
        krpc_schema_Status_clear_bytes_written(self)
    }
    #[inline]
    pub unsafe fn bytes_written(&self) -> google_protobuf_uint64 {
        krpc_schema_Status_bytes_written(self)
    }
    #[inline]
    pub unsafe fn set_bytes_written(&mut self, value: google_protobuf_uint64) {
        krpc_schema_Status_set_bytes_written(self, value)
    }
    #[inline]
    pub unsafe fn clear_bytes_read_rate(&mut self) {
        krpc_schema_Status_clear_bytes_read_rate(self)
    }
    #[inline]
    pub unsafe fn bytes_read_rate(&self) -> f32 {
        krpc_schema_Status_bytes_read_rate(self)
    }
    #[inline]
    pub unsafe fn set_bytes_read_rate(&mut self, value: f32) {
        krpc_schema_Status_set_bytes_read_rate(self, value)
    }
    #[inline]
    pub unsafe fn clear_bytes_written_rate(&mut self) {
        krpc_schema_Status_clear_bytes_written_rate(self)
    }
    #[inline]
    pub unsafe fn bytes_written_rate(&self) -> f32 {
        krpc_schema_Status_bytes_written_rate(self)
    }
    #[inline]
    pub unsafe fn set_bytes_written_rate(&mut self, value: f32) {
        krpc_schema_Status_set_bytes_written_rate(self, value)
    }
    #[inline]
    pub unsafe fn clear_rpcs_executed(&mut self) {
        krpc_schema_Status_clear_rpcs_executed(self)
    }
    #[inline]
    pub unsafe fn rpcs_executed(&self) -> google_protobuf_uint64 {
        krpc_schema_Status_rpcs_executed(self)
    }
    #[inline]
    pub unsafe fn set_rpcs_executed(&mut self, value: google_protobuf_uint64) {
        krpc_schema_Status_set_rpcs_executed(self, value)
    }
    #[inline]
    pub unsafe fn clear_rpc_rate(&mut self) {
        krpc_schema_Status_clear_rpc_rate(self)
    }
    #[inline]
    pub unsafe fn rpc_rate(&self) -> f32 {
        krpc_schema_Status_rpc_rate(self)
    }
    #[inline]
    pub unsafe fn set_rpc_rate(&mut self, value: f32) {
        krpc_schema_Status_set_rpc_rate(self, value)
    }
    #[inline]
    pub unsafe fn clear_max_time_per_update(&mut self) {
        krpc_schema_Status_clear_max_time_per_update(self)
    }
    #[inline]
    pub unsafe fn max_time_per_update(&self) -> google_protobuf_uint32 {
        krpc_schema_Status_max_time_per_update(self)
    }
    #[inline]
    pub unsafe fn set_max_time_per_update(&mut self, value: google_protobuf_uint32) {
        krpc_schema_Status_set_max_time_per_update(self, value)
    }
    #[inline]
    pub unsafe fn clear_one_rpc_per_update(&mut self) {
        krpc_schema_Status_clear_one_rpc_per_update(self)
    }
    #[inline]
    pub unsafe fn one_rpc_per_update(&self) -> bool {
        krpc_schema_Status_one_rpc_per_update(self)
    }
    #[inline]
    pub unsafe fn set_one_rpc_per_update(&mut self, value: bool) {
        krpc_schema_Status_set_one_rpc_per_update(self, value)
    }
    #[inline]
    pub unsafe fn clear_adaptive_rate_control(&mut self) {
        krpc_schema_Status_clear_adaptive_rate_control(self)
    }
    #[inline]
    pub unsafe fn adaptive_rate_control(&self) -> bool {
        krpc_schema_Status_adaptive_rate_control(self)
    }
    #[inline]
    pub unsafe fn set_adaptive_rate_control(&mut self, value: bool) {
        krpc_schema_Status_set_adaptive_rate_control(self, value)
    }
    #[inline]
    pub unsafe fn clear_blocking_recv(&mut self) {
        krpc_schema_Status_clear_blocking_recv(self)
    }
    #[inline]
    pub unsafe fn blocking_recv(&self) -> bool {
        krpc_schema_Status_blocking_recv(self)
    }
    #[inline]
    pub unsafe fn set_blocking_recv(&mut self, value: bool) {
        krpc_schema_Status_set_blocking_recv(self, value)
    }
    #[inline]
    pub unsafe fn clear_recv_timeout(&mut self) {
        krpc_schema_Status_clear_recv_timeout(self)
    }
    #[inline]
    pub unsafe fn recv_timeout(&self) -> google_protobuf_uint32 {
        krpc_schema_Status_recv_timeout(self)
    }
    #[inline]
    pub unsafe fn set_recv_timeout(&mut self, value: google_protobuf_uint32) {
        krpc_schema_Status_set_recv_timeout(self, value)
    }
    #[inline]
    pub unsafe fn clear_time_per_rpc_update(&mut self) {
        krpc_schema_Status_clear_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn time_per_rpc_update(&self) -> f32 {
        krpc_schema_Status_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn set_time_per_rpc_update(&mut self, value: f32) {
        krpc_schema_Status_set_time_per_rpc_update(self, value)
    }
    #[inline]
    pub unsafe fn clear_poll_time_per_rpc_update(&mut self) {
        krpc_schema_Status_clear_poll_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn poll_time_per_rpc_update(&self) -> f32 {
        krpc_schema_Status_poll_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn set_poll_time_per_rpc_update(&mut self, value: f32) {
        krpc_schema_Status_set_poll_time_per_rpc_update(self, value)
    }
    #[inline]
    pub unsafe fn clear_exec_time_per_rpc_update(&mut self) {
        krpc_schema_Status_clear_exec_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn exec_time_per_rpc_update(&self) -> f32 {
        krpc_schema_Status_exec_time_per_rpc_update(self)
    }
    #[inline]
    pub unsafe fn set_exec_time_per_rpc_update(&mut self, value: f32) {
        krpc_schema_Status_set_exec_time_per_rpc_update(self, value)
    }
    #[inline]
    pub unsafe fn clear_stream_rpcs(&mut self) {
        krpc_schema_Status_clear_stream_rpcs(self)
    }
    #[inline]
    pub unsafe fn stream_rpcs(&self) -> google_protobuf_uint32 {
        krpc_schema_Status_stream_rpcs(self)
    }
    #[inline]
    pub unsafe fn set_stream_rpcs(&mut self, value: google_protobuf_uint32) {
        krpc_schema_Status_set_stream_rpcs(self, value)
    }
    #[inline]
    pub unsafe fn clear_stream_rpcs_executed(&mut self) {
        krpc_schema_Status_clear_stream_rpcs_executed(self)
    }
    #[inline]
    pub unsafe fn stream_rpcs_executed(&self) -> google_protobuf_uint64 {
        krpc_schema_Status_stream_rpcs_executed(self)
    }
    #[inline]
    pub unsafe fn set_stream_rpcs_executed(&mut self, value: google_protobuf_uint64) {
        krpc_schema_Status_set_stream_rpcs_executed(self, value)
    }
    #[inline]
    pub unsafe fn clear_stream_rpc_rate(&mut self) {
        krpc_schema_Status_clear_stream_rpc_rate(self)
    }
    #[inline]
    pub unsafe fn stream_rpc_rate(&self) -> f32 {
        krpc_schema_Status_stream_rpc_rate(self)
    }
    #[inline]
    pub unsafe fn set_stream_rpc_rate(&mut self, value: f32) {
        krpc_schema_Status_set_stream_rpc_rate(self, value)
    }
    #[inline]
    pub unsafe fn clear_time_per_stream_update(&mut self) {
        krpc_schema_Status_clear_time_per_stream_update(self)
    }
    #[inline]
    pub unsafe fn time_per_stream_update(&self) -> f32 {
        krpc_schema_Status_time_per_stream_update(self)
    }
    #[inline]
    pub unsafe fn set_time_per_stream_update(&mut self, value: f32) {
        krpc_schema_Status_set_time_per_stream_update(self, value)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Status_Status(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(from: *const krpc_schema_Status) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_schema_Status_Status1(&mut __bindgen_tmp, from);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6StatusD1Ev"]
    pub fn krpc_schema_Status_Status_destructor(this: *mut krpc_schema_Status);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status8CopyFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Status_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status9MergeFromERKN6google8protobuf7MessageE"]
    pub fn krpc_schema_Status_MergeFrom(
        this: *mut ::std::os::raw::c_void,
        from: *const google_protobuf_Message,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status5ClearEv"]
    pub fn krpc_schema_Status_Clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status13IsInitializedEv"]
    pub fn krpc_schema_Status_IsInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status12ByteSizeLongEv"]
    pub fn krpc_schema_Status_ByteSizeLong(this: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6schema6Status27MergePartialFromCodedStreamEPN6google8protobuf2io16CodedInputStreamE"]
    pub fn krpc_schema_Status_MergePartialFromCodedStream(
        this: *mut ::std::os::raw::c_void,
        input: *mut google_protobuf_io_CodedInputStream,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status24SerializeWithCachedSizesEPN6google8protobuf2io17CodedOutputStreamE"]
    pub fn krpc_schema_Status_SerializeWithCachedSizes(
        this: *mut ::std::os::raw::c_void,
        output: *mut google_protobuf_io_CodedOutputStream,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status39InternalSerializeWithCachedSizesToArrayEPh"]
    pub fn krpc_schema_Status_InternalSerializeWithCachedSizesToArray(
        this: *mut ::std::os::raw::c_void,
        target: *mut google_protobuf_uint8,
    ) -> *mut google_protobuf_uint8;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6schema6Status11GetMetadataEv"]
    pub fn krpc_schema_Status_GetMetadata(
        this: *mut ::std::os::raw::c_void,
    ) -> google_protobuf_Metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_Connection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_StreamManager {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct krpc_Client {
    pub rpc_connection: std_shared_ptr<krpc_Connection>,
    pub stream_manager: std_shared_ptr<krpc_StreamManager>,
    pub lock: std_shared_ptr<std_mutex>,
    pub exception_throwers: std_map,
}
pub type krpc_Client_Callback = std_function;
#[test]
fn bindgen_test_layout_krpc_Client() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Client>(),
        72usize,
        concat!("Size of: ", stringify!(krpc_Client))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Client>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_Client))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Client>())).rpc_connection as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Client),
            "::",
            stringify!(rpc_connection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Client>())).stream_manager as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Client),
            "::",
            stringify!(stream_manager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Client>())).lock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Client),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Client>())).exception_throwers as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Client),
            "::",
            stringify!(exception_throwers)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client6invokeERKNS_6schema7RequestE"]
    pub fn krpc_Client_invoke(
        this: *mut krpc_Client,
        request: *const krpc_schema_Request,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client6invokeERKNS_6schema13ProcedureCallE"]
    pub fn krpc_Client_invoke1(
        this: *mut krpc_Client,
        call: *const krpc_schema_ProcedureCall,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client6invokeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIS7_NS5_IS7_EEEE"]
    pub fn krpc_Client_invoke2(
        this: *mut krpc_Client,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client13build_requestERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIS7_NS5_IS7_EEEE"]
    pub fn krpc_Client_build_request(
        this: *mut krpc_Client,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> krpc_schema_Request;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client10build_callERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIS7_NS5_IS7_EEEE"]
    pub fn krpc_Client_build_call(
        this: *mut krpc_Client,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client21add_exception_throwerERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_8functionIFvS7_EEE"]
    pub fn krpc_Client_add_exception_thrower(
        this: *mut krpc_Client,
        service: *const std_string,
        name: *const std_string,
        thrower: *const [u128; 3usize],
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client10add_streamERKNS_6schema13ProcedureCallE"]
    pub fn krpc_Client_add_stream(
        this: *mut krpc_Client,
        call: *const krpc_schema_ProcedureCall,
    ) -> std_shared_ptr<krpc_StreamImpl>;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client10get_streamEy"]
    pub fn krpc_Client_get_stream(
        this: *mut krpc_Client,
        id: google_protobuf_uint64,
    ) -> std_shared_ptr<krpc_StreamImpl>;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client13remove_streamEy"]
    pub fn krpc_Client_remove_stream(this: *mut krpc_Client, id: google_protobuf_uint64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client14freeze_streamsEv"]
    pub fn krpc_Client_freeze_streams(this: *mut krpc_Client);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client12thaw_streamsEv"]
    pub fn krpc_Client_thaw_streams(this: *mut krpc_Client);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6Client27get_stream_update_conditionEv"]
    pub fn krpc_Client_get_stream_update_condition(
        this: *const krpc_Client,
    ) -> *mut std_condition_variable;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc6Client32get_stream_update_condition_lockEv"]
    pub fn krpc_Client_get_stream_update_condition_lock(
        this: *const krpc_Client,
    ) -> *mut std_unique_lock<std_mutex>;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client21acquire_stream_updateEv"]
    pub fn krpc_Client_acquire_stream_update(this: *mut krpc_Client);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client21release_stream_updateEv"]
    pub fn krpc_Client_release_stream_update(this: *mut krpc_Client);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client22wait_for_stream_updateEd"]
    pub fn krpc_Client_wait_for_stream_update(this: *mut krpc_Client, timeout: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client26add_stream_update_callbackERKNSt3__18functionIFvvEEE"]
    pub fn krpc_Client_add_stream_update_callback(
        this: *mut krpc_Client,
        callback: *const krpc_Client_Callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6Client29remove_stream_update_callbackEi"]
    pub fn krpc_Client_remove_stream_update_callback(
        this: *mut krpc_Client,
        tag: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6ClientC1Ev"]
    pub fn krpc_Client_Client(this: *mut krpc_Client);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc6ClientC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_jj"]
    pub fn krpc_Client_Client1(
        this: *mut krpc_Client,
        name: *const std_string,
        address: *const std_string,
        rpc_port: ::std::os::raw::c_uint,
        stream_port: ::std::os::raw::c_uint,
    );
}
impl krpc_Client {
    #[inline]
    pub unsafe fn invoke(&mut self, request: *const krpc_schema_Request) -> std_string {
        krpc_Client_invoke(self, request)
    }
    #[inline]
    pub unsafe fn invoke1(&mut self, call: *const krpc_schema_ProcedureCall) -> std_string {
        krpc_Client_invoke1(self, call)
    }
    #[inline]
    pub unsafe fn invoke2(
        &mut self,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> std_string {
        krpc_Client_invoke2(self, service, procedure, args)
    }
    #[inline]
    pub unsafe fn build_request(
        &mut self,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> krpc_schema_Request {
        krpc_Client_build_request(self, service, procedure, args)
    }
    #[inline]
    pub unsafe fn build_call(
        &mut self,
        service: *const std_string,
        procedure: *const std_string,
        args: *const std_vector,
    ) -> krpc_schema_ProcedureCall {
        krpc_Client_build_call(self, service, procedure, args)
    }
    #[inline]
    pub unsafe fn add_exception_thrower(
        &mut self,
        service: *const std_string,
        name: *const std_string,
        thrower: *const [u128; 3usize],
    ) {
        krpc_Client_add_exception_thrower(self, service, name, thrower)
    }
    #[inline]
    pub unsafe fn add_stream(
        &mut self,
        call: *const krpc_schema_ProcedureCall,
    ) -> std_shared_ptr<krpc_StreamImpl> {
        krpc_Client_add_stream(self, call)
    }
    #[inline]
    pub unsafe fn get_stream(
        &mut self,
        id: google_protobuf_uint64,
    ) -> std_shared_ptr<krpc_StreamImpl> {
        krpc_Client_get_stream(self, id)
    }
    #[inline]
    pub unsafe fn remove_stream(&mut self, id: google_protobuf_uint64) {
        krpc_Client_remove_stream(self, id)
    }
    #[inline]
    pub unsafe fn freeze_streams(&mut self) {
        krpc_Client_freeze_streams(self)
    }
    #[inline]
    pub unsafe fn thaw_streams(&mut self) {
        krpc_Client_thaw_streams(self)
    }
    #[inline]
    pub unsafe fn get_stream_update_condition(&self) -> *mut std_condition_variable {
        krpc_Client_get_stream_update_condition(self)
    }
    #[inline]
    pub unsafe fn get_stream_update_condition_lock(&self) -> *mut std_unique_lock<std_mutex> {
        krpc_Client_get_stream_update_condition_lock(self)
    }
    #[inline]
    pub unsafe fn acquire_stream_update(&mut self) {
        krpc_Client_acquire_stream_update(self)
    }
    #[inline]
    pub unsafe fn release_stream_update(&mut self) {
        krpc_Client_release_stream_update(self)
    }
    #[inline]
    pub unsafe fn wait_for_stream_update(&mut self, timeout: f64) {
        krpc_Client_wait_for_stream_update(self, timeout)
    }
    #[inline]
    pub unsafe fn add_stream_update_callback(
        &mut self,
        callback: *const krpc_Client_Callback,
    ) -> ::std::os::raw::c_int {
        krpc_Client_add_stream_update_callback(self, callback)
    }
    #[inline]
    pub unsafe fn remove_stream_update_callback(&mut self, tag: ::std::os::raw::c_int) {
        krpc_Client_remove_stream_update_callback(self, tag)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_Client_Client(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        name: *const std_string,
        address: *const std_string,
        rpc_port: ::std::os::raw::c_uint,
        stream_port: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_Client_Client1(&mut __bindgen_tmp, name, address, rpc_port, stream_port);
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct krpc_RPCError {
    pub _base: std_runtime_error,
}
#[test]
fn bindgen_test_layout_krpc_RPCError() {
    assert_eq!(
        ::std::mem::size_of::<krpc_RPCError>(),
        16usize,
        concat!("Size of: ", stringify!(krpc_RPCError))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_RPCError>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_RPCError))
    );
}
#[repr(C)]
pub struct krpc_Object {
    pub _client: *mut krpc_Client,
    pub _id: google_protobuf_uint64,
    pub _name: std_string,
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc7connectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_jj"]
    pub fn krpc_connect(
        name: *const std_string,
        address: *const std_string,
        rpc_port: ::std::os::raw::c_uint,
        stream_port: ::std::os::raw::c_uint,
    ) -> krpc_Client;
}
#[repr(C)]
pub struct krpc_StreamImpl {
    pub client: *mut krpc_Client,
    pub id: google_protobuf_uint64,
    pub update_lock: *mut std_recursive_mutex,
    pub started: bool,
    pub updated: bool,
    pub data: std_string,
    pub exception: std_exception_ptr,
    pub condition: std_condition_variable,
    pub condition_mutex: std_mutex,
    pub condition_lock: std_unique_lock<std_mutex>,
    pub callbacks: krpc_StreamImpl_Callbacks,
    pub next_callback_tag: ::std::os::raw::c_int,
    pub _rate: f32,
}
pub type krpc_StreamImpl_Callback = std_function;
pub type krpc_StreamImpl_Callbacks = std_map;
#[test]
fn bindgen_test_layout_krpc_StreamImpl() {
    assert_eq!(
        ::std::mem::size_of::<krpc_StreamImpl>(),
        224usize,
        concat!("Size of: ", stringify!(krpc_StreamImpl))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_StreamImpl>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_StreamImpl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).client as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).update_lock as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(update_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).started as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(started)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).updated as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(updated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).exception as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).condition as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).condition_mutex as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(condition_mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).condition_lock as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(condition_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>())).callbacks as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<krpc_StreamImpl>())).next_callback_tag as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(next_callback_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_StreamImpl>()))._rate as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_StreamImpl),
            "::",
            stringify!(_rate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl10get_clientEv"]
    pub fn krpc_StreamImpl_get_client(this: *const krpc_StreamImpl) -> *mut krpc_Client;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl6get_idEv"]
    pub fn krpc_StreamImpl_get_id(this: *const krpc_StreamImpl) -> google_protobuf_uint64;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl5startEv"]
    pub fn krpc_StreamImpl_start(this: *mut krpc_StreamImpl);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl11has_startedEv"]
    pub fn krpc_StreamImpl_has_started(this: *const krpc_StreamImpl) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl4rateEv"]
    pub fn krpc_StreamImpl_rate(this: *const krpc_StreamImpl) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl8set_rateEf"]
    pub fn krpc_StreamImpl_set_rate(this: *mut krpc_StreamImpl, value: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl8get_dataEv"]
    pub fn krpc_StreamImpl_get_data(this: *mut krpc_StreamImpl) -> *const std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl6updateERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKSt13exception_ptr"]
    pub fn krpc_StreamImpl_update(
        this: *mut krpc_StreamImpl,
        data: *const std_string,
        exception: *const std_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl11has_updatedEv"]
    pub fn krpc_StreamImpl_has_updated(this: *const krpc_StreamImpl) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl13get_conditionEv"]
    pub fn krpc_StreamImpl_get_condition(this: *mut krpc_StreamImpl)
        -> *mut std_condition_variable;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl18get_condition_lockEv"]
    pub fn krpc_StreamImpl_get_condition_lock(
        this: *mut krpc_StreamImpl,
    ) -> *mut std_unique_lock<std_mutex>;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc10StreamImpl13get_callbacksEv"]
    pub fn krpc_StreamImpl_get_callbacks(
        this: *const krpc_StreamImpl,
    ) -> *const krpc_StreamImpl_Callbacks;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl12add_callbackERKNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE"]
    pub fn krpc_StreamImpl_add_callback(
        this: *mut krpc_StreamImpl,
        callback: *const krpc_StreamImpl_Callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl15remove_callbackEi"]
    pub fn krpc_StreamImpl_remove_callback(this: *mut krpc_StreamImpl, tag: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImpl6removeEv"]
    pub fn krpc_StreamImpl_remove(this: *mut krpc_StreamImpl);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc10StreamImplC1EPNS_6ClientEyPNSt3__115recursive_mutexE"]
    pub fn krpc_StreamImpl_StreamImpl(
        this: *mut krpc_StreamImpl,
        client: *mut krpc_Client,
        id: google_protobuf_uint64,
        update_lock: *mut std_recursive_mutex,
    );
}
impl krpc_StreamImpl {
    #[inline]
    pub unsafe fn get_client(&self) -> *mut krpc_Client {
        krpc_StreamImpl_get_client(self)
    }
    #[inline]
    pub unsafe fn get_id(&self) -> google_protobuf_uint64 {
        krpc_StreamImpl_get_id(self)
    }
    #[inline]
    pub unsafe fn start(&mut self) {
        krpc_StreamImpl_start(self)
    }
    #[inline]
    pub unsafe fn has_started(&self) -> bool {
        krpc_StreamImpl_has_started(self)
    }
    #[inline]
    pub unsafe fn rate(&self) -> f32 {
        krpc_StreamImpl_rate(self)
    }
    #[inline]
    pub unsafe fn set_rate(&mut self, value: f32) {
        krpc_StreamImpl_set_rate(self, value)
    }
    #[inline]
    pub unsafe fn get_data(&mut self) -> *const std_string {
        krpc_StreamImpl_get_data(self)
    }
    #[inline]
    pub unsafe fn update(&mut self, data: *const std_string, exception: *const std_exception_ptr) {
        krpc_StreamImpl_update(self, data, exception)
    }
    #[inline]
    pub unsafe fn has_updated(&self) -> bool {
        krpc_StreamImpl_has_updated(self)
    }
    #[inline]
    pub unsafe fn get_condition(&mut self) -> *mut std_condition_variable {
        krpc_StreamImpl_get_condition(self)
    }
    #[inline]
    pub unsafe fn get_condition_lock(&mut self) -> *mut std_unique_lock<std_mutex> {
        krpc_StreamImpl_get_condition_lock(self)
    }
    #[inline]
    pub unsafe fn get_callbacks(&self) -> *const krpc_StreamImpl_Callbacks {
        krpc_StreamImpl_get_callbacks(self)
    }
    #[inline]
    pub unsafe fn add_callback(
        &mut self,
        callback: *const krpc_StreamImpl_Callback,
    ) -> ::std::os::raw::c_int {
        krpc_StreamImpl_add_callback(self, callback)
    }
    #[inline]
    pub unsafe fn remove_callback(&mut self, tag: ::std::os::raw::c_int) {
        krpc_StreamImpl_remove_callback(self, tag)
    }
    #[inline]
    pub unsafe fn remove(&mut self) {
        krpc_StreamImpl_remove(self)
    }
    #[inline]
    pub unsafe fn new(
        client: *mut krpc_Client,
        id: google_protobuf_uint64,
        update_lock: *mut std_recursive_mutex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_StreamImpl_StreamImpl(&mut __bindgen_tmp, client, id, update_lock);
        __bindgen_tmp
    }
}
#[repr(C)]
pub struct krpc_Stream {
    pub impl_: std_shared_ptr<krpc_StreamImpl>,
    pub acquired: bool,
}
pub type krpc_Stream_Callback = std_function;
#[repr(C)]
pub struct krpc_Event {
    pub _stream: krpc_Stream,
}
pub type krpc_Event_Callback = std_function;
#[test]
fn bindgen_test_layout_krpc_Event() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Event>(),
        24usize,
        concat!("Size of: ", stringify!(krpc_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_Event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Event>()))._stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Event),
            "::",
            stringify!(_stream)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event5startEv"]
    pub fn krpc_Event_start(this: *mut krpc_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc5Event13get_conditionEv"]
    pub fn krpc_Event_get_condition(this: *const krpc_Event) -> *mut std_condition_variable;
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc5Event18get_condition_lockEv"]
    pub fn krpc_Event_get_condition_lock(
        this: *const krpc_Event,
    ) -> *mut std_unique_lock<std_mutex>;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event7acquireEv"]
    pub fn krpc_Event_acquire(this: *mut krpc_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event7releaseEv"]
    pub fn krpc_Event_release(this: *mut krpc_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event4waitEd"]
    pub fn krpc_Event_wait(this: *mut krpc_Event, timeout: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event12add_callbackERKNSt3__18functionIFvvEEE"]
    pub fn krpc_Event_add_callback(
        this: *mut krpc_Event,
        callback: *const krpc_Event_Callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event15remove_callbackEi"]
    pub fn krpc_Event_remove_callback(this: *mut krpc_Event, tag: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5Event6removeEv"]
    pub fn krpc_Event_remove(this: *mut krpc_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZNK4krpc5Event6streamEv"]
    pub fn krpc_Event_stream(this: *const krpc_Event) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5EventC1Ev"]
    pub fn krpc_Event_Event(this: *mut krpc_Event);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc5EventC1EPNS_6ClientERKNS_6schema5EventE"]
    pub fn krpc_Event_Event1(
        this: *mut krpc_Event,
        client: *mut krpc_Client,
        message: *const krpc_schema_Event,
    );
}
impl krpc_Event {
    #[inline]
    pub unsafe fn start(&mut self) {
        krpc_Event_start(self)
    }
    #[inline]
    pub unsafe fn get_condition(&self) -> *mut std_condition_variable {
        krpc_Event_get_condition(self)
    }
    #[inline]
    pub unsafe fn get_condition_lock(&self) -> *mut std_unique_lock<std_mutex> {
        krpc_Event_get_condition_lock(self)
    }
    #[inline]
    pub unsafe fn acquire(&mut self) {
        krpc_Event_acquire(self)
    }
    #[inline]
    pub unsafe fn release(&mut self) {
        krpc_Event_release(self)
    }
    #[inline]
    pub unsafe fn wait(&mut self, timeout: f64) {
        krpc_Event_wait(self, timeout)
    }
    #[inline]
    pub unsafe fn add_callback(
        &mut self,
        callback: *const krpc_Event_Callback,
    ) -> ::std::os::raw::c_int {
        krpc_Event_add_callback(self, callback)
    }
    #[inline]
    pub unsafe fn remove_callback(&mut self, tag: ::std::os::raw::c_int) {
        krpc_Event_remove_callback(self, tag)
    }
    #[inline]
    pub unsafe fn remove(&mut self) {
        krpc_Event_remove(self)
    }
    #[inline]
    pub unsafe fn stream(&self) -> krpc_Stream {
        krpc_Event_stream(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_Event_Event(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(client: *mut krpc_Client, message: *const krpc_schema_Event) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_Event_Event1(&mut __bindgen_tmp, client, message);
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_Service {
    pub _client: *mut krpc_Client,
}
#[test]
fn bindgen_test_layout_krpc_Service() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Service>(),
        8usize,
        concat!("Size of: ", stringify!(krpc_Service))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Service>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_Service))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krpc_Service>()))._client as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krpc_Service),
            "::",
            stringify!(_client)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krpc_services_KRPC {
    pub _base: krpc_Service,
}
#[repr(C)]
#[derive(Debug)]
pub struct krpc_services_KRPC_ArgumentException {
    pub _base: krpc_RPCError,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_ArgumentException() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_ArgumentException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(krpc_services_KRPC_ArgumentException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_ArgumentException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(krpc_services_KRPC_ArgumentException)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct krpc_services_KRPC_ArgumentNullException {
    pub _base: krpc_RPCError,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_ArgumentNullException() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_ArgumentNullException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(krpc_services_KRPC_ArgumentNullException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_ArgumentNullException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(krpc_services_KRPC_ArgumentNullException)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct krpc_services_KRPC_ArgumentOutOfRangeException {
    pub _base: krpc_RPCError,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_ArgumentOutOfRangeException() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_ArgumentOutOfRangeException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(krpc_services_KRPC_ArgumentOutOfRangeException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_ArgumentOutOfRangeException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(krpc_services_KRPC_ArgumentOutOfRangeException)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct krpc_services_KRPC_InvalidOperationException {
    pub _base: krpc_RPCError,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_InvalidOperationException() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_InvalidOperationException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(krpc_services_KRPC_InvalidOperationException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_InvalidOperationException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(krpc_services_KRPC_InvalidOperationException)
        )
    );
}
pub const krpc_services_KRPC_GameScene_space_center: krpc_services_KRPC_GameScene = 0;
pub const krpc_services_KRPC_GameScene_flight: krpc_services_KRPC_GameScene = 1;
pub const krpc_services_KRPC_GameScene_tracking_station: krpc_services_KRPC_GameScene = 2;
pub const krpc_services_KRPC_GameScene_editor_vab: krpc_services_KRPC_GameScene = 3;
pub const krpc_services_KRPC_GameScene_editor_sph: krpc_services_KRPC_GameScene = 4;
pub type krpc_services_KRPC_GameScene = i32;
#[repr(C)]
pub struct krpc_services_KRPC_Expression {
    pub _base: krpc_Object,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_Expression() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_Expression>(),
        40usize,
        concat!("Size of: ", stringify!(krpc_services_KRPC_Expression))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_Expression>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_services_KRPC_Expression))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3addERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_add(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9aggregateERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19aggregate_with_seedERNS_6ClientES2_S2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate_with_seed(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3allERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_all(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression4and_ERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_and_(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3anyERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_any(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression7averageERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_average(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression4callERNS_6ClientENS_6schema13ProcedureCallE"]
    pub fn krpc_services_KRPC_Expression_call(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression4castERNS_6ClientES2_NS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_cast(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6concatERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_concat(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13constant_boolERNS_6ClientEb"]
    pub fn krpc_services_KRPC_Expression_constant_bool(
        client: *mut krpc_Client,
        value: bool,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15constant_doubleERNS_6ClientEd"]
    pub fn krpc_services_KRPC_Expression_constant_double(
        client: *mut krpc_Client,
        value: f64,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14constant_floatERNS_6ClientEf"]
    pub fn krpc_services_KRPC_Expression_constant_float(
        client: *mut krpc_Client,
        value: f32,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12constant_intERNS_6ClientEi"]
    pub fn krpc_services_KRPC_Expression_constant_int(
        client: *mut krpc_Client,
        value: i32,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15constant_stringERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE"]
    pub fn krpc_services_KRPC_Expression_constant_string(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8containsERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_contains(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression5countERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_count(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17create_dictionaryERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES9_"]
    pub fn krpc_services_KRPC_Expression_create_dictionary(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11create_listERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_list(
        client: *mut krpc_Client,
        values: std_vector,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10create_setERNS_6ClientENSt3__13setIS2_NS5_4lessIS2_EENS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_set(
        client: *mut krpc_Client,
        values: std_set,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12create_tupleERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_tuple(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6divideERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_divide(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression5equalERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12exclusive_orERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_exclusive_or(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8functionERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES2_"]
    pub fn krpc_services_KRPC_Expression_function(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3getERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_get(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12greater_thanERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression21greater_than_or_equalERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than_or_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6invokeERNS_6ClientES2_NSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES2_NS5_4lessISC_EENSA_INS5_4pairIKSC_S2_EEEEEE"]
    pub fn krpc_services_KRPC_Expression_invoke(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10left_shiftERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_left_shift(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9less_thanERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression18less_than_or_equalERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than_or_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3maxERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_max(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3minERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_min(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6moduloERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_modulo(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8multiplyERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_multiply(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression4not_ERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_not_(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9not_equalERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_not_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3or_ERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_or_(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8order_byERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_order_by(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9parameterERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_parameter(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression5powerERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_power(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11right_shiftERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_right_shift(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6selectERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_select(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8subtractERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_subtract(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression3sumERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_sum(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression7to_listERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_list(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression6to_setERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_set(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression5whereERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_where(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10add_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_add_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16aggregate_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression26aggregate_with_seed_streamERNS_6ClientES2_S2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate_with_seed_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10all_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_all_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11and__streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_and__stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10any_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_any_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14average_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_average_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11call_streamERNS_6ClientENS_6schema13ProcedureCallE"]
    pub fn krpc_services_KRPC_Expression_call_stream(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11cast_streamERNS_6ClientES2_NS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_cast_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13concat_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_concat_stream(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression20constant_bool_streamERNS_6ClientEb"]
    pub fn krpc_services_KRPC_Expression_constant_bool_stream(
        client: *mut krpc_Client,
        value: bool,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression22constant_double_streamERNS_6ClientEd"]
    pub fn krpc_services_KRPC_Expression_constant_double_stream(
        client: *mut krpc_Client,
        value: f64,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression21constant_float_streamERNS_6ClientEf"]
    pub fn krpc_services_KRPC_Expression_constant_float_stream(
        client: *mut krpc_Client,
        value: f32,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19constant_int_streamERNS_6ClientEi"]
    pub fn krpc_services_KRPC_Expression_constant_int_stream(
        client: *mut krpc_Client,
        value: i32,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression22constant_string_streamERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE"]
    pub fn krpc_services_KRPC_Expression_constant_string_stream(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15contains_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_contains_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12count_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_count_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression24create_dictionary_streamERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES9_"]
    pub fn krpc_services_KRPC_Expression_create_dictionary_stream(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression18create_list_streamERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_list_stream(
        client: *mut krpc_Client,
        values: std_vector,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17create_set_streamERNS_6ClientENSt3__13setIS2_NS5_4lessIS2_EENS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_set_stream(
        client: *mut krpc_Client,
        values: std_set,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19create_tuple_streamERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_tuple_stream(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13divide_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_divide_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12equal_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19exclusive_or_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_exclusive_or_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15function_streamERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES2_"]
    pub fn krpc_services_KRPC_Expression_function_stream(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10get_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_get_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19greater_than_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression28greater_than_or_equal_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than_or_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13invoke_streamERNS_6ClientES2_NSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES2_NS5_4lessISC_EENSA_INS5_4pairIKSC_S2_EEEEEE"]
    pub fn krpc_services_KRPC_Expression_invoke_stream(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17left_shift_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_left_shift_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16less_than_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression25less_than_or_equal_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than_or_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10max_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_max_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10min_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_min_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13modulo_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_modulo_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15multiply_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_multiply_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11not__streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_not__stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16not_equal_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_not_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10or__streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_or__stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15order_by_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_order_by_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16parameter_streamERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_parameter_stream(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12power_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_power_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression18right_shift_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_right_shift_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13select_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_select_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15subtract_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_subtract_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10sum_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_sum_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14to_list_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_list_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13to_set_streamERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_set_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12where_streamERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_where_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8add_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_add_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14aggregate_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression24aggregate_with_seed_callERNS_6ClientES2_S2_S2_"]
    pub fn krpc_services_KRPC_Expression_aggregate_with_seed_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8all_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_all_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9and__callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_and__call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8any_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_any_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12average_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_average_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9call_callERNS_6ClientENS_6schema13ProcedureCallE"]
    pub fn krpc_services_KRPC_Expression_call_call(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9cast_callERNS_6ClientES2_NS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_cast_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11concat_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_concat_call(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression18constant_bool_callERNS_6ClientEb"]
    pub fn krpc_services_KRPC_Expression_constant_bool_call(
        client: *mut krpc_Client,
        value: bool,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression20constant_double_callERNS_6ClientEd"]
    pub fn krpc_services_KRPC_Expression_constant_double_call(
        client: *mut krpc_Client,
        value: f64,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression19constant_float_callERNS_6ClientEf"]
    pub fn krpc_services_KRPC_Expression_constant_float_call(
        client: *mut krpc_Client,
        value: f32,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17constant_int_callERNS_6ClientEi"]
    pub fn krpc_services_KRPC_Expression_constant_int_call(
        client: *mut krpc_Client,
        value: i32,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression20constant_string_callERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE"]
    pub fn krpc_services_KRPC_Expression_constant_string_call(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13contains_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_contains_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10count_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_count_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression22create_dictionary_callERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES9_"]
    pub fn krpc_services_KRPC_Expression_create_dictionary_call(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16create_list_callERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_list_call(
        client: *mut krpc_Client,
        values: std_vector,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15create_set_callERNS_6ClientENSt3__13setIS2_NS5_4lessIS2_EENS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_set_call(
        client: *mut krpc_Client,
        values: std_set,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17create_tuple_callERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEE"]
    pub fn krpc_services_KRPC_Expression_create_tuple_call(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11divide_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_divide_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10equal_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17exclusive_or_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_exclusive_or_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13function_callERNS_6ClientENSt3__16vectorIS2_NS5_9allocatorIS2_EEEES2_"]
    pub fn krpc_services_KRPC_Expression_function_call(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8get_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_get_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression17greater_than_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression26greater_than_or_equal_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_greater_than_or_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11invoke_callERNS_6ClientES2_NSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES2_NS5_4lessISC_EENSA_INS5_4pairIKSC_S2_EEEEEE"]
    pub fn krpc_services_KRPC_Expression_invoke_call(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression15left_shift_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_left_shift_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14less_than_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression23less_than_or_equal_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_less_than_or_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8max_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_max_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8min_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_min_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11modulo_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_modulo_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13multiply_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_multiply_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression9not__callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_not__call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14not_equal_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_not_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8or__callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_or__call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13order_by_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_order_by_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression14parameter_callERNS_6ClientENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS1_4TypeE"]
    pub fn krpc_services_KRPC_Expression_parameter_call(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10power_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_power_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression16right_shift_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_right_shift_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11select_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_select_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression13subtract_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_subtract_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression8sum_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_sum_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression12to_list_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_list_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression11to_set_callERNS_6ClientES2_"]
    pub fn krpc_services_KRPC_Expression_to_set_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10Expression10where_callERNS_6ClientES2_S2_"]
    pub fn krpc_services_KRPC_Expression_where_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10ExpressionC1EPNS_6ClientEy"]
    pub fn krpc_services_KRPC_Expression_Expression(
        this: *mut krpc_services_KRPC_Expression,
        client: *mut krpc_Client,
        id: u64,
    );
}
impl krpc_services_KRPC_Expression {
    #[inline]
    pub unsafe fn add(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_add(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn aggregate(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_aggregate(client, arg, func)
    }
    #[inline]
    pub unsafe fn aggregate_with_seed(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_aggregate_with_seed(client, arg, seed, func)
    }
    #[inline]
    pub unsafe fn all(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_all(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn and_(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_and_(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn any(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_any(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn average(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_average(client, arg)
    }
    #[inline]
    pub unsafe fn call(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_call(client, call)
    }
    #[inline]
    pub unsafe fn cast(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_cast(client, arg, type_)
    }
    #[inline]
    pub unsafe fn concat(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_concat(client, arg1, arg2)
    }
    #[inline]
    pub unsafe fn constant_bool(
        client: *mut krpc_Client,
        value: bool,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_constant_bool(client, value)
    }
    #[inline]
    pub unsafe fn constant_double(
        client: *mut krpc_Client,
        value: f64,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_constant_double(client, value)
    }
    #[inline]
    pub unsafe fn constant_float(
        client: *mut krpc_Client,
        value: f32,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_constant_float(client, value)
    }
    #[inline]
    pub unsafe fn constant_int(
        client: *mut krpc_Client,
        value: i32,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_constant_int(client, value)
    }
    #[inline]
    pub unsafe fn constant_string(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_constant_string(client, value)
    }
    #[inline]
    pub unsafe fn contains(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_contains(client, arg, value)
    }
    #[inline]
    pub unsafe fn count(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_count(client, arg)
    }
    #[inline]
    pub unsafe fn create_dictionary(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_create_dictionary(client, keys, values)
    }
    #[inline]
    pub unsafe fn create_list(
        client: *mut krpc_Client,
        values: std_vector,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_create_list(client, values)
    }
    #[inline]
    pub unsafe fn create_set(
        client: *mut krpc_Client,
        values: std_set,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_create_set(client, values)
    }
    #[inline]
    pub unsafe fn create_tuple(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_create_tuple(client, elements)
    }
    #[inline]
    pub unsafe fn divide(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_divide(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_equal(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn exclusive_or(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_exclusive_or(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn function(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_function(client, parameters, body)
    }
    #[inline]
    pub unsafe fn get(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_get(client, arg, index)
    }
    #[inline]
    pub unsafe fn greater_than(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_greater_than(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn greater_than_or_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_greater_than_or_equal(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn invoke(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_invoke(client, function, args)
    }
    #[inline]
    pub unsafe fn left_shift(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_left_shift(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_less_than(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than_or_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_less_than_or_equal(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn max(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_max(client, arg)
    }
    #[inline]
    pub unsafe fn min(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_min(client, arg)
    }
    #[inline]
    pub unsafe fn modulo(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_modulo(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn multiply(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_multiply(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn not_(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_not_(client, arg)
    }
    #[inline]
    pub unsafe fn not_equal(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_not_equal(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn or_(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_or_(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn order_by(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_order_by(client, arg, key)
    }
    #[inline]
    pub unsafe fn parameter(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_parameter(client, name, type_)
    }
    #[inline]
    pub unsafe fn power(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_power(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn right_shift(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_right_shift(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn select(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_select(client, arg, func)
    }
    #[inline]
    pub unsafe fn subtract(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_subtract(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn sum(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_sum(client, arg)
    }
    #[inline]
    pub unsafe fn to_list(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_to_list(client, arg)
    }
    #[inline]
    pub unsafe fn to_set(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_to_set(client, arg)
    }
    #[inline]
    pub unsafe fn where_(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_services_KRPC_Expression {
        krpc_services_KRPC_Expression_where(client, arg, func)
    }
    #[inline]
    pub unsafe fn add_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_add_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn aggregate_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_aggregate_stream(client, arg, func)
    }
    #[inline]
    pub unsafe fn aggregate_with_seed_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_aggregate_with_seed_stream(client, arg, seed, func)
    }
    #[inline]
    pub unsafe fn all_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_all_stream(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn and__stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_and__stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn any_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_any_stream(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn average_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_average_stream(client, arg)
    }
    #[inline]
    pub unsafe fn call_stream(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_call_stream(client, call)
    }
    #[inline]
    pub unsafe fn cast_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_cast_stream(client, arg, type_)
    }
    #[inline]
    pub unsafe fn concat_stream(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_concat_stream(client, arg1, arg2)
    }
    #[inline]
    pub unsafe fn constant_bool_stream(client: *mut krpc_Client, value: bool) -> krpc_Stream {
        krpc_services_KRPC_Expression_constant_bool_stream(client, value)
    }
    #[inline]
    pub unsafe fn constant_double_stream(client: *mut krpc_Client, value: f64) -> krpc_Stream {
        krpc_services_KRPC_Expression_constant_double_stream(client, value)
    }
    #[inline]
    pub unsafe fn constant_float_stream(client: *mut krpc_Client, value: f32) -> krpc_Stream {
        krpc_services_KRPC_Expression_constant_float_stream(client, value)
    }
    #[inline]
    pub unsafe fn constant_int_stream(client: *mut krpc_Client, value: i32) -> krpc_Stream {
        krpc_services_KRPC_Expression_constant_int_stream(client, value)
    }
    #[inline]
    pub unsafe fn constant_string_stream(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_constant_string_stream(client, value)
    }
    #[inline]
    pub unsafe fn contains_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_contains_stream(client, arg, value)
    }
    #[inline]
    pub unsafe fn count_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_count_stream(client, arg)
    }
    #[inline]
    pub unsafe fn create_dictionary_stream(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_create_dictionary_stream(client, keys, values)
    }
    #[inline]
    pub unsafe fn create_list_stream(client: *mut krpc_Client, values: std_vector) -> krpc_Stream {
        krpc_services_KRPC_Expression_create_list_stream(client, values)
    }
    #[inline]
    pub unsafe fn create_set_stream(client: *mut krpc_Client, values: std_set) -> krpc_Stream {
        krpc_services_KRPC_Expression_create_set_stream(client, values)
    }
    #[inline]
    pub unsafe fn create_tuple_stream(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_create_tuple_stream(client, elements)
    }
    #[inline]
    pub unsafe fn divide_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_divide_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_equal_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn exclusive_or_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_exclusive_or_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn function_stream(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_function_stream(client, parameters, body)
    }
    #[inline]
    pub unsafe fn get_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_get_stream(client, arg, index)
    }
    #[inline]
    pub unsafe fn greater_than_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_greater_than_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn greater_than_or_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_greater_than_or_equal_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn invoke_stream(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_invoke_stream(client, function, args)
    }
    #[inline]
    pub unsafe fn left_shift_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_left_shift_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_less_than_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than_or_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_less_than_or_equal_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn max_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_max_stream(client, arg)
    }
    #[inline]
    pub unsafe fn min_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_min_stream(client, arg)
    }
    #[inline]
    pub unsafe fn modulo_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_modulo_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn multiply_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_multiply_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn not__stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_not__stream(client, arg)
    }
    #[inline]
    pub unsafe fn not_equal_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_not_equal_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn or__stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_or__stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn order_by_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_order_by_stream(client, arg, key)
    }
    #[inline]
    pub unsafe fn parameter_stream(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_parameter_stream(client, name, type_)
    }
    #[inline]
    pub unsafe fn power_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_power_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn right_shift_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_right_shift_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn select_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_select_stream(client, arg, func)
    }
    #[inline]
    pub unsafe fn subtract_stream(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_subtract_stream(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn sum_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_sum_stream(client, arg)
    }
    #[inline]
    pub unsafe fn to_list_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_to_list_stream(client, arg)
    }
    #[inline]
    pub unsafe fn to_set_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_to_set_stream(client, arg)
    }
    #[inline]
    pub unsafe fn where_stream(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_Expression_where_stream(client, arg, func)
    }
    #[inline]
    pub unsafe fn add_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_add_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn aggregate_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_aggregate_call(client, arg, func)
    }
    #[inline]
    pub unsafe fn aggregate_with_seed_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        seed: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_aggregate_with_seed_call(client, arg, seed, func)
    }
    #[inline]
    pub unsafe fn all_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_all_call(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn and__call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_and__call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn any_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        predicate: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_any_call(client, arg, predicate)
    }
    #[inline]
    pub unsafe fn average_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_average_call(client, arg)
    }
    #[inline]
    pub unsafe fn call_call(
        client: *mut krpc_Client,
        call: krpc_schema_ProcedureCall,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_call_call(client, call)
    }
    #[inline]
    pub unsafe fn cast_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_cast_call(client, arg, type_)
    }
    #[inline]
    pub unsafe fn concat_call(
        client: *mut krpc_Client,
        arg1: krpc_services_KRPC_Expression,
        arg2: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_concat_call(client, arg1, arg2)
    }
    #[inline]
    pub unsafe fn constant_bool_call(
        client: *mut krpc_Client,
        value: bool,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_constant_bool_call(client, value)
    }
    #[inline]
    pub unsafe fn constant_double_call(
        client: *mut krpc_Client,
        value: f64,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_constant_double_call(client, value)
    }
    #[inline]
    pub unsafe fn constant_float_call(
        client: *mut krpc_Client,
        value: f32,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_constant_float_call(client, value)
    }
    #[inline]
    pub unsafe fn constant_int_call(
        client: *mut krpc_Client,
        value: i32,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_constant_int_call(client, value)
    }
    #[inline]
    pub unsafe fn constant_string_call(
        client: *mut krpc_Client,
        value: std_string,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_constant_string_call(client, value)
    }
    #[inline]
    pub unsafe fn contains_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        value: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_contains_call(client, arg, value)
    }
    #[inline]
    pub unsafe fn count_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_count_call(client, arg)
    }
    #[inline]
    pub unsafe fn create_dictionary_call(
        client: *mut krpc_Client,
        keys: std_vector,
        values: std_vector,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_create_dictionary_call(client, keys, values)
    }
    #[inline]
    pub unsafe fn create_list_call(
        client: *mut krpc_Client,
        values: std_vector,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_create_list_call(client, values)
    }
    #[inline]
    pub unsafe fn create_set_call(
        client: *mut krpc_Client,
        values: std_set,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_create_set_call(client, values)
    }
    #[inline]
    pub unsafe fn create_tuple_call(
        client: *mut krpc_Client,
        elements: std_vector,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_create_tuple_call(client, elements)
    }
    #[inline]
    pub unsafe fn divide_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_divide_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_equal_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn exclusive_or_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_exclusive_or_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn function_call(
        client: *mut krpc_Client,
        parameters: std_vector,
        body: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_function_call(client, parameters, body)
    }
    #[inline]
    pub unsafe fn get_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        index: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_get_call(client, arg, index)
    }
    #[inline]
    pub unsafe fn greater_than_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_greater_than_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn greater_than_or_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_greater_than_or_equal_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn invoke_call(
        client: *mut krpc_Client,
        function: krpc_services_KRPC_Expression,
        args: std_map,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_invoke_call(client, function, args)
    }
    #[inline]
    pub unsafe fn left_shift_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_left_shift_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_less_than_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn less_than_or_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_less_than_or_equal_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn max_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_max_call(client, arg)
    }
    #[inline]
    pub unsafe fn min_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_min_call(client, arg)
    }
    #[inline]
    pub unsafe fn modulo_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_modulo_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn multiply_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_multiply_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn not__call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_not__call(client, arg)
    }
    #[inline]
    pub unsafe fn not_equal_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_not_equal_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn or__call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_or__call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn order_by_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        key: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_order_by_call(client, arg, key)
    }
    #[inline]
    pub unsafe fn parameter_call(
        client: *mut krpc_Client,
        name: std_string,
        type_: krpc_services_KRPC_Type,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_parameter_call(client, name, type_)
    }
    #[inline]
    pub unsafe fn power_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_power_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn right_shift_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_right_shift_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn select_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_select_call(client, arg, func)
    }
    #[inline]
    pub unsafe fn subtract_call(
        client: *mut krpc_Client,
        arg0: krpc_services_KRPC_Expression,
        arg1: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_subtract_call(client, arg0, arg1)
    }
    #[inline]
    pub unsafe fn sum_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_sum_call(client, arg)
    }
    #[inline]
    pub unsafe fn to_list_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_to_list_call(client, arg)
    }
    #[inline]
    pub unsafe fn to_set_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_to_set_call(client, arg)
    }
    #[inline]
    pub unsafe fn where_call(
        client: *mut krpc_Client,
        arg: krpc_services_KRPC_Expression,
        func: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Expression_where_call(client, arg, func)
    }
    #[inline]
    pub unsafe fn new(client: *mut krpc_Client, id: u64) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_services_KRPC_Expression_Expression(&mut __bindgen_tmp, client, id);
        __bindgen_tmp
    }
}
#[repr(C)]
pub struct krpc_services_KRPC_Type {
    pub _base: krpc_Object,
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC_Type() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC_Type>(),
        40usize,
        concat!("Size of: ", stringify!(krpc_services_KRPC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC_Type>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_services_KRPC_Type))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type5bool_ERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_bool_(client: *mut krpc_Client) -> krpc_services_KRPC_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type7double_ERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_double_(client: *mut krpc_Client) -> krpc_services_KRPC_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type6float_ERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_float_(client: *mut krpc_Client) -> krpc_services_KRPC_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type4int_ERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_int_(client: *mut krpc_Client) -> krpc_services_KRPC_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type6stringERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_string(client: *mut krpc_Client) -> krpc_services_KRPC_Type;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type12bool__streamERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_bool__stream(client: *mut krpc_Client) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type14double__streamERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_double__stream(client: *mut krpc_Client) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type13float__streamERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_float__stream(client: *mut krpc_Client) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type11int__streamERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_int__stream(client: *mut krpc_Client) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type13string_streamERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_string_stream(client: *mut krpc_Client) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type10bool__callERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_bool__call(
        client: *mut krpc_Client,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type12double__callERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_double__call(
        client: *mut krpc_Client,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type11float__callERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_float__call(
        client: *mut krpc_Client,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type9int__callERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_int__call(client: *mut krpc_Client)
        -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4Type11string_callERNS_6ClientE"]
    pub fn krpc_services_KRPC_Type_string_call(
        client: *mut krpc_Client,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC4TypeC1EPNS_6ClientEy"]
    pub fn krpc_services_KRPC_Type_Type(
        this: *mut krpc_services_KRPC_Type,
        client: *mut krpc_Client,
        id: u64,
    );
}
impl krpc_services_KRPC_Type {
    #[inline]
    pub unsafe fn bool_(client: *mut krpc_Client) -> krpc_services_KRPC_Type {
        krpc_services_KRPC_Type_bool_(client)
    }
    #[inline]
    pub unsafe fn double_(client: *mut krpc_Client) -> krpc_services_KRPC_Type {
        krpc_services_KRPC_Type_double_(client)
    }
    #[inline]
    pub unsafe fn float_(client: *mut krpc_Client) -> krpc_services_KRPC_Type {
        krpc_services_KRPC_Type_float_(client)
    }
    #[inline]
    pub unsafe fn int_(client: *mut krpc_Client) -> krpc_services_KRPC_Type {
        krpc_services_KRPC_Type_int_(client)
    }
    #[inline]
    pub unsafe fn string(client: *mut krpc_Client) -> krpc_services_KRPC_Type {
        krpc_services_KRPC_Type_string(client)
    }
    #[inline]
    pub unsafe fn bool__stream(client: *mut krpc_Client) -> krpc_Stream {
        krpc_services_KRPC_Type_bool__stream(client)
    }
    #[inline]
    pub unsafe fn double__stream(client: *mut krpc_Client) -> krpc_Stream {
        krpc_services_KRPC_Type_double__stream(client)
    }
    #[inline]
    pub unsafe fn float__stream(client: *mut krpc_Client) -> krpc_Stream {
        krpc_services_KRPC_Type_float__stream(client)
    }
    #[inline]
    pub unsafe fn int__stream(client: *mut krpc_Client) -> krpc_Stream {
        krpc_services_KRPC_Type_int__stream(client)
    }
    #[inline]
    pub unsafe fn string_stream(client: *mut krpc_Client) -> krpc_Stream {
        krpc_services_KRPC_Type_string_stream(client)
    }
    #[inline]
    pub unsafe fn bool__call(client: *mut krpc_Client) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Type_bool__call(client)
    }
    #[inline]
    pub unsafe fn double__call(client: *mut krpc_Client) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Type_double__call(client)
    }
    #[inline]
    pub unsafe fn float__call(client: *mut krpc_Client) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Type_float__call(client)
    }
    #[inline]
    pub unsafe fn int__call(client: *mut krpc_Client) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Type_int__call(client)
    }
    #[inline]
    pub unsafe fn string_call(client: *mut krpc_Client) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_Type_string_call(client)
    }
    #[inline]
    pub unsafe fn new(client: *mut krpc_Client, id: u64) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_services_KRPC_Type_Type(&mut __bindgen_tmp, client, id);
        __bindgen_tmp
    }
}
#[test]
fn bindgen_test_layout_krpc_services_KRPC() {
    assert_eq!(
        ::std::mem::size_of::<krpc_services_KRPC>(),
        8usize,
        concat!("Size of: ", stringify!(krpc_services_KRPC))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_services_KRPC>(),
        8usize,
        concat!("Alignment of ", stringify!(krpc_services_KRPC))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC9add_eventENS1_10ExpressionE"]
    pub fn krpc_services_KRPC_add_event(
        this: *mut krpc_services_KRPC,
        expression: krpc_services_KRPC_Expression,
    ) -> krpc_Event;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10add_streamENS_6schema13ProcedureCallEb"]
    pub fn krpc_services_KRPC_add_stream(
        this: *mut krpc_services_KRPC,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_schema_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC13get_client_idEv"]
    pub fn krpc_services_KRPC_get_client_id(this: *mut krpc_services_KRPC) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC15get_client_nameEv"]
    pub fn krpc_services_KRPC_get_client_name(this: *mut krpc_services_KRPC) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC12get_servicesEv"]
    pub fn krpc_services_KRPC_get_services(this: *mut krpc_services_KRPC) -> krpc_schema_Services;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10get_statusEv"]
    pub fn krpc_services_KRPC_get_status(this: *mut krpc_services_KRPC) -> krpc_schema_Status;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC13remove_streamEy"]
    pub fn krpc_services_KRPC_remove_stream(this: *mut krpc_services_KRPC, id: u64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC15set_stream_rateEyf"]
    pub fn krpc_services_KRPC_set_stream_rate(this: *mut krpc_services_KRPC, id: u64, rate: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC12start_streamEy"]
    pub fn krpc_services_KRPC_start_stream(this: *mut krpc_services_KRPC, id: u64);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC7clientsEv"]
    pub fn krpc_services_KRPC_clients(this: *mut krpc_services_KRPC) -> std_vector;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC18current_game_sceneEv"]
    pub fn krpc_services_KRPC_current_game_scene(
        this: *mut krpc_services_KRPC,
    ) -> krpc_services_KRPC_GameScene;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC6pausedEv"]
    pub fn krpc_services_KRPC_paused(this: *mut krpc_services_KRPC) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC10set_pausedEb"]
    pub fn krpc_services_KRPC_set_paused(this: *mut krpc_services_KRPC, value: bool);
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC16add_event_streamENS1_10ExpressionE"]
    pub fn krpc_services_KRPC_add_event_stream(
        this: *mut krpc_services_KRPC,
        expression: krpc_services_KRPC_Expression,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC17add_stream_streamENS_6schema13ProcedureCallEb"]
    pub fn krpc_services_KRPC_add_stream_stream(
        this: *mut krpc_services_KRPC,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC20get_client_id_streamEv"]
    pub fn krpc_services_KRPC_get_client_id_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC22get_client_name_streamEv"]
    pub fn krpc_services_KRPC_get_client_name_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC19get_services_streamEv"]
    pub fn krpc_services_KRPC_get_services_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC17get_status_streamEv"]
    pub fn krpc_services_KRPC_get_status_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC14clients_streamEv"]
    pub fn krpc_services_KRPC_clients_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC25current_game_scene_streamEv"]
    pub fn krpc_services_KRPC_current_game_scene_stream(
        this: *mut krpc_services_KRPC,
    ) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC13paused_streamEv"]
    pub fn krpc_services_KRPC_paused_stream(this: *mut krpc_services_KRPC) -> krpc_Stream;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC14add_event_callENS1_10ExpressionE"]
    pub fn krpc_services_KRPC_add_event_call(
        this: *mut krpc_services_KRPC,
        expression: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC15add_stream_callENS_6schema13ProcedureCallEb"]
    pub fn krpc_services_KRPC_add_stream_call(
        this: *mut krpc_services_KRPC,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC18get_client_id_callEv"]
    pub fn krpc_services_KRPC_get_client_id_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC20get_client_name_callEv"]
    pub fn krpc_services_KRPC_get_client_name_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC17get_services_callEv"]
    pub fn krpc_services_KRPC_get_services_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC15get_status_callEv"]
    pub fn krpc_services_KRPC_get_status_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC18remove_stream_callEy"]
    pub fn krpc_services_KRPC_remove_stream_call(
        this: *mut krpc_services_KRPC,
        id: u64,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC20set_stream_rate_callEyf"]
    pub fn krpc_services_KRPC_set_stream_rate_call(
        this: *mut krpc_services_KRPC,
        id: u64,
        rate: f32,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC17start_stream_callEy"]
    pub fn krpc_services_KRPC_start_stream_call(
        this: *mut krpc_services_KRPC,
        id: u64,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC12clients_callEv"]
    pub fn krpc_services_KRPC_clients_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC23current_game_scene_callEv"]
    pub fn krpc_services_KRPC_current_game_scene_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC11paused_callEv"]
    pub fn krpc_services_KRPC_paused_call(
        this: *mut krpc_services_KRPC,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPC15set_paused_callEb"]
    pub fn krpc_services_KRPC_set_paused_call(
        this: *mut krpc_services_KRPC,
        value: bool,
    ) -> krpc_schema_ProcedureCall;
}
extern "C" {
    #[link_name = "\u{1}__ZN4krpc8services4KRPCC1EPNS_6ClientE"]
    pub fn krpc_services_KRPC_KRPC(this: *mut krpc_services_KRPC, client: *mut krpc_Client);
}
impl krpc_services_KRPC {
    #[inline]
    pub unsafe fn add_event(&mut self, expression: krpc_services_KRPC_Expression) -> krpc_Event {
        krpc_services_KRPC_add_event(self, expression)
    }
    #[inline]
    pub unsafe fn add_stream(
        &mut self,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_schema_Stream {
        krpc_services_KRPC_add_stream(self, call, start)
    }
    #[inline]
    pub unsafe fn get_client_id(&mut self) -> std_string {
        krpc_services_KRPC_get_client_id(self)
    }
    #[inline]
    pub unsafe fn get_client_name(&mut self) -> std_string {
        krpc_services_KRPC_get_client_name(self)
    }
    #[inline]
    pub unsafe fn get_services(&mut self) -> krpc_schema_Services {
        krpc_services_KRPC_get_services(self)
    }
    #[inline]
    pub unsafe fn get_status(&mut self) -> krpc_schema_Status {
        krpc_services_KRPC_get_status(self)
    }
    #[inline]
    pub unsafe fn remove_stream(&mut self, id: u64) {
        krpc_services_KRPC_remove_stream(self, id)
    }
    #[inline]
    pub unsafe fn set_stream_rate(&mut self, id: u64, rate: f32) {
        krpc_services_KRPC_set_stream_rate(self, id, rate)
    }
    #[inline]
    pub unsafe fn start_stream(&mut self, id: u64) {
        krpc_services_KRPC_start_stream(self, id)
    }
    #[inline]
    pub unsafe fn clients(&mut self) -> std_vector {
        krpc_services_KRPC_clients(self)
    }
    #[inline]
    pub unsafe fn current_game_scene(&mut self) -> krpc_services_KRPC_GameScene {
        krpc_services_KRPC_current_game_scene(self)
    }
    #[inline]
    pub unsafe fn paused(&mut self) -> bool {
        krpc_services_KRPC_paused(self)
    }
    #[inline]
    pub unsafe fn set_paused(&mut self, value: bool) {
        krpc_services_KRPC_set_paused(self, value)
    }
    #[inline]
    pub unsafe fn add_event_stream(
        &mut self,
        expression: krpc_services_KRPC_Expression,
    ) -> krpc_Stream {
        krpc_services_KRPC_add_event_stream(self, expression)
    }
    #[inline]
    pub unsafe fn add_stream_stream(
        &mut self,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_Stream {
        krpc_services_KRPC_add_stream_stream(self, call, start)
    }
    #[inline]
    pub unsafe fn get_client_id_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_get_client_id_stream(self)
    }
    #[inline]
    pub unsafe fn get_client_name_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_get_client_name_stream(self)
    }
    #[inline]
    pub unsafe fn get_services_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_get_services_stream(self)
    }
    #[inline]
    pub unsafe fn get_status_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_get_status_stream(self)
    }
    #[inline]
    pub unsafe fn clients_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_clients_stream(self)
    }
    #[inline]
    pub unsafe fn current_game_scene_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_current_game_scene_stream(self)
    }
    #[inline]
    pub unsafe fn paused_stream(&mut self) -> krpc_Stream {
        krpc_services_KRPC_paused_stream(self)
    }
    #[inline]
    pub unsafe fn add_event_call(
        &mut self,
        expression: krpc_services_KRPC_Expression,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_add_event_call(self, expression)
    }
    #[inline]
    pub unsafe fn add_stream_call(
        &mut self,
        call: krpc_schema_ProcedureCall,
        start: bool,
    ) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_add_stream_call(self, call, start)
    }
    #[inline]
    pub unsafe fn get_client_id_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_get_client_id_call(self)
    }
    #[inline]
    pub unsafe fn get_client_name_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_get_client_name_call(self)
    }
    #[inline]
    pub unsafe fn get_services_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_get_services_call(self)
    }
    #[inline]
    pub unsafe fn get_status_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_get_status_call(self)
    }
    #[inline]
    pub unsafe fn remove_stream_call(&mut self, id: u64) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_remove_stream_call(self, id)
    }
    #[inline]
    pub unsafe fn set_stream_rate_call(&mut self, id: u64, rate: f32) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_set_stream_rate_call(self, id, rate)
    }
    #[inline]
    pub unsafe fn start_stream_call(&mut self, id: u64) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_start_stream_call(self, id)
    }
    #[inline]
    pub unsafe fn clients_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_clients_call(self)
    }
    #[inline]
    pub unsafe fn current_game_scene_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_current_game_scene_call(self)
    }
    #[inline]
    pub unsafe fn paused_call(&mut self) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_paused_call(self)
    }
    #[inline]
    pub unsafe fn set_paused_call(&mut self, value: bool) -> krpc_schema_ProcedureCall {
        krpc_services_KRPC_set_paused_call(self, value)
    }
    #[inline]
    pub unsafe fn new(client: *mut krpc_Client) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        krpc_services_KRPC_KRPC(&mut __bindgen_tmp, client);
        __bindgen_tmp
    }
}
#[test]
fn __bindgen_test_layout_std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_istream>(),
        168usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_istream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_istream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_istream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_ostream>(),
        160usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_ostream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_ostream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_ostream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_lock_open0_std_mutex_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_unique_lock<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_lock<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_pair_open0_google_protobuf_uint32_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_pair<google_protobuf_uint32, bool>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( std_pair < google_protobuf_uint32 , bool > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_pair<google_protobuf_uint32, bool>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( std_pair < google_protobuf_uint32 , bool > )
        )
    );
}
#[test]
fn __bindgen_test_layout_std_pair_open0_google_protobuf_io_CodedInputStream_Limit_int_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<
            std_pair<google_protobuf_io_CodedInputStream_Limit, ::std::os::raw::c_int>,
        >(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( std_pair < google_protobuf_io_CodedInputStream_Limit , :: std :: os :: raw :: c_int > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            std_pair<google_protobuf_io_CodedInputStream_Limit, ::std::os::raw::c_int>,
        >(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( std_pair < google_protobuf_io_CodedInputStream_Limit , :: std :: os :: raw :: c_int > )
        )
    );
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_size_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        8usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_int_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        4usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_int_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        4usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_google_protobuf_UnknownField_std_allocator_open1_google_protobuf_UnknownField_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_google_protobuf_UnknownField_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_internal_InternalMetadataWithArenaBase_open0_google_protobuf_UnknownFieldSet_google_protobuf_internal_InternalMetadataWithArena_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_internal_InternalMetadataWithArenaBase>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_internal_InternalMetadataWithArenaBase)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_internal_InternalMetadataWithArenaBase>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_internal_InternalMetadataWithArenaBase)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_google_protobuf_DescriptorPool_Tables_std_default_delete_open1_google_protobuf_DescriptorPool_Tables_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_google_protobuf_DescriptorPool_Tables_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_set_open0_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_set>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_set))
    );
    assert_eq!(
        ::std::mem::align_of::<std_set>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_ProcedureCall_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_ProcedureCall_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_ProcedureCall_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Argument_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Argument_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Argument_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Service_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Service_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Service_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Procedure_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Procedure_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Class_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Class_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Enumeration_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Enumeration_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Exception_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Exception_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Procedure_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Class_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Enumeration_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Exception_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Parameter_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Parameter_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedField_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedField>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedField_open0_int_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedField>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Parameter_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedField_open0_int_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedField>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedField)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_atomic_open0_int_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic>(),
        4usize,
        concat!("Size of template specialization: ", stringify!(std_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_atomic)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_EnumerationValue_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_EnumerationValue_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_EnumerationValue_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Type_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_google_protobuf_RepeatedPtrField_open0_krpc_schema_Type_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<google_protobuf_RepeatedPtrField>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<google_protobuf_RepeatedPtrField>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(google_protobuf_RepeatedPtrField)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_6(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_7(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_krpc_StreamImpl_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<krpc_StreamImpl>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<krpc_StreamImpl>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_krpc_StreamImpl_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<krpc_StreamImpl>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<krpc_StreamImpl>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_lock_open0_std_mutex_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_unique_lock<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_lock<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_krpc_Connection_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<krpc_Connection>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<krpc_Connection>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<krpc_Connection>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<krpc_Connection>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_krpc_StreamManager_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<krpc_StreamManager>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamManager>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<krpc_StreamManager>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamManager>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_std_mutex_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_map_open0_std_pair_open1_std_string_std_string_close1__bindgen_ty_id_122911_open1__bindgen_ty_id_122908_close1_std_less_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2_std_pair_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3__bindgen_ty_id_122972_open3__bindgen_ty_id_122969_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_map>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_map))
    );
    assert_eq!(
        ::std::mem::align_of::<std_map>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_8(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_9(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_pair_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2__bindgen_ty_id_122972_open2__bindgen_ty_id_122969_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_10(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_11(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_lock_open0_std_mutex_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_unique_lock<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_lock<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_map_open0_int_krpc_StreamImpl_Callback_std_less_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_std_function_open3__bindgen_ty_id_123143_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_map>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_map))
    );
    assert_eq!(
        ::std::mem::align_of::<std_map>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_pair_open1_const_int_std_function_open2__bindgen_ty_id_123143_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_lock_open0_std_mutex_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_unique_lock<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_lock<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_shared_ptr_open0_krpc_StreamImpl_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_shared_ptr<krpc_StreamImpl>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_shared_ptr<krpc_StreamImpl>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_shared_ptr<krpc_StreamImpl>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_lock_open0_std_mutex_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_unique_lock<std_mutex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_lock<std_mutex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_lock<std_mutex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_bool__close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_tuple_open1_std_string_std_string_std_string_close1_std_allocator_open1_std_tuple_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_tuple_open0_std_string_std_string_std_string_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_tuple>(),
        72usize,
        concat!("Size of template specialization: ", stringify!(std_tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<std_tuple>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_tuple)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_tuple_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_tuple_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_tuple>(),
        72usize,
        concat!("Size of template specialization: ", stringify!(std_tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<std_tuple>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_tuple)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_12(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_13(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_14(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_Event_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_schema_Stream_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_std_string_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_std_string_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_schema_Services_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_schema_Status_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_std_vector_open1_std_tuple_open2_std_string_std_string_std_string_close2_std_allocator_open2_std_tuple_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_std_tuple_open1_std_string_std_string_std_string_close1_std_allocator_open1_std_tuple_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_tuple_open0_std_string_std_string_std_string_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_tuple>(),
        72usize,
        concat!("Size of template specialization: ", stringify!(std_tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<std_tuple>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_tuple)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_tuple_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_tuple_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_tuple>(),
        72usize,
        concat!("Size of template specialization: ", stringify!(std_tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<std_tuple>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_tuple)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_15(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_16(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_17(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_GameScene_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_bool__close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Object_open0_krpc_services_KRPC_Expression_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Object>(),
        40usize,
        concat!("Size of template specialization: ", stringify!(krpc_Object))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Object>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Object)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_1()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_2()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_set_open0_krpc_services_KRPC_Expression_std_less_open1_krpc_services_KRPC_Expression_close1_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_set>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_set))
    );
    assert_eq!(
        ::std::mem::align_of::<std_set>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_krpc_services_KRPC_Expression_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_3()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_4()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_5()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_map_open0_std_string_krpc_services_KRPC_Expression_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_krpc_services_KRPC_Expression_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_map>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_map))
    );
    assert_eq!(
        ::std::mem::align_of::<std_map>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_18(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_krpc_services_KRPC_Expression_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_krpc_services_KRPC_Expression_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        64usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_19(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_6()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_6(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_7()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_7(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_8()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_set_open0_krpc_services_KRPC_Expression_std_less_open1_krpc_services_KRPC_Expression_close1_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_set>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_set))
    );
    assert_eq!(
        ::std::mem::align_of::<std_set>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_krpc_services_KRPC_Expression_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_9()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_8(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_10()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_22() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_23() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_9(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_11()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_24() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_25() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_26() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_27() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_map_open0_std_string_krpc_services_KRPC_Expression_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_krpc_services_KRPC_Expression_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_map>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_map))
    );
    assert_eq!(
        ::std::mem::align_of::<std_map>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_20(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_22() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_krpc_services_KRPC_Expression_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_krpc_services_KRPC_Expression_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        64usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_21(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_23() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_28() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_29() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_30() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_31() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_32() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_33() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_34() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_35() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_36() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_37() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_38() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_39() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_40() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_41() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_42() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_43() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_44() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_45() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_46() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_47() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Expression_close0_instantiation_48() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_10(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_12()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_11(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_13()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_12(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_14()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_set_open0_krpc_services_KRPC_Expression_std_less_open1_krpc_services_KRPC_Expression_close1_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_set>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_set))
    );
    assert_eq!(
        ::std::mem::align_of::<std_set>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_krpc_services_KRPC_Expression_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_15()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_13(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_16()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_vector_open0_krpc_services_KRPC_Expression_std_allocator_open1_krpc_services_KRPC_Expression_close1_close0_instantiation_14(
) {
    assert_eq!(
        ::std::mem::size_of::<std_vector>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<std_vector>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_vector)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_krpc_services_KRPC_Expression_close0_instantiation_17()
{
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_map_open0_std_string_krpc_services_KRPC_Expression_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_krpc_services_KRPC_Expression_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_map>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(std_map))
    );
    assert_eq!(
        ::std::mem::align_of::<std_map>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_22(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_24() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_22() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_krpc_services_KRPC_Expression_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_krpc_services_KRPC_Expression_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        64usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_pair<std_basic_string, krpc_services_KRPC_Expression>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( std_pair < std_basic_string , krpc_services_KRPC_Expression > )
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_23(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_25() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_23() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Object_open0_krpc_services_KRPC_Type_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Object>(),
        40usize,
        concat!("Size of template specialization: ", stringify!(krpc_Object))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Object>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Object)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Type_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Type_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Type_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Type_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
#[test]
fn __bindgen_test_layout_krpc_Stream_open0_krpc_services_KRPC_Type_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<krpc_Stream>(),
        24usize,
        concat!("Size of template specialization: ", stringify!(krpc_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<krpc_Stream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(krpc_Stream)
        )
    );
}
